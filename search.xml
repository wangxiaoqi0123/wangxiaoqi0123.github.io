<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>小程序初体验</title>
    <url>/2021/02/25/applets/applets02/</url>
    <content><![CDATA[<h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><ul>
<li>小程序开发工具下载<ul>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html</a></li>
</ul>
</li>
<li>使用开发工具创建小程序<ul>
<li>项目名称</li>
<li>目录</li>
<li>AppID</li>
<li>…</li>
</ul>
</li>
<li>AppID获取<ul>
<li>微信公众平台注册账号 <a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">https://mp.weixin.qq.com/</a></li>
<li>登录微信公众平台 开发 &gt; 开发管理 &gt; 开发设置 中查看AppID</li>
</ul>
</li>
<li>开发工具对项目配置详情<img style="margin-left:20px; height:500px" src="/images/2021/xcxcty_01.png">

</li>
</ul>
<h3 id="小程序的基本结构"><a href="#小程序的基本结构" class="headerlink" title="小程序的基本结构"></a>小程序的基本结构</h3><blockquote>
<p>小程序开发代码主要由四部分组成：<strong>.json 配置文件</strong>、<strong>.wxml 模板文件</strong>、<strong>.wxss 样式文件</strong>、<strong>.js 脚本逻辑文件</strong>。</p>
</blockquote>
<ul>
<li>.json 配置文件<ul>
<li>app.json 全局配置<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">"pages"</span>:[</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"pages/index/index"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"pages/logs/logs"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">"window"</span>:&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"backgroundTextStyle"</span>:<span class="string">"light"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"navigationBarBackgroundColor"</span>: <span class="string">"#fff"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"navigationBarTitleText"</span>: <span class="string">"Weixin"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"navigationBarTextStyle"</span>:<span class="string">"black"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">"style"</span>: <span class="string">"v2"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">"sitemapLocation"</span>: <span class="string">"sitemap.json"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<code>pages</code>用于指定小程序由哪些页面组成，每一项都对应一个页面的 路径（含文件名） 信息。<br><code>window</code>用于设置小程序的状态栏、导航条、标题、窗口背景色。<br><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html" target="_blank" rel="noopener">小程序app.json全局配置文档</a><br/>
<br/></li>
<li>页面配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;navigationBarBackgroundColor&quot;: &quot;#ff0000&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;navigationBarTextStyle&quot;: &quot;black&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;navigationBarTitleText&quot;: &quot;微信接口功能演示&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;backgroundColor&quot;: &quot;#eeeeee&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;backgroundTextStyle&quot;: &quot;light&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
页面中配置项在当前页面会覆盖 app.json 的 window 中相同的配置项。<br><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/page.html" target="_blank" rel="noopener">小程序page.json页面配置文档</a><br/>
<br/></li>
</ul>
</li>
<li>.wxml 模板文件<blockquote>
<p>xwml 和 html 非常相似，都有标签、属性等等构成的页面结构</p>
</blockquote>
<ul>
<li>标签<ul>
<li>与html不同，小程序的标签大部分是根据用途语义化的。如，view text …</li>
</ul>
</li>
<li>属性<ul>
<li>在 wxml 文件中，多了类似 vue 的属性声明，如 wx:if wx:for …</li>
</ul>
</li>
<li>WXML文档<ul>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/</a><br/>
<br/></li>
</ul>
</li>
</ul>
</li>
<li>.wxss 样式文件<blockquote>
<p>wxss和css基本上没有什么差别。区别在于wxss引入了新的尺寸单位rpx。</p>
</blockquote>
<ul>
<li>单位rpx<ul>
<li>rpx是把屏幕的宽度均分成了750个等份，然后1rpx就代表屏幕宽度的1/750，可以更方便的布局。</li>
</ul>
</li>
<li>导入样式<ul>
<li>@import语句可以导入外联样式表，@import后跟需要导入的外联样式表的相对路径，用;表示语句结束。</li>
</ul>
</li>
<li>WXSS文档<ul>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html</a><br/>
<br/></li>
</ul>
</li>
</ul>
</li>
<li>.js 脚本逻辑文件<ul>
<li>.js文件<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  data: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    text: <span class="string">"This is page data."</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onLoad: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 页面创建时执行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onShow: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 页面出现在前台时执行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onReady: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 页面首次渲染完毕时执行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onHide: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 页面从前台变为后台时执行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onUnload: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 页面销毁时执行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onPullDownRefresh: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 触发下拉刷新时执行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onReachBottom: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 页面触底时执行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onShareAppMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 页面被用户分享时执行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onPageScroll: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 页面滚动时执行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onResize: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 页面尺寸变化时执行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onTabItemTap(item) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// tab 点击时执行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(item.index)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(item.pagePath)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(item.text)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 事件响应函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  viewTap: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.setData(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      text: <span class="string">'Set some data for updating view.'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// this is setData callback</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 自由数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  customData: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    hi: <span class="string">'MINA'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html" target="_blank" rel="noopener">小程序.js 脚本逻辑文档</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序基础使用</title>
    <url>/2021/02/27/applets/applets01/</url>
    <content><![CDATA[<h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><blockquote>
<p>WXML中的动态数据均来自对应Page的data。</p>
</blockquote>
<ul>
<li>“Mustache”语法（双大括号）数据绑定<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span> &#123;&#123;message&#125;&#125; <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  data: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    message: <span class="string">'Hello MINA!'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure></li>
<li><code>setData</code> 添加/修改data中数据<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  data: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    message: <span class="string">''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.setData(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      message:<span class="string">'Hello World!'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/data.html" target="_blank" rel="noopener">数据绑定</a></li>
</ul>
<h3 id="生命周期钩子函数"><a href="#生命周期钩子函数" class="headerlink" title="生命周期钩子函数"></a>生命周期钩子函数</h3><ul>
<li>应用生命周期<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">App(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onLaunch (options) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// Do something initial when launch.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onShow (options) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// Do something when show.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onHide () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// Do something when hide.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
<strong>onLaunch</strong>: 小程序初始化完成时触发，全局只触发一次。<br><strong>onShow</strong>: 小程序启动，或从后台进入前台显示时触发。<br><strong>onHide</strong>: 小程序从前台进入后台时触发。<br><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html" target="_blank" rel="noopener">小程序生命周期文档</a><br/>
<br/></li>
<li>页面生命周期<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onLoad: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 页面创建时执行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onShow: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 页面出现在前台时执行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onReady: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 页面首次渲染完毕时执行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onHide: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 页面从前台变为后台时执行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onUnload: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 页面销毁时执行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
<strong>onLoad</strong>: 页面创建时执行。<br><strong>onShow</strong>: 页面出现在前台时执行。<br><strong>onReady</strong>: 页面首次渲染完毕时执行。<br><strong>onHide</strong>: 页面从前台变为后台时执行。<br><strong>onUnload</strong>: 页面销毁时执行。<br>页面初始化时 <code>onLoad &gt; onShow &gt; onReady</code><br><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page-life-cycle.html" target="_blank" rel="noopener">页面生命周期文档</a></li>
</ul>
<h3 id="WXML中常用语法"><a href="#WXML中常用语法" class="headerlink" title="WXML中常用语法"></a>WXML中常用语法</h3><ul>
<li>插值表达式&lcub;&lcub;&rcub;&rcub;<br>放置 死值<br>放置 变量<br>可以支持运算符 &gt; &lt; ? : ( 三元运算符 ) + -<br>
<br></li>
<li>属性<br>属性=&lcub;&lcub;死值 变量 运算符 &gt; &lt; ? : ( 三元运算符 ) + - * /&rcub;&rcub;<br>
<br></li>
<li>data-xxx 自定义属性<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">bind:tap</span>=<span class="string">"onGoToDetail"</span> <span class="attr">data-id</span>=<span class="string">"&#123;&#123;postId&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">onGoToDetail(event) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(event.currentTarget.dataset.id)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
  通过<code>data-</code>形式自定义的属性可以在event.currentTarget.dataset中获取到。<br>  1.自定义的属性在dataset中data-会被省略。例如 data-id =&gt; id<br>  2.当自定义属性中存在大写字母会被转换成小写。例如 data-postId =&gt; postid<br>  3.当自定义属性中存在多个-会被转换成驼峰。例如 data-post-id =&gt; postId<br>
<br></li>
<li>style 运算符写法<br>style=&quot;&lcub;&lcub;color?&apos;color:&apos;+color+&apos;;&apos;:&apos;&apos;&rcub;&rcub;&lcub;&lcub;size?&apos;font-size:&apos;+size+&apos;rpx&apos;:&apos;&apos;&rcub;&rcub;&quot;<br>
<br></li>
<li>class 运算符写法<br>class=&quot;text-class &lcub;&lcub;colorRed&rcub;&rcub; &lcub;&lcub;textSize&rcub;&rcub;&quot;<br>
<br></li>
<li>wx:if 条件渲染<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;view == 'WEBVIEW'&#125;&#125;"</span>&gt;</span> WEBVIEW <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:elif</span>=<span class="string">"&#123;&#123;view == 'APP'&#125;&#125;"</span>&gt;</span> APP <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>=<span class="string">"&#123;&#123;view == 'MINA'&#125;&#125;"</span>&gt;</span> MINA <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></pre></td></tr></table></figure>
  <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/conditional.html" target="_blank" rel="noopener">条件渲染</a><br>
<br></li>
<li>wx:for 列表渲染<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;array&#125;&#125;"</span> <span class="attr">wx:for-item</span>=<span class="string">"item"</span> <span class="attr">wx:for-index</span>=<span class="string">"index"</span> <span class="attr">wx:key</span>=<span class="string">"index"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;&#123;index&#125;&#125;: &#123;&#123;item.message&#125;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></pre></td></tr></table></figure>
  wx:for-item 默认值 item<br>  wx:for-index 默认值 index<br>  <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/list.html" target="_blank" rel="noopener">列表渲染</a><br>
<br></li>
<li>事件<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">catch:tap</span>=<span class="string">"handleViewTap"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">bind:tap</span>=<span class="string">"handleTextTap"</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  handleViewTap: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'on view tap'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  handleTextTap: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'on text tap'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
bind <code>允许</code>事件冒泡<br>catch <code>阻止</code>事件冒泡<br><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html" target="_blank" rel="noopener">事件系统</a></li>
</ul>
<h3 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h3><ul>
<li>navigateTo<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wx.navigateTo(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  url: <span class="string">'/pages/posts/posts'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
保留当前页面，跳转到应用内的某个页面。<br>不能跳到 tabbar 页面。<br>不可以无限使用，小程序中页面栈最多十层。<br><a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html" target="_blank" rel="noopener">wx.navigateTo</a><br/>
<br/></li>
<li>redirectTo<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wx.redirectTo(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  url: <span class="string">'/pages/posts/posts'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
关闭当前页面，跳转到应用内的某个页面。<br>不能跳转到 tabbar 页面。<br><a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.redirectTo.html" target="_blank" rel="noopener">wx.redirectTo</a><br/>
<br/></li>
<li>switchTab<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wx.switchTab(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  url: <span class="string">'/pages/posts/posts'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面<br><a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.switchTab.html" target="_blank" rel="noopener">wx.switchTab</a><br/>
<br/></li>
<li>页面之间通讯<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wx.navigateTo(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  url: <span class="string">'/pages/posts/posts?pid='</span>+<span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
与浏览器地址传参一样，通过在url ？ 后面 以 key=value&amp;key=value 的方式传递数据<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">onLoad(options) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(options) <span class="comment">// &#123; "pid": "1" &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
在跳转后的页面通过<code>onLoad生命周期函数</code>中拿到传递的参数对象</li>
</ul>
<h3 id="数据缓存"><a href="#数据缓存" class="headerlink" title="数据缓存"></a>数据缓存</h3><ul>
<li><p>App </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">App(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  globalData: <span class="string">'I am global data'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
<p>app.js文件中，在App内可以存储公共数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = getApp()</span></pre></td></tr></table></figure>
<p>在小程序的<code>任何位置</code>都可以通过getApp()函数，进行访问和修改。<br>当小程序<code>重新加载</code>时，数据会被<code>初始化</code>。</p>
</li>
<li><p>Storage</p>
<blockquote>
<p>小程序的Storage，类似于浏览器的localStorage，本地永久存储。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wx.setStorageSync(<span class="string">'data'</span>, &#123; <span class="attr">message</span>: <span class="string">'Storage'</span> &#125;)</span></pre></td></tr></table></figure>
<p><code>setStorageSync</code> 同步操作 增加/修改Storage数据。</p>
<br/>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = wx.getStorageSync(<span class="string">'data'</span>)</span></pre></td></tr></table></figure>
<p><code>getStorageSync</code> 同步操作 获取Storage中对应key的数据。</p>
<br/>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wx.removeStorageSync(<span class="string">'data'</span>)</span></pre></td></tr></table></figure>
<p><code>removeStorageSync</code> 同步操作 删除Storage中对应key的数据。</p>
<br/>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wx.clearStorageSync()</span></pre></td></tr></table></figure>
<p><code>clearStorageSync</code> 同步操作 清空整个Storage数据。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端css兼容处理</title>
    <url>/2020/08/14/css/css01/</url>
    <content><![CDATA[<h5 id="1-禁止用户缩放"><a href="#1-禁止用户缩放" class="headerlink" title="1. 禁止用户缩放"></a>1. 禁止用户缩放</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name&#x3D;&quot;viewport&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  content&#x3D;&quot;width&#x3D;device-width,initial-scale&#x3D;1.0,minimum-scale&#x3D;1.0,maximum-scale&#x3D;1.0,user-scalable&#x3D;no,viewport-fit&#x3D;cover&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&gt;</span></pre></td></tr></table></figure>

<h5 id="2-iphoneX-兼容适配"><a href="#2-iphoneX-兼容适配" class="headerlink" title="2. iphoneX 兼容适配"></a>2. iphoneX 兼容适配</h5><blockquote>
<p>设置视口viewport-fit=cover</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;viewport-fit&#x3D;cover&quot;&gt;</span></pre></td></tr></table></figure>
<blockquote>
<p>通过 constant() / env() 可以获取到非安全边距，再结合 padding 或 margin 来控制页面元素避开非安全区域。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; safe-area-inset-left：安全区域距离左边界距离，横屏时适配</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; safe-area-inset-right：安全区域距离右边界距离，横屏时适配</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; safe-area-inset-top：安全区域距离顶部边界距离，竖屏下刘海屏为44px，iphone6系列20px，竖屏刘海适配关键</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; safe-area-inset-bottom：安全区域距离底部边界距离，竖屏下为34px，竖屏小黑条适配关键</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">padding-bottom: constant(safe-area-inset-bottom); &#x2F;* iOS 11.0 *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">padding-bottom: env(safe-area-inset-bottom); &#x2F;* iOS 11.2 *&#x2F;</span></pre></td></tr></table></figure>

<h5 id="3-禁止复制与选中文本"><a href="#3-禁止复制与选中文本" class="headerlink" title="3. 禁止复制与选中文本"></a>3. 禁止复制与选中文本</h5>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.no-select &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  -webkit-user-select: none;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  -moz-user-select: none;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  -khtml-user-elect: none;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  user-select: none;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h5 id="4-禁止图片长按"><a href="#4-禁止图片长按" class="headerlink" title="4. 禁止图片长按"></a>4. 禁止图片长按</h5>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">img &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  pointer-events: none; &#x2F;*禁用鼠标*&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h5 id="5-ios滚动不流畅"><a href="#5-ios滚动不流畅" class="headerlink" title="5. ios滚动不流畅"></a>5. ios滚动不流畅</h5>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  -webkit-overflow-scrolling: touch;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h5 id="6-安卓键盘弹起视口变小"><a href="#6-安卓键盘弹起视口变小" class="headerlink" title="6. 安卓键盘弹起视口变小"></a>6. 安卓键盘弹起视口变小</h5><ol>
<li>获取完整屏幕宽高设置新的视口</li>
<li>onresize监听视口变化动态隐藏按钮</li>
</ol>
<h5 id="7-h5调用安卓或者ios的拨号功能"><a href="#7-h5调用安卓或者ios的拨号功能" class="headerlink" title="7. h5调用安卓或者ios的拨号功能"></a>7. h5调用安卓或者ios的拨号功能</h5>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;tel:13111111111&quot;&gt;点击拨打13111111111&lt;&#x2F;a&gt;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>async await 使用方式</title>
    <url>/2020/07/12/javascript/javascript02/</url>
    <content><![CDATA[<blockquote>
<p>作用: 用于将 <code>JS异步链式化</code> 使代码从上向下顺序执行, 相当于promise的 .then 的链式操作</p>
</blockquote>
<h3 id="asyns"><a href="#asyns" class="headerlink" title="asyns"></a>asyns</h3><ol>
<li>声明了此函数为异步函数</li>
<li>默认返回一个 promise 对象(函数后面可以接 .then 返回的结果就是 async函数里面 return的值 )</li>
</ol>
<h3 id="await"><a href="#await" class="headerlink" title="await"></a>await</h3><ol>
<li>一般是一个 promise 封装的异步函数 </li>
<li>await的结果 是promise返回成功的回调 resolve 的值</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 声明了此函数为异步函数</span></pre></td></tr><tr><td class="code"><pre><span class="line">async asyFun() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    let res &#x3D; await this.test();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(&quot;res :&quot;, res); &#x2F;&#x2F; 随便什么数据</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return res;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125; catch (error) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(&quot;error :&quot;, error);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 一般是一个 promise 封装的异步函数</span></pre></td></tr><tr><td class="code"><pre><span class="line">test() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return new Promise((resolve, reject) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 做一些异步操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">    setTimeout(function() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      resolve(&quot;随便什么数据&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;, 2000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 默认返回一个 promise 对象</span></pre></td></tr><tr><td class="code"><pre><span class="line">handle() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  this.asyFun().then(data &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(&quot;data :&quot;, data); &#x2F;&#x2F; 随便什么数据</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Decorator装饰器</title>
    <url>/2020/08/11/javascript/javascript03/</url>
    <content><![CDATA[<h3 id="装饰器介绍"><a href="#装饰器介绍" class="headerlink" title="装饰器介绍"></a>装饰器介绍</h3><ol>
<li>装饰器（Decorator）是ES2016提出来的一个提案，当前处于Stage 2阶段，目前还没有定案。</li>
<li>本质上是一个函数，使用方式以 @ + 函数名 的形式。</li>
<li>是一种与类（class）相关的语法，用来包装或者修改类或者类的方法的行为。</li>
</ol>
<h3 id="装饰器属性描述"><a href="#装饰器属性描述" class="headerlink" title="装饰器属性描述"></a>装饰器属性描述</h3><ol>
<li><code>target</code><ul>
<li>对应修饰方法的父类</li>
</ul>
</li>
<li><code>name</code><ul>
<li>对应修饰方法的名称(string)</li>
</ul>
</li>
<li><code>descriptor</code><ul>
<li><code>descriptor.configurable</code>：表示能不能通过delete删除属性，能否修改属性的其他描述符特性，或者能否将数据属性修改为访问器属性。当我们通过let obj = {name: ‘’}声明一个对象的时候，这个对象里面所有的属性的configurable描述符的值都是true</li>
<li><code>descriptor.enumerable</code>：表示能不能通过for in或者Object.keys等方式获取到属性，我们一般声明的对象里面这个描述符的值是true,但是对于class类里面的属性来说，这个值是false</li>
<li><code>descriptor.writable</code>：表示能否修改属性的数据值，通过将这个修改为false,可以实现属性只读的效果。</li>
<li><code>descriptor.value</code>：表示当前属性的数据值，读取属性值的时候，从这里读取；写入属性值的时候，会写到这个位置。</li>
</ul>
</li>
<li>举个例子<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Parent &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  @testable</span></pre></td></tr><tr><td class="code"><pre><span class="line">  test() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; console.log(&quot;hello World :&gt;&gt; &quot;, &quot;hello World&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">function testable(target, name, descriptor) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(&quot;target :&gt;&gt; &quot;, target, typeof target); &#x2F;&#x2F; 对应父类Parent</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(&quot;name :&gt;&gt; &quot;, name, typeof name); &#x2F;&#x2F; 直接输出 test string</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(&quot;descriptor :&gt;&gt; &quot;, descriptor, typeof descriptor); &#x2F;&#x2F; 描述属性对象</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(&quot;descriptor.value :&gt;&gt; &quot;, descriptor.value); &#x2F;&#x2F; 对应当前test()函数</span></pre></td></tr><tr><td class="code"><pre><span class="line">  target.isTestable &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="类的装饰"><a href="#类的装饰" class="headerlink" title="类的装饰"></a>类的装饰</h3><ul>
<li>类的装饰 一般主要使用 <code>target</code> 属性在其类上添加属性与方法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function testable(target) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  target.prototype.isTestable &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">@testable</span></pre></td></tr><tr><td class="code"><pre><span class="line">class MyTestableClass &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">let obj &#x3D; new MyTestableClass();</span></pre></td></tr><tr><td class="code"><pre><span class="line">obj.isTestable &#x2F;&#x2F; true</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="方法的装饰"><a href="#方法的装饰" class="headerlink" title="方法的装饰"></a>方法的装饰</h3><ul>
<li>方法的装饰 一般组要使用 <code>descriptor.value</code> 属性对当前修饰的方法进行<code>重写</code> 包装</li>
<li>一般会包裹一层方法用于传递参数<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; Toast &#125; from &quot;vant&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">* loading 装饰器</span></pre></td></tr><tr><td class="code"><pre><span class="line">* @param &#123;*&#125; message 提示信息</span></pre></td></tr><tr><td class="code"><pre><span class="line">* @param &#123;function&#125; errorFn 异常处理逻辑</span></pre></td></tr><tr><td class="code"><pre><span class="line">*&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export const loading &#x3D; function (message &#x3D; &quot;加载中...&quot;, errorFn &#x3D; function () &#123; &#125;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return function (target, name, descriptor) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    const fn &#x3D; descriptor.value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    descriptor.value &#x3D; async function (...rest) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      const loading &#x3D; Toast.loading(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        message: message,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        forbidClick: true</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return await fn.call(this, ...rest);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125; catch (error) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 在调用失败，且用户自定义失败的回调函数时，则执行</span></pre></td></tr><tr><td class="code"><pre><span class="line">        errorFn &amp;&amp; errorFn.call(this, error, ...rest);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        console.error(error);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        loading.clear();</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="装饰器环境配置"><a href="#装饰器环境配置" class="headerlink" title="装饰器环境配置"></a>装饰器环境配置</h3><ul>
<li>Vue项目vue-cli3/4来新建的项目，默认支持了装饰器，不需要再配置太多额外的东西，如果你的项目使用了eslint,那么需要给eslint配置以下内容。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parserOptions: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ecmaFeatures:&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 支持装饰器</span></pre></td></tr><tr><td class="code"><pre><span class="line">    legacyDecorators: true</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><ul>
<li><a href="https://github.com/wangxiaoqi0123/vue-cli3-vant/tree/ae/src/views/learn/de" target="_blank" rel="noopener">https://github.com/wangxiaoqi0123/vue-cli3-vant/tree/ae/src/views/learn/de</a></li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>css自定义变量var()函数</title>
    <url>/2020/08/14/css/css02/</url>
    <content><![CDATA[<h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><blockquote>
<p>var() 函数是由css语言提供的，用来自定义css变量的函数。</p>
</blockquote>
<h3 id="语法使用"><a href="#语法使用" class="headerlink" title="语法使用"></a>语法使用</h3><ol>
<li>声明变量 使用 <code>--变量名：value</code> 的形式，在根节点/父节点/当前节点 下创建变量<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  --red: #f00</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>使用变量 使用var()函数，引用 根节点/父节点/当前节点 下声明的变量，完成后样式就可以生效了<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.title &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  color: var(--red);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="vue中应用"><a href="#vue中应用" class="headerlink" title="vue中应用"></a>vue中应用</h3><ol>
<li>data 中声明 js 变量<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> data() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    color: &quot;red&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>通过style的方式创建css变量<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;box&quot; :style&#x3D;&quot;&#96;--color:$&#123;color&#125;&#96;&quot;&gt;&lt;&#x2F;div&gt;</span></pre></td></tr></table></figure></li>
<li>在css代码中该元素下使用变量<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.box &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  width: 200px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  height: 200px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  border: 1px solid #000;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  background-color: var(--color);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>动态改变js中的color变量就可以动态改变动态改变改box中的颜色<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;van-button @click&#x3D;&quot;color&#x3D;&#39;green&#39;&quot;&gt;green&lt;&#x2F;van-button&gt;</span></pre></td></tr></table></figure></li>
<li><a href="https://github.com/wangxiaoqi0123/vue-cli3-vant/blob/ae/src/views/learn/cv/index.vue" target="_blank" rel="noopener">https://github.com/wangxiaoqi0123/vue-cli3-vant/blob/ae/src/views/learn/cv/index.vue</a></li>
</ol>
<h3 id="兼容性？"><a href="#兼容性？" class="headerlink" title="兼容性？"></a>兼容性？</h3><p>  具体兼容性本人也不知道兼容怎么样，心里也没谱。不过我在小程序中 vant小程序UI库 中见到过这种使用方式。 </p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>export与exports</title>
    <url>/2020/06/19/javascript/javascript04/</url>
    <content><![CDATA[<h3 id="CommonJS-方式"><a href="#CommonJS-方式" class="headerlink" title="CommonJS 方式"></a>CommonJS 方式</h3><blockquote>
<p><strong>动态引入 代码执行时引入</strong></p>
</blockquote>
<h4 id="CommonJS-解构导出"><a href="#CommonJS-解构导出" class="headerlink" title="CommonJS 解构导出"></a>CommonJS 解构导出</h4><p>exports.key1 = value1<br>exports.key2 = value2<br>exports.key3 = value3</p>
<p>var {key1,key2,key3} = require(‘路径’)</p>
<h4 id="CommonJS-对象导出"><a href="#CommonJS-对象导出" class="headerlink" title="CommonJS 对象导出"></a>CommonJS 对象导出</h4><p>module.exports = { …}</p>
<p>var obj = require(‘路径’)</p>
<h3 id="ES6-方式"><a href="#ES6-方式" class="headerlink" title="ES6 方式"></a>ES6 方式</h3><blockquote>
<p><strong>静态引入，代码编译时引入</strong></p>
</blockquote>
<h4 id="ES6-结构导出"><a href="#ES6-结构导出" class="headerlink" title="ES6 结构导出"></a>ES6 结构导出</h4><p>export const key = value<br>export function fn () {}<br>export class Fn{}</p>
<p>import {key,fn,Fn} from “路径”</p>
<h4 id="ES6-对象导出"><a href="#ES6-对象导出" class="headerlink" title="ES6 对象导出"></a>ES6 对象导出</h4><p>export default {…}</p>
<p>import obj from “路径”</p>
<p>ES6 模块导入导出 只适合 结构的方式<br>export { key1 , key2} from “路径”</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里巴巴图标库</title>
    <url>/2020/06/19/css/css03/</url>
    <content><![CDATA[<h3 id="线上引用"><a href="#线上引用" class="headerlink" title="线上引用"></a>线上引用</h3><ol>
<li><p>查找图标添加至项目 进入项目</p>
</li>
<li><p>复制 Font class 在线生成 的地址<br>//at.alicdn.com/t/font_1199553_u7298mmz27i.css</p>
</li>
<li><p>页面 link 引用 注意加 http:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;http:&#x2F;&#x2F;at.alicdn.com&#x2F;t&#x2F;font_1199553_u7298mmz27i.css&quot;&gt;</span></pre></td></tr></table></figure>


</li>
</ol>
<ol start="4">
<li><p>标签 clas 添加 iconfont 和 对应图标名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;i class&#x3D;&quot;iconfont icon-xxx&quot;&gt;&lt;&#x2F;i&gt;</span></pre></td></tr></table></figure>
</li>
<li><p>当项目 添加新的 图标 在线地址要更新 页面的引用地址也要更新</p>
</li>
</ol>
<h3 id="下载引用"><a href="#下载引用" class="headerlink" title="下载引用"></a>下载引用</h3><ol>
<li><p>查找图标添加至项目 进入项目</p>
</li>
<li><p>点击下载 解压文件 选取 iconfont.css iconfont.eot iconfont.svg iconfont.ttf iconfont.woff 文件, 放在项目 assets 文件夹下 (最好新建一个文件夹 一起放进去)</p>
</li>
<li><p>main.js 中引入 iconfont.css 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &quot;@&#x2F;assets&#x2F;font&#x2F;iconfont.css&quot;;</span></pre></td></tr></table></figure>
</li>
<li><p>标签 clas 添加 iconfont 和 对应图标名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;i class&#x3D;&quot;iconfont icon-xxx&quot;&gt;&lt;&#x2F;i&gt;</span></pre></td></tr></table></figure>
</li>
<li><p>当项目 添加新的 图标 整个文件夹需要重新打包 替换</p>
</li>
</ol>
<h3 id="UI库扩展-iconfont"><a href="#UI库扩展-iconfont" class="headerlink" title="UI库扩展 iconfont"></a>UI库扩展 iconfont</h3><p>UI 一般也是icon一般也是使用字体图标 所以可以在可添加字体图标的组件上使用 icon=”iconfont icon-xxx”  方式扩展</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Iterator与Generator</title>
    <url>/2020/07/21/javascript/javascript05/</url>
    <content><![CDATA[<h3 id="Iterator（迭代器）"><a href="#Iterator（迭代器）" class="headerlink" title="Iterator（迭代器）"></a>Iterator（迭代器）</h3><ul>
<li><p>概念</p>
<ul>
<li>iterator是一种接口机制，为不同的数据结构提供统一的访问机制</li>
</ul>
</li>
<li><p>作用</p>
<ul>
<li>为各种数据结构（Object、Array、Set、Map…），提供一个统一的、简便的访问接口</li>
<li>使得数据结构的成员能够按照某种次序排列</li>
<li>ES6创造了一种新的遍历命令for…of循环，Iterator接口主要供for…of消费</li>
</ul>
</li>
<li><p>执行顺序</p>
<ul>
<li>创建一个指针对象，指向当前数据结构的起始位置。也就是说遍历器对象本质上，就是一个指针对象</li>
<li>第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员</li>
<li>第二次调用指针对象的next方法，指针就指向数据结构的第二个成员</li>
<li>不断调用指针的next方法，直到它指向数据结构的结束位置</li>
</ul>
</li>
<li><p>模拟next()方法执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let it &#x3D; makeIterator([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])</span></pre></td></tr><tr><td class="code"><pre><span class="line">function makeIterator(arr) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  let nextIndex &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      return nextIndex &lt; arr.length ? &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        value: arr[nextIndex++],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        done: false</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125; : &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        value: undefined,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        done: true</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(&#39;it.next() :&gt;&gt; &#39;, it.next());&#x2F;&#x2F; &#123; value:&#39;a&#39;, done:false &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(&#39;it.next() :&gt;&gt; &#39;, it.next());&#x2F;&#x2F; &#123; value:&#39;b&#39;, done:false &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(&#39;it.next() :&gt;&gt; &#39;, it.next());&#x2F;&#x2F; &#123; value:&#39;c&#39;, done:false &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(&#39;it.next() :&gt;&gt; &#39;, it.next());&#x2F;&#x2F; &#123; value:undefined, done:true &#125;</span></pre></td></tr></table></figure></li>
<li><p>js数据结构内置iterator接口</p>
<ul>
<li>Object、Array、Set、Map…内置iterator接口调用方法<code>Symbol.iterator</code>,原型上可查看到</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let arr &#x3D; [&#39;aa&#39;, &#39;bb&#39;, &#39;cc&#39;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">let it &#x3D; arr[Symbol.iterator](); &#x2F;&#x2F;调用Array内置的iterator接口</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(&#39;it.next() :&gt;&gt; &#39;, it.next());&#x2F;&#x2F;&#123;value: &quot;aa&quot;, done: false&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(&#39;it.next() :&gt;&gt; &#39;, it.next());&#x2F;&#x2F;&#123;value: &quot;bb&quot;, done: false&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(&#39;it.next() :&gt;&gt; &#39;, it.next());&#x2F;&#x2F;&#123;value: &quot;cc&quot;, done: false&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(&#39;it.next() :&gt;&gt; &#39;, it.next());&#x2F;&#x2F;&#123;value: undefined, done: true&#125;</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Generator（迭代器生成函数）"><a href="#Generator（迭代器生成函数）" class="headerlink" title="Generator（迭代器生成函数）"></a>Generator（迭代器生成函数）</h3><ul>
<li>概念<ul>
<li>Generator是一个迭代器生成函数，其返回值是一个迭代器（Iterator），可用于异步调用</li>
</ul>
</li>
<li>语法<ul>
<li>在function后面，函数名之前有个 * ，用来表示函数为Generator函数</li>
<li>函数内部有yield表达式，yield用来定义函数内部的状态</li>
</ul>
</li>
<li>执行机制<ul>
<li>调用Generator函数和普通函数一样，在函数名后面加上 () 即可，但是Generator函数不会像普通函数一样立即执行，而是返回一个指向内部状态对象的指针，所以要调用遍历对象Iterator的next方法，指针就会从函数头部或者上一次停下来的地方开始执行</li>
</ul>
</li>
<li>基本使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* tell() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(&#39;a&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  yield &#39;a&#39; &#x2F;&#x2F; 暂停的标识</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(&#39;b&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  yield &#39;b&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">let it &#x3D; tell() &#x2F;&#x2F; 执行tell()返回的是一个Iterator对象，并不是函数的执行</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(it.next());</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(it.next());</span></pre></td></tr></table></figure></li>
<li>分段调用传参<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function* myGenerator() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(1)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  let a &#x3D; yield &#x2F;&#x2F; 1.暂停标识 2.第二次next的传参</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(&#39;a :&gt;&gt; &#39;, a);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  let b &#x3D; yield</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(&#39;b :&gt;&gt; &#39;, b);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">let it &#x3D; myGenerator()</span></pre></td></tr><tr><td class="code"><pre><span class="line">it.next(10) &#x2F;&#x2F; 1  第一个next 传参数没有任何意义</span></pre></td></tr><tr><td class="code"><pre><span class="line">it.next(20) &#x2F;&#x2F; 20</span></pre></td></tr><tr><td class="code"><pre><span class="line">it.next(30) &#x2F;&#x2F; 30</span></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS函数的prototype</title>
    <url>/2020/07/15/javascript/javascript09/</url>
    <content><![CDATA[<h3 id="函数的prototype属性"><a href="#函数的prototype属性" class="headerlink" title="函数的prototype属性"></a>函数的prototype属性</h3><ul>
<li>每个函数都有一个prototype属性，它默认指向一个Object空对象（即称为：原型对象）</li>
<li>原型对象中有一个属性 constructor，它指向函数对象<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(Date.prototype.constructor &#x3D;&#x3D;&#x3D; Date) &#x2F;&#x2F; true</span></pre></td></tr></table></figure></li>
<li>给原型对象添加属性（一般都是方法），函数所有的实例对象自动拥有构造函数原型中的属性（方法）</li>
</ul>
<h3 id="显式原型与隐式原型"><a href="#显式原型与隐式原型" class="headerlink" title="显式原型与隐式原型"></a>显式原型与隐式原型</h3><ul>
<li><p>每个函数function都有一个 <code>prototype</code>，即显式原型（属性）</p>
</li>
<li><p>每个实例对象都有一个<code>__proto__</code>，可称为隐式原型（属性）</p>
</li>
<li><p>对象的隐式原型的值为其对应构造函数的显示原型的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Fn()&#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">var fn &#x3D; new Fn()</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(Fn.prototype &#x3D;&#x3D;&#x3D; fn.__proto__) &#x2F;&#x2F; true</span></pre></td></tr></table></figure></li>
<li><p>函数的<code>prototype</code>属性：在定义函数时自动添加，默认值是一个空的Object对象</p>
</li>
<li><p>对象的<code>__proto__</code>属性：创建对象时自动添加，默认值是构造函数的prototype属性值</p>
</li>
</ul>
<h3 id="prototype-图解"><a href="#prototype-图解" class="headerlink" title="prototype 图解"></a>prototype 图解</h3>  <img src="/images/2020/prototype2.jpg">]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6 Class 类</title>
    <url>/2020/10/18/javascript/javascript06/</url>
    <content><![CDATA[<h3 id="语法糖解析"><a href="#语法糖解析" class="headerlink" title="语法糖解析"></a>语法糖解析</h3><ol>
<li><p>ES6 class 在实例化对象时 会调用 类 里面的 <strong>constructor()</strong> 方法，逐行执行constructor内代码 并默认返回<strong>实例</strong>。所以ES6 constructor内部的this指向实例</p>
</li>
<li><p>ES6 内部的方法 就是原型对象上的方法</p>
<blockquote>
<p>ES6 的class </p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Kind &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  constructor(obj) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.a &#x3D; obj.a</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  say() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(&#39;say :&gt;&gt; &#39;, this.a);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">let objA &#x3D; new Kind(&#123; a: 1 &#125;)</span></pre></td></tr></table></figure>
</li>
<li><p>ES5 中 构造函数实例化对象时 是调用构造函数本身，并默认返回实例对象。所以 构造函数内部的this指向实例。不过在ES5中我们都清楚 原型上的constructor === 构造函数</p>
<blockquote>
<p>等同于 ES5</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Kind(obj) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  this.a &#x3D; obj.a</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Kind.prototype.say &#x3D; function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(&#39;say :&gt;&gt; &#39;, this.a);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">let objA &#x3D; new Kind(&#123; a: 1 &#125;)</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="getter和setter"><a href="#getter和setter" class="headerlink" title="getter和setter"></a>getter和setter</h3><ol>
<li><p>在class的内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，对该属性数据劫持。</p>
<blockquote>
<p>ES6 get set</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Kind &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  constructor(obj) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this._a &#x3D; obj.a</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  get a() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(&#39;正在取值a...&#39;, this._a);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return this._a</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  set a(newVal) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(&#39;正在存值a...&#39;, newVal);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this._a &#x3D; newVal</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">let objA &#x3D; new Kind(&#123; a: 1 &#125;)</span></pre></td></tr></table></figure>
</li>
<li><p>ES5 一般使用 Object.defineProperty 对数据进行劫持 this 指向当前对象</p>
<blockquote>
<p>ES5 Object.defineProperty</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const objA &#x3D; &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Object.defineProperty(objA, &quot;a&quot;, &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  get() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(&quot;正在取值a...&quot;, this._a);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return this._a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  set(newVal) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(&quot;正在存值a...&quot;, newVal);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this._a &#x3D; newVal;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h3><ol>
<li><p>ES6 class 提供了 static 静态属性关键字，只属性或方法允许在class使用。</p>
</li>
<li><p>ES6 class 未提供 public ,但默认都为 public</p>
</li>
<li><p>ES6 class 未提供 private(私有属性)</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Kind &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  static b &#x3D; 12</span></pre></td></tr><tr><td class="code"><pre><span class="line">  constructor(obj) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.a &#x3D; obj.a</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(&#39;Kind.b :&gt;&gt; &#39;, Kind.b);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  say() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(&#39;Kind.b :&gt;&gt; &#39;, Kind.b);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Kind.eat()</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  static eat() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(&#39;eat...&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">let objA &#x3D; new Kind(&#123; a: 1 &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">objA.say()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; objA.eat() error</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="继承-extends"><a href="#继承-extends" class="headerlink" title="继承 extends"></a>继承 extends</h3><ol>
<li><p>当 class 存在继承时，实例化对象时。首先也是会调用本身的<strong>constructor()</strong>，但是不同的是 执行本身的constructor()方法时，必须通过<strong>super()</strong>方法 将父类的<strong>constructor()</strong> 也调用一次，最后默认返回实例。所以 继承时 父类 与 子类 中的 this 指向实例。</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Son extends Parent &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 等同于</span></pre></td></tr><tr><td class="code"><pre><span class="line">class Son extends Parent &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  constructor(...args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    super(...args);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
</li>
<li><p>当super以<strong>函数</strong>的形式调用时，执行父函数的构造函数<strong>constructor()</strong>。当super以<strong>对象</strong>的形式使用时指向父类。</p>
</li>
<li><p>父类的静态方法，也会被子类继承。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS闭包</title>
    <url>/2020/07/17/javascript/javascript07/</url>
    <content><![CDATA[<h3 id="闭包理解"><a href="#闭包理解" class="headerlink" title="闭包理解"></a>闭包理解</h3><ol>
<li>如何产生闭包<ul>
<li>当一个嵌套的内部（子）函数引用的嵌套的外部（父）函数时，就产生了闭包</li>
</ul>
</li>
<li>闭包是什么<ul>
<li>使用chrome调试产看（对应父函数的执行上下文==&gt;Local 中 子函数的 <code>Closure</code>里面 ）</li>
<li>理解一：闭包是嵌套的内部函数</li>
<li>理解二：包含被引用变量（函数）的对象</li>
<li>闭包存在于嵌套的内部函数中</li>
<li>执行函数定义就会产生闭包（不用调用函数内部）</li>
</ul>
</li>
<li>产生闭包的条件<ul>
<li>函数嵌套</li>
<li>内部函数引用了外部函数的数据（变量/函数）</li>
</ul>
</li>
</ol>
<h3 id="常见闭包"><a href="#常见闭包" class="headerlink" title="常见闭包"></a>常见闭包</h3><ol>
<li><p>将函数作为另一个函数的返回值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  function fn1() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    var a &#x3D; 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    function fn2() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      a++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      console.log(&#39;a :&gt;&gt; &#39;, a);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return fn2</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  var f &#x3D; fn1()</span></pre></td></tr><tr><td class="code"><pre><span class="line">  f()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;</span></pre></td></tr></table></figure>
</li>
<li><p>将函数实参传递给另一个函数调用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  function showDelay(msg, time) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      alert(msg)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;, time);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  showDelay(&#39;hello world&#39;, 2000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="闭包作用"><a href="#闭包作用" class="headerlink" title="闭包作用"></a>闭包作用</h3><ol>
<li>使用函数内部的变量在函数执行完后，仍然存活在内存中（延长了局部变量的生命周期）<ul>
<li>函数执行完成后，函数内部声明的局部变量一般是不存在的，只有存在于闭包中的变量才可能存在</li>
</ul>
</li>
<li>让函数外部可以操作（读写）到函数内部的数据（变量/函数）<ul>
<li>函数外部<code>不能</code>直接访问函数内部的变量，但是可以通过闭包去操作它</li>
</ul>
</li>
</ol>
<h3 id="闭包的生命周期"><a href="#闭包的生命周期" class="headerlink" title="闭包的生命周期"></a>闭包的生命周期</h3><ol>
<li>产生：在嵌套内部函数定义执行完成时就产生了（不是在调用时）<ul>
<li>父函数调用时执行上下文对象创建完成时</li>
</ul>
</li>
<li>死亡：在嵌套的内部函数成为垃圾对象时<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  function fn1() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 此时闭包就已经产生了（函数提升，内部函数对象已经创建了）</span></pre></td></tr><tr><td class="code"><pre><span class="line">    var a &#x3D; 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    function fn2() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      a++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      console.log(&#39;a :&gt;&gt; &#39;, a);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return fn2</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  var f &#x3D; fn1()</span></pre></td></tr><tr><td class="code"><pre><span class="line">  f()</span></pre></td></tr><tr><td class="code"><pre><span class="line">  f &#x3D; null &#x2F;&#x2F; 闭包死亡（包含闭包的函数对象成为垃圾对象）</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="闭包应用定义Js模块"><a href="#闭包应用定义Js模块" class="headerlink" title="闭包应用定义Js模块"></a>闭包应用定义Js模块</h3>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myModule () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 私有数据</span></pre></td></tr><tr><td class="code"><pre><span class="line">  var msg &#x3D; &#39;Hello World&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 操作数据的函数</span></pre></td></tr><tr><td class="code"><pre><span class="line">  function doToUpper () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(&#39;doToUpper() :&gt;&gt; &#39;, msg.toUpperCase())</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  function doToLower () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(&#39;doToLower() :&gt;&gt; &#39;, msg.toLowerCase())</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 向外暴露的对象（给外部使用的方法）</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    doToUpper,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    doToLower</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;myModules.js&quot;&gt;&lt;&#x2F;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  var module &#x3D; myModule()</span></pre></td></tr><tr><td class="code"><pre><span class="line">  module.doToUpper()</span></pre></td></tr><tr><td class="code"><pre><span class="line">  module.doToLower()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;</span></pre></td></tr></table></figure>
<hr>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(function (window) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 私有数据</span></pre></td></tr><tr><td class="code"><pre><span class="line">  var msg &#x3D; &#39;Hello World&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 操作数据的函数</span></pre></td></tr><tr><td class="code"><pre><span class="line">  function doToUpper () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(&#39;doToUpper() :&gt;&gt; &#39;, msg.toUpperCase())</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  function doToLower () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(&#39;doToLower() :&gt;&gt; &#39;, msg.toLowerCase())</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 向外暴露的对象（给外部使用的方法）</span></pre></td></tr><tr><td class="code"><pre><span class="line">  window.myModule &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    doToUpper,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    doToLower</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)(window)</span></pre></td></tr></table></figure>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;myModules.js&quot;&gt;&lt;&#x2F;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  myModule.doToUpper()</span></pre></td></tr><tr><td class="code"><pre><span class="line">  myModule.doToLower()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;</span></pre></td></tr></table></figure>

<h3 id="闭包缺点"><a href="#闭包缺点" class="headerlink" title="闭包缺点"></a>闭包缺点</h3><ol>
<li>缺点<ul>
<li>函数执行完成后，函数内的局部变量没有释放，占用内存时间会变长</li>
<li>容易造成内存泄漏</li>
</ul>
</li>
<li>解决<ul>
<li>及时释放内存</li>
</ul>
</li>
</ol>
<h3 id="未解之谜"><a href="#未解之谜" class="headerlink" title="未解之谜"></a>未解之谜</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  function fun(n, o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(o);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      fun: function (m) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return fun(m, n)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  var a &#x3D; fun(0); a.fun(1); a.fun(2); a.fun(3); &#x2F;&#x2F; undefined,?,?,?</span></pre></td></tr><tr><td class="code"><pre><span class="line">  var b &#x3D; fun(0).fun(1).fun(2).fun(3); &#x2F;&#x2F; undefined,?,?,?</span></pre></td></tr><tr><td class="code"><pre><span class="line">  var c &#x3D; fun(0).fun(1); c.fun(2); c.fun(3) &#x2F;&#x2F; undefined,?,?,？ </span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;</span></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS防抖与节流</title>
    <url>/2020/08/03/javascript/javascript08/</url>
    <content><![CDATA[<h3 id="防抖（debounce）"><a href="#防抖（debounce）" class="headerlink" title="防抖（debounce）"></a>防抖（debounce）</h3><blockquote>
<p>触发事件后在<code>规定时间</code>内函数只能执行一次，如果在<code>规定时间</code>内又触发了事件，则重新计算函数执行时间</p>
</blockquote>
<ol>
<li>简单实现 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function debounce(func, wait) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    let timeout;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        let context &#x3D; this;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        let args &#x3D; arguments;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (timeout) clearTimeout(timeout);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        timeout &#x3D; setTimeout(() &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            func.apply(context, args)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;, wait);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>原理<ol>
<li>利用闭包延长 timeout 变量生命周期</li>
<li>除了第一次函数执行外，每执行一次函数，先关闭定时器，再重新打开定时器</li>
</ol>
</li>
</ol>
<h3 id="节流（throttle）"><a href="#节流（throttle）" class="headerlink" title="节流（throttle）"></a>节流（throttle）</h3><blockquote>
<p>事件连续触发时，在规定时间内只执行一次函数</p>
</blockquote>
<ol>
<li>简单实现 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function throttle(func, wait) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    let timeout;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return function() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        let context &#x3D; this;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        let args &#x3D; arguments;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (!timeout) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            timeout &#x3D; setTimeout(() &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                timeout &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                func.apply(context, args)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;, wait)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>原理<ol>
<li>利用闭包延长 timeout 变量生命周期</li>
<li>执行函数时，当 timeout 存在值时不执行定时器，定时器执行完成时将 timeout 置为 null</li>
</ol>
</li>
</ol>
<h3 id="项目中使用"><a href="#项目中使用" class="headerlink" title="项目中使用"></a>项目中使用</h3><ul>
<li>函数防抖和节流<ol>
<li>在公共方法中（如 utils.js 中），加入函数防抖和节流方法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">* @desc 函数防抖</span></pre></td></tr><tr><td class="code"><pre><span class="line">* @param func 函数</span></pre></td></tr><tr><td class="code"><pre><span class="line">* @param wait 延迟执行毫秒数</span></pre></td></tr><tr><td class="code"><pre><span class="line">* @param immediate true 表立即执行，false 表非立即执行</span></pre></td></tr><tr><td class="code"><pre><span class="line">*&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export function _debounce(func, wait, immediate) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    let timeout;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        let context &#x3D; this;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        let args &#x3D; arguments;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (timeout) clearTimeout(timeout);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (immediate) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            var callNow &#x3D; !timeout;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            timeout &#x3D; setTimeout(() &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                timeout &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;, wait);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (callNow) func.apply(context, args);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            timeout &#x3D; setTimeout(function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                func.apply(context, args);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;, wait);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">* @desc 函数节流</span></pre></td></tr><tr><td class="code"><pre><span class="line">* @param func 函数</span></pre></td></tr><tr><td class="code"><pre><span class="line">* @param wait 延迟执行毫秒数</span></pre></td></tr><tr><td class="code"><pre><span class="line">* @param type 1 表时间戳版，2 表定时器版</span></pre></td></tr><tr><td class="code"><pre><span class="line">*&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export function _throttle(func, wait, type &#x3D; 1) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (type &#x3D;&#x3D;&#x3D; 1) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        var previous &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; else if (type &#x3D;&#x3D;&#x3D; 2) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        var timeout;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        let context &#x3D; this;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        let args &#x3D; arguments;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (type &#x3D;&#x3D;&#x3D; 1) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            let now &#x3D; Date.now();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (now - previous &gt; wait) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                func.apply(context, args);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                previous &#x3D; now;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else if (type &#x3D;&#x3D;&#x3D; 2) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (!timeout) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                timeout &#x3D; setTimeout(() &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                timeout &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                func.apply(context, args);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;, wait);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>在需要使用的组件引用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; _debounce, _throttle &#125; from &quot;@&#x2F;libs&#x2F;utils.js&quot;</span></pre></td></tr></table></figure></li>
<li>在 methods 中使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    debounceClick: _debounce(function() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; todo </span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;, 200),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    throttleClick: _throttle(function() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; todo </span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;, 2000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


</li>
</ol>
</li>
</ul>
<ul>
<li>直接使用npm 安装（指令）<ul>
<li><a href="https://www.npmjs.com/package/v-debounce-throttle" target="_blank" rel="noopener">https://www.npmjs.com/package/v-debounce-throttle</a></li>
</ul>
</li>
</ul>
<ul>
<li>项目中直接引入文件手动 use 安装 （指令）<ul>
<li><a href="https://github.com/wangxiaoqi0123/vue-cli3-vant/tree/master/src/directive/debounce-throttle" target="_blank" rel="noopener">https://github.com/wangxiaoqi0123/vue-cli3-vant/tree/master/src/directive/debounce-throttle</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS零碎知识</title>
    <url>/2020/07/17/javascript/javascript10/</url>
    <content><![CDATA[<ol>
<li>内存溢出<ul>
<li>一种程序运行的错误</li>
<li>当程序运行需要的内存超过了剩余内存时，就抛出内存溢出的错误</li>
</ul>
</li>
<li>内存泄漏<ul>
<li>占用内存没有及时释放</li>
<li>内存泄漏多了就容易导致内存溢出</li>
<li>常见的内存泄漏<br>（1）意外的全局变量<br>（2）没有及时清理的计时器或回调函数<br>（3）闭包 </li>
</ul>
</li>
<li>this<ul>
<li>this 是什么<br>（1）任何函数本质上都是通过某个对象来调用的（如果没有直接指定就是window）<br>（2）所有函数内部都有一个变量<code>this</code>它的值就是调用当前函数的对象</li>
<li>如何确定this的值<br>（1）全局函数调用时，this 为 window<br>（2）以方法的形式调用时，this就为调用方法的那个对象<br>（3）以构造函数的形式实例对象，则构造函数中的this为实例出的对象<br>（4）以call() apply() 方法调用时，this为这两个方法指定的对象（传入的第一个参数）<br>（5）响应函数的this就是绑定事件的那个元素，给谁绑定事件this就为谁<br>（6）ES6中箭头函数没有this，他的this为当前作用域中的this</li>
</ul>
</li>
<li>事件冒泡<ul>
<li>所谓的事件冒泡值得就是事件的向上传到，当后代元素上的事件被触发时，其祖先元素上的相同事件也会触发</li>
<li>取消事件冒泡的方法<br>（1）event.cancelBubble = true<br>（2）event.stopPropagation()</li>
</ul>
</li>
<li>事件委派<ul>
<li>将事件统一绑定给元素共同的祖先元素，这样当后代元素上的事件触发时，会一直冒泡到祖先元素，从而通过祖先元素的响应函数来处理事件</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS数据变量内存</title>
    <url>/2020/07/14/javascript/javascript12/</url>
    <content><![CDATA[<h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><ul>
<li>内存中存储的特定信息，本质上是一些0101…</li>
</ul>
<h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><ul>
<li>可储存数据的空间</li>
<li>一小块内存的两个部分<ul>
<li>内部存储的数据</li>
<li>地址值</li>
</ul>
</li>
<li>内存分类<ul>
<li>栈: 全局变量/局部变量</li>
<li>堆: 对象</li>
</ul>
</li>
</ul>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul>
<li>可变化的量，由变量名和变量值组成</li>
<li>每个变量都对应一小块内存，变量名用来查找对应的内存，变量值就是内存中保存的数据</li>
</ul>
<h3 id="内存数据变量三者之间的关系"><a href="#内存数据变量三者之间的关系" class="headerlink" title="内存数据变量三者之间的关系"></a>内存数据变量三者之间的关系</h3><ul>
<li>内存用来存储数据的空间</li>
<li>变量是内存的标识 </li>
</ul>
<h3 id="变量创建-赋值-读取-过程"><a href="#变量创建-赋值-读取-过程" class="headerlink" title="变量创建 赋值 读取 过程"></a>变量创建 赋值 读取 过程</h3>  <img src="/images/2020/prototype1.jpg" />

<ol>
<li><p><strong>创建</strong>  当声明 var obj = { name: ‘Tom’ }，相当于在<code>堆内存</code>开辟一块变量<code>内存地址：0x123</code>存储<code>数据name:&#39;Tom&#39;</code>，同时在<code>栈内存</code>开辟一块变量，<code>变量名obj</code>存储数据为<code>堆内存的引用地址：0x123</code></p>
</li>
<li><p><strong>赋值</strong>  当声明 var a = obj，相当于在<code>栈内存</code>开辟一块变量，<code>变量名a</code>，同时将栈内存中变量obj的数据拷贝一份，赋值给变量a</p>
</li>
<li><p><strong>读取</strong>  当执行console.log(obj)，会根据栈内存中obj变量保存的<code>堆内存的引用地址：0x123</code>找到对应的堆内存，将其保存的值(数据)输出</p>
</li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS事件执行机制</title>
    <url>/2020/07/18/javascript/javascript11/</url>
    <content><![CDATA[<h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><ul>
<li>进程<ul>
<li>程序的独立执行，它占有一片独有的内存空间</li>
</ul>
</li>
<li>线程<ul>
<li>是进程的一个独立执行单元</li>
<li>是程序执行的一个完整流程</li>
<li>是CPU的最小的调度单元</li>
</ul>
</li>
<li>相关<ul>
<li>应用程序必须运行在<code>某个进程的某个线程上</code></li>
<li>一个进程中至少有一个运行的线程：主线程，进程启动后自动创建</li>
<li>一个进程中也可以同时运行多个线程，程序多线程运行</li>
<li>一个进程内的数据可以供其中的多个线程直接共享</li>
<li>多个进程之间的数据是不能直接共享的</li>
<li>线程池（thread pool）: 保存多个线程对象的容器，实现线程对象的反复利用</li>
</ul>
</li>
</ul>
<h3 id="浏览器内核模块（主要）"><a href="#浏览器内核模块（主要）" class="headerlink" title="浏览器内核模块（主要）"></a>浏览器内核模块（主要）</h3><ul>
<li>主线程<ul>
<li>js引擎模块：负责js程序的编译与运行</li>
<li>html,css文档解析模块：负责页面文本的解析</li>
<li>DOM/CSS模块：负责dom/css在内存中的相关处理</li>
<li>布局和渲染模块：负责页面的布局和效果的绘制（内存中的对象）</li>
</ul>
</li>
<li>分线程<ul>
<li>定时器模块：负责定时器的管理</li>
<li>事件响应模块：负责事件的管理</li>
<li>网路请求模块：扶着ajax请求</li>
</ul>
</li>
</ul>
<h3 id="事件循环-（event-loop）"><a href="#事件循环-（event-loop）" class="headerlink" title="事件循环 （event loop）"></a>事件循环 （event loop）</h3><ol>
<li>执行初始化代码，将事件回调函数交给对应的管理模块</li>
<li>当事件发生时，管理模块会将回调函数及其数据添加到回调队列中</li>
<li>只有当初始化代码执行完后（可能需要一定时间），才会遍历读取回调队列中的回调函数执行</li>
</ol>
  <img src="/images/2020/eventloop.jpg">

<h3 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h3><blockquote>
<p><code>宿主环境</code>提供的叫宏任务，由<code>语言标准</code>提供的叫微任务</p>
</blockquote>
<ul>
<li>宿主环境<ul>
<li>简单来说就是能使javascript完美运行的环境，只要能完美运行javascript的载体就是javascript的宿主环境。目前我们常见的两种宿主环境有浏览器和node</li>
</ul>
</li>
</ul>
<ul>
<li>语言标准<ul>
<li>JavaScript是一种编程语言，JavaScript由ECMA制定标准，称之为ECMAScript,所以由语言标准提供的就是微任务，比如ES6提供的promise.then Object.observe 等。</li>
</ul>
</li>
</ul>
<ul>
<li>事件循环中宏任务与微任务<ul>
<li>JS异步机制，遇到宏任务，先执行宏任务，将宏任务放入event queue，然后再执行微任务，将微任务放入eventqueue，但是，<code>这两个queue不是一个queue</code>。<strong>当你往外拿的时候先从微任务里拿这个回调函数，然后再从宏任务的queue拿宏任务的回调函数</strong></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS原型链</title>
    <url>/2020/07/15/javascript/javascript14/</url>
    <content><![CDATA[<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><ul>
<li>访问一个对象属性时<ul>
<li>先在自身属性中查找，找到返回</li>
<li>如果没有，再沿着<code>__proto__</code>这条链先上查找，找到返回</li>
<li>如果最终没找到，返回undefined</li>
</ul>
</li>
<li>作用：查找对象的属性（方法）</li>
</ul>
<h3 id="构造函数-原型-实例对象的关系（图解）"><a href="#构造函数-原型-实例对象的关系（图解）" class="headerlink" title="构造函数/原型/实例对象的关系（图解）"></a>构造函数/原型/实例对象的关系（图解）</h3>  <img src="/images/2020/prototype3.jpg">

<ul>
<li>声明构造函数时 会添加prototype属性 它的值是一个Object空对象</li>
<li><code>Object空对象</code>为<code>构造函数Object</code>的实例，它的隐式原型<code>__prpto__</code>指向构造函数的显式原型</li>
<li><code>构造函数Object</code>的原型对象的隐式原型<code>__proto__</code>的值为 <code>null</code></li>
</ul>
<h3 id="Function-Object-自定义构造函数（图解）"><a href="#Function-Object-自定义构造函数（图解）" class="headerlink" title="Function/Object/自定义构造函数（图解）"></a>Function/Object/自定义构造函数（图解）</h3>  <img src="/images/2020/prototype4.jpg">

<ul>
<li><code>构造函数Function</code>通过new自身创建，他的显式原型与隐式原型是同一个对象</li>
<li><code>构造函数Object</code>与<code>自定义构造函数</code>通过new Function 创建，属于<code>构造函数Function</code>的实例，它们的<code>隐式原型__proto__</code>指向<code>构造函数Function</code>的显式原型对象。</li>
</ul>
<h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><ol>
<li>定义父类型构造函数</li>
<li>给父类型的原型添加方法</li>
<li>定义子类型构造函数</li>
<li><span style="color:#f7c544">把父类型的实例对象赋值给子类型的原型</span></li>
<li>给子类型的原型对象上添加方法</li>
<li>实例子类型对象：可以调用父类型的方法</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 父类型</span></pre></td></tr><tr><td class="code"><pre><span class="line">  function Supper() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.supProp &#x3D; &#39;Supper property&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Supper.prototype.showSupperProp &#x3D; function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(&#39;this.supProp :&gt;&gt; &#39;, this.supProp);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 子类型</span></pre></td></tr><tr><td class="code"><pre><span class="line">  function Sub() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.subProp &#x3D; &#39;Sub property&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 子类型的原型对象为父类型的一个实例对象</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Sub.prototype &#x3D; new Supper()</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 让子类型的原型的constructor指向子类型</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Sub.prototype.constructor &#x3D; Sub</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Sub.prototype.showSubProp &#x3D; function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(&#39;this.subProp :&gt;&gt; &#39;, this.subProp);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  var sub &#x3D; new Sub()</span></pre></td></tr><tr><td class="code"><pre><span class="line">  sub.showSupperProp() &#x2F;&#x2F; Supper property</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS作用域</title>
    <url>/2020/07/16/javascript/javascript16/</url>
    <content><![CDATA[<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ul>
<li>理解<ol>
<li>一个代码段所在的区域</li>
<li>它是<code>静态</code>的，<strong>在编写代码时就确定了</strong></li>
</ol>
</li>
<li>分类<ol>
<li>全局作用域</li>
<li>函数作用域</li>
</ol>
</li>
<li>作用<ol>
<li>隔离变量，不同的作用域下同名变量不会有冲突</li>
</ol>
</li>
</ul>
<h3 id="作用域与执行上下文"><a href="#作用域与执行上下文" class="headerlink" title="作用域与执行上下文"></a>作用域与执行上下文</h3><ul>
<li><p>区别一</p>
<ol>
<li>全局作用域之外，每个函数都会创建自己的作用域。作用域在函数定义时就已经确定了，而不是在函数调用时</li>
<li>全局执行上下文是在全局作用域确定之后，js代码马上执行之前创建</li>
<li>函数执行上下文是在函数调用时，函数体代码执行之前创建</li>
</ol>
</li>
<li><p>区别二</p>
<ol>
<li>作用域是静态的，只要函数定义好了就一直存在，且不会再变化</li>
<li>执行上下文是动态的，调用函数时创建，函数调用结束时就会自动释放</li>
</ol>
</li>
<li><p>联系</p>
<ol>
<li>执行上下文是从属于于所在的作用域</li>
<li>全局上下文环境==&gt;全局作用域</li>
<li>函数上下文环境==&gt;对应的函数使用域</li>
</ol>
<img src="/images/2020/actionscope.jpg">

</li>
</ul>
<h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><ul>
<li>理解<ol>
<li>多个上下级关系的作用域形成的链，它的方向是从下向上的（从内到外）</li>
<li>查找变量时就是沿着作用域链来查找的</li>
</ol>
</li>
<li>查找一个变量的查找规则<ol>
<li>在当前作用域下的执行上下文中查找对应的属性，如果有直接返回，否则进入2</li>
<li>在上一级作用域的执行上下文中查找对应的属性，如果有直接返回，否则进入3</li>
<li>再次执行2的相同操作，直到全局作用域，如果还找不到就抛出异常</li>
</ol>
</li>
</ul>
<h3 id="思考-10-还是-20-？"><a href="#思考-10-还是-20-？" class="headerlink" title="思考 10 还是 20 ？"></a>思考 10 还是 20 ？</h3>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x &#x3D; 10;</span></pre></td></tr><tr><td class="code"><pre><span class="line">function fn() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(&#39;x :&gt;&gt; &#39;, x); &#x2F;&#x2F; 10 还是 20 ？</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">function show(f) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  var x &#x3D; 20</span></pre></td></tr><tr><td class="code"><pre><span class="line">  f()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">show(fn);</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS数据类型</title>
    <url>/2020/07/14/javascript/javascript13/</url>
    <content><![CDATA[<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul>
<li>基本（值）类型<ul>
<li>String: 任意字符串</li>
<li>Number: 任意数字</li>
<li>Boolean: true/false</li>
<li>undefined: undefined</li>
<li>null: null</li>
</ul>
</li>
<li>对象（引用）类型<ul>
<li>Object: 任意对象</li>
<li>Function: 一种特别的对象（可书写逻辑，可执行）</li>
<li>Array: 一种特别的对象（数值下标，内部数据是有序的）</li>
</ul>
</li>
</ul>
<h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><ul>
<li>typeof: 返回数据类型的字符串表达<ul>
<li>可以判断: undefined / 数值 / 字符串 / 布尔值 / function</li>
<li>不能判断: null与object  object与array</li>
</ul>
</li>
<li>instanceof<ul>
<li>判断对象的具体类型（实例 instanceof 构造函数）true/false</li>
</ul>
</li>
<li>===<ul>
<li>可以判断：undefined , null</li>
</ul>
</li>
</ul>
<h3 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h3><ul>
<li>undefined代表变量定义未赋值</li>
<li>null定义并赋值了，只是值为null</li>
</ul>
<h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><ul>
<li>初始赋值，表明将要赋值为对象</li>
<li>让对象成为垃圾对象（被垃圾回收机制回收）</li>
</ul>
<h3 id="严格区分变量类型与数据类型"><a href="#严格区分变量类型与数据类型" class="headerlink" title="严格区分变量类型与数据类型"></a>严格区分变量类型与数据类型</h3><ul>
<li>数据的类型<ul>
<li>基本类型</li>
<li>对象类型</li>
</ul>
</li>
<li>变量的类型（变量内存值得类型）<ul>
<li>基本类型: 保存的为基本类型的数据</li>
<li>引用类型: 保存的为内存引用地址</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise 介绍</title>
    <url>/2020/07/12/javascript/javascript17/</url>
    <content><![CDATA[<h3 id="1-Promise是一个构造函数"><a href="#1-Promise是一个构造函数" class="headerlink" title="1. Promise是一个构造函数"></a>1. Promise是一个构造函数</h3><ul>
<li><p>一般把 一个功能 (或者请求) 封装成 一个函数 并将promise对象返回</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function runAsync()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return new Promise(function(resolve, reject)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F;做一些异步操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">      setTimeout(function()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          console.log(&#39;执行完成&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">          resolve(&#39;随便什么数据&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;, 2000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">runAsync()</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-Promise的链式操作"><a href="#2-Promise的链式操作" class="headerlink" title="2. Promise的链式操作"></a>2. Promise的链式操作</h3><ul>
<li><p>封装好的函数返 return promise对象</p>
</li>
<li><p>then 的回调函数中 要把下一个要执行的函数 return</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">runAsync1()</span></pre></td></tr><tr><td class="code"><pre><span class="line">.then(function(data)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(data);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return runAsync2();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">.then(function(data)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(data);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return runAsync3();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">.then(function(data)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(data);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-then-与-catch"><a href="#3-then-与-catch" class="headerlink" title="3. then 与 catch"></a>3. then 与 catch</h3><ul>
<li>then 回调的是<code>resolve</code>回调函数</li>
<li>catch 回调的是<code>reject</code>回调函数 , 且 一旦链式操作里面有 错误 则后面的then不会执行,直接执行catch</li>
</ul>
<h3 id="4-resolve-与-reject"><a href="#4-resolve-与-reject" class="headerlink" title="4. resolve 与 reject"></a>4. resolve 与 reject</h3><ul>
<li><p>Promise.resolve方法返回一个promise的实例，状态为 resolve</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Promise.resolve(&#39;success&#39;);&#x2F;&#x2F;等价于如下</span></pre></td></tr><tr><td class="code"><pre><span class="line">new Promise((resolve)&#x3D;&gt;&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    resolve(&#39;success&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
</li>
<li><p>Promise.reject方法与 resolve 唯一的不同是，返回的 promise 对象的状态为 rejected</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Promise.reject(&#39;error&#39;);&#x2F;&#x2F;等价于如下</span></pre></td></tr><tr><td class="code"><pre><span class="line">new Promise((resolve, reject)&#x3D;&gt;&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    reject(&#39;error&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="5-all"><a href="#5-all" class="headerlink" title="5. all"></a>5. all</h3><ul>
<li><p>所有的promise函数并行执行最后结果一起返回到 results</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Promise</span></pre></td></tr><tr><td class="code"><pre><span class="line">.all([runAsync1(), runAsync2(), runAsync3()])</span></pre></td></tr><tr><td class="code"><pre><span class="line">.then(function(results)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(results);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="6-race"><a href="#6-race" class="headerlink" title="6. race"></a>6. race</h3><ul>
<li><p>谁先执行完成就返回谁的数据,其他的都不用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Promise</span></pre></td></tr><tr><td class="code"><pre><span class="line">.race([runAsync1(), runAsync2(), runAsync3()])</span></pre></td></tr><tr><td class="code"><pre><span class="line">.then(function(results)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(results);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 常用命令</title>
    <url>/2025/01/14/docker/01/</url>
    <content><![CDATA[<p>1.查看容器列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker ps -a #列出目所有容器</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker ps -aq #列出所有容器ID</span></pre></td></tr></table></figure>
<p>2.查看镜像列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker images -q #列出所有镜像ID</span></pre></td></tr></table></figure>
<p>3.下载镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull [镜像名]</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker pull [镜像名:版本号]</span></pre></td></tr></table></figure>
<p>4.删除镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rmi 镜像名</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker rmi $(docker images -q) #删除所有镜像</span></pre></td></tr></table></figure>
<p>5.删除容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rm [容器名]</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker rm -f [容器名] #强制删除</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker rm $(docker ps -aq) #删除所有容器</span></pre></td></tr></table></figure>
<p>6.运行容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run [镜像名]</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker run -d [镜像名] #后台运行</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker run -v [宿主机目录]:[容器目录] [镜像名] #挂载目录</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker run -p [本地端口]:[容器端口] [镜像名] #将容器端口映射到宿主机</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker run -e [环境变量名]&#x3D;[值] [镜像名] #设置环境变量</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker run -d -p [本地端口]:[容器端口] --name [容器名] [镜像名] #后台运行，并指定容器名和端口映射</span></pre></td></tr></table></figure>
<p>7.启动容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker start [容器名]</span></pre></td></tr></table></figure>
<p>8.重启容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker restart [容器名]</span></pre></td></tr></table></figure>
<p>9.停止容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker stop [容器名]</span></pre></td></tr></table></figure>
<p>10.进入容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it [容器名] &#x2F;bin&#x2F;bash</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker exec -it [容器名] bash</span></pre></td></tr></table></figure>
<p>11.查看容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker inspect [容器名]</span></pre></td></tr></table></figure>
<p>12.查看容器日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker logs [容器名]</span></pre></td></tr></table></figure>
<p>13.提交容器为镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker commit -m &quot;提交信息&quot; [容器名] [镜像名:版本号]</span></pre></td></tr></table></figure>
<p>14.保存镜像为文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker save -o [文件名.tar] [镜像名:版本号]</span></pre></td></tr></table></figure>
<p>15.加载镜像文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker load -i [文件名.tar]</span></pre></td></tr></table></figure>
<p>16.登陆镜像仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker login [仓库地址]</span></pre></td></tr></table></figure>
<p>17.镜像设置标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker tag [镜像名:版本号] [仓库地址&#x2F;镜像名:版本号]</span></pre></td></tr></table></figure>
<p>18.推送镜像到仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker push [镜像名:版本号]</span></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker compose</title>
    <url>/2025/01/18/docker/03/</url>
    <content><![CDATA[<p>Compose 用于定义和管理多容器 Docker 应用，通过 YAML 配置文件描述应用的服务、网络和卷，简化多个容器的部署和管理。<br>参考: <a href="https://docs.docker.com/reference/compose-file/" target="_blank" rel="noopener">https://docs.docker.com/reference/compose-file/</a></p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义Docker Compose项目的名称</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">myblog</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 定义服务</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment"># MySQL服务配置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">mysql:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 容器名称</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span>  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 镜像</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0</span>  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 端口映射</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">ports:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="bullet">-</span> <span class="string">"3306:3306"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 环境变量</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">environment:</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=root</span>  <span class="comment"># 设置MySQL root用户的密码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=wordpress</span>  <span class="comment"># 创建名为wordpress的数据库</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 数据卷挂载</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">volumes:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="bullet">-</span> <span class="string">mysql-data:/var/lib/mysql</span>  </span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="bullet">-</span> <span class="string">/app/mysql/conf:/etc/mysql/conf.d</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 重启策略配置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">restart:</span> <span class="string">always</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 网络配置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">networks:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="bullet">-</span> <span class="string">blog</span>  <span class="comment"># 指定容器加入的网络</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment"># WordPress服务配置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">wordpress:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">image:</span> <span class="string">wordpress</span>  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">ports:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="bullet">-</span> <span class="string">"8080:80"</span>  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">environment:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">WORDPRESS_DB_HOST:</span> <span class="string">mysql</span>  <span class="comment"># 指定WordPress连接的数据库主机名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">WORDPRESS_DB_USER:</span> <span class="string">root</span>  <span class="comment"># 数据库用户名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">WORDPRESS_DB_PASSWORD:</span> <span class="string">root</span>  <span class="comment"># 数据库密码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">WORDPRESS_DB_NAME:</span> <span class="string">wordpress</span>  <span class="comment"># 数据库名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">volumes:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="bullet">-</span> <span class="string">wordpress:/var/www/html</span>  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">restart:</span> <span class="string">always</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">networks:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="bullet">-</span> <span class="string">blog</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 服务依赖</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">depends_on:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span>  <span class="comment"># 指定WordPress服务依赖于MySQL服务</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 定义数据卷</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">mysql-data:</span>  <span class="comment"># MySQL数据卷</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">wordpress:</span>  <span class="comment"># WordPress数据卷</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 定义网络</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">networks:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">blog:</span>  <span class="comment"># 自定义网络，用于服务间的通信</span></span></pre></td></tr></table></figure>
<p>services服务中配置了网络，需要在networks中定义网络。<br>services服务中配置了volumes，需要在volumes中定义卷。</p>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p>1.服务上线</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker compose up -d # 默认使用compose.yml文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker compose -f [自定义yaml] up -d</span></pre></td></tr></table></figure>
<p>2.服务下线</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker compose down</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker compose -f [自定义yaml] down</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker compose down -v # 删除所有卷</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker compose down -rmi all # 删除所有镜像</span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>JS执行上下文</title>
    <url>/2020/07/16/javascript/javascript15/</url>
    <content><![CDATA[<h3 id="全局执行上下文"><a href="#全局执行上下文" class="headerlink" title="全局执行上下文"></a>全局执行上下文</h3><ul>
<li>在执行全局代码前将window确定为全局执行上下文</li>
<li>对全局数据进行预处理<ol>
<li>var定义的全局变量==&gt;undefined，添加为window的属性</li>
<li>function声明的全局函数==&gt;赋值（fun），添加为window的方法</li>
<li>this==&gt;赋值（window）</li>
</ol>
</li>
<li>开始执行全局代码</li>
</ul>
<h3 id="函数执行上下文"><a href="#函数执行上下文" class="headerlink" title="函数执行上下文"></a>函数执行上下文</h3><ul>
<li>在调用函数之前，准备执行函数体之前，创建对应的函数执行上下文对象（虚拟的，存在于栈内存中）</li>
<li>对局部参数进行预处理<ol>
<li>形参变量==&gt;赋值（实参）==&gt;添加为执行上下文的属性</li>
<li>arrguments(伪数组)==&gt;赋值（实参列表），添加为执行上下文的属性</li>
<li>var定义的局部变量==&gt;undefined，添加为执行上下文的属性</li>
<li>function声明的函数==&gt;赋值（fun），添加为执行上下文的方法</li>
<li>this==&gt;赋值（调用函数的对象）</li>
</ol>
</li>
<li>开始执行函数体代码</li>
</ul>
<h3 id="执行上下文栈"><a href="#执行上下文栈" class="headerlink" title="执行上下文栈"></a>执行上下文栈</h3><ol>
<li><p>在全局代码执行前，JS引擎就会创建一个栈来存储管理所有的执行上下文对象</p>
</li>
<li><p>在全局执行上下文（window）确定后，将其添加到栈中（压栈）</p>
</li>
<li><p>在函数执行上下文创建后，将其添加到栈中（压栈）</p>
</li>
<li><p>在当前函数执行完后，将栈顶的对象移除（出栈）</p>
</li>
<li><p>当所有代码执行完成后，栈中只剩下window</p>
<img src="/images/2020/context.jpg">
</li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 基础</title>
    <url>/2025/01/17/docker/02/</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><img src="/images/2025/docker-001.png" style="height:260px; margin-left:0" >
1.docker是一个容器技术，可以将应用打包成镜像，然后运行在容器中。
<br />
2.每个容器都是相互隔离的完整操作系统环境，互不影响。
<br />
3.通过端口映射、自定义网络，可以实现容器与容器与外部的通信。
<br />
4.通过卷挂载，可以实现容器内数据持久化。

<h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><p>1.目录挂载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-v &#x2F;app&#x2F;nghtml:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</span></pre></td></tr></table></figure>
<p>将本机的/app/nghtml目录挂载到容器内的/usr/share/nginx/html目录。</p>
<p>2.卷挂载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-v ngconfig:&#x2F;etc&#x2F;nginx</span></pre></td></tr></table></figure>
<p>将本机的ngconfig卷挂载到容器内的/etc/nginx目录，如果卷不存在，则会自动创建，卷里默认数据是挂载容器目录的数据。<br>卷默认在本机的/var/lib/docker/volumes目录下。<br>修改卷数据，修改容器内数据，卷数据都会同步更新。</p>
<p>3.卷相关命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker volume create [卷名] # 创建卷</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker volume ls # 列出卷</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker volume inspect [卷名] # 查看卷信息</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker volume rm [卷名] # 删除卷</span></pre></td></tr></table></figure>

<h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>1.自定义网络<br>docker会为每个容器分配唯一id，使用容器ip+容器端口可以实现互相访问。<br>但是ip由于各种原因可能会变化，自定义网络后容器名就是域名。</p>
<p>创建自定义网络</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker network create mynet</span></pre></td></tr></table></figure>

<p>将容器连接到自定义网络</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -p 80:80 --name app1 --network mynet nginx</span></pre></td></tr></table></figure>


<p>2.网络相关命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--nextwork [网络名] # 指定容器连接的网络</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker network create [网络名] # 创建自定义网络</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker network rm [网络名] # 删除自定义网络</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker network ls # 列出网络</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker network connect [网络名] [容器id或名称] # 将容器连接到自定义网络</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker network disconnect [网络名] [容器id或名称] # 将容器从自定义网络断开</span></pre></td></tr></table></figure>

<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>1.环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-e MYSQL_ROOT_PASSWORD&#x3D;123456</span></pre></td></tr></table></figure>
<p>将本机的MYSQL_ROOT_PASSWORD环境变量传递给容器。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -p 3306:3306 --name mysql --network mynet \</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt; -v &#x2F;app&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d \</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt; -v &#x2F;app&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql \</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt; -e MYSQL_ROOT_PASSWORD&#x3D;123456 \</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt; mysql</span></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP模块</title>
    <url>/2021/01/18/node/node01/</url>
    <content><![CDATA[<h3 id="创建一个服务"><a href="#创建一个服务" class="headerlink" title="创建一个服务"></a>创建一个服务</h3><ul>
<li><p>node 提供http核心模块用于创建服务</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">http.createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  response.writeHead(<span class="number">200</span>, &#123; <span class="string">"content-type"</span>: <span class="string">"text/plain"</span> &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  response.write(<span class="string">"hello node"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  response.end()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;).listen(<span class="number">5000</span>)</span></pre></td></tr></table></figure>
<blockquote>
<p>引入http模块，使用http.createServer函数创建一个服务<br>调用response.writeHead设置响应头，第一个参数表示HTTP的响应状态，第二个参数“content-type”表示响应给客户端的类容类型<br>调用response.write方法，写入传递给客户端的内容<br>最后调用response.end表示此次请求已处理完成</p>
</blockquote>
<blockquote>
<p>.listen(port) 第一个参数表示监听端口号，第二个参数是监听开启后立即触发的回调函数</p>
</blockquote>
</li>
<li><p>http.Server实例化创建一个服务，等同于上述代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = <span class="keyword">new</span> http.Server()</span></pre></td></tr><tr><td class="code"><pre><span class="line">server.on(<span class="string">'request'</span>, (request, response) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  response.writeHead(<span class="number">200</span>, &#123; <span class="string">"content-type"</span>: <span class="string">"text/plain"</span> &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  response.write(<span class="string">"hello node"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  response.end()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">server.listen(<span class="number">5000</span>)</span></pre></td></tr></table></figure>
<blockquote>
<p>通过创建一个http.Server对象，然后为其添加request事件监听的方式创建的服务等同于http.cresteServer</p>
</blockquote>
</li>
<li><p>createServer方法中的两个参数<code>request</code>和<code>response</code>分别代表了<code>请求对象</code>和<code>响应对象</code>。</p>
<blockquote>
<p> <strong>request</strong> 是 <strong>http.IncomingMessage</strong> 的实例<br> <strong>response</strong> 是 <strong>http.ServerResponse</strong> 的实例</p>
</blockquote>
<ul>
<li>http.IncomingMessage是HTTP请求的信息，包含三个事件<ul>
<li><strong>data</strong>: 当<code>请求体</code>数据到来时，该事件被触发，该事件提供一个chunk，表示接受的数据。如果该事件没有被监听，则请求体会被抛弃。<strong>且该事件可能会被调用多次</strong>。</li>
<li><strong>end</strong>: 当<code>请求体</code>数据传递完毕时，该事件会被触发，此后不会再有数据</li>
<li><strong>close</strong>: 用户当前请求结束时，该事件被触发，不同于end，如果用户强制终止传输，也是close<br/>
<br/></li>
</ul>
</li>
<li>http.ServerResponse是返回给客户端的信息，决定了用户最终看到的内容，他有三个重要的函数，用于返回响应头、响应内容以及结束请求<ul>
<li><strong>response.writeHead(statusCode,[headers])</strong>: 向请求的客户端发送响应头，该函数在一个请求中最多调用一次，如果不调用，则会自动生成一个响应头</li>
<li><strong>response.write(data,[encoding])</strong>: 向请求的客户端发送相应的内容，data是一个buffer或者字符串，如果data是字符串，则需要定制编码方式，默认为utf-8。在res.end调用之前可以多次调用。</li>
<li><strong>response.end([data],[encoding])</strong>: 结束响应，告知客户端所有发送已经结束，当所有要返回的内容发送完毕时，该函数必须被调用一次，两个可选参数与response.write()相同。如果不掉用这个函数，客户端将一直处于等待状态。</li>
</ul>
</li>
</ul>
<blockquote>
<p>GET</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (req.method === <span class="string">'GET'</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> query = querystring.parse(req.url.split(<span class="string">'?'</span>)[<span class="number">1</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">    res.end(<span class="built_in">JSON</span>.stringify(query))</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;).listen(<span class="string">'5000'</span>)</span></pre></td></tr></table></figure>
<blockquote>
<p>POST</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (req.method === <span class="string">'POST'</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">let</span> postData = <span class="string">''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    req.on(<span class="string">'data'</span>, chunk =&gt; &#123;postData += chunk.toString()&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    req.on(<span class="string">'end'</span>, () =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">console</span>.log(postData)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      res.end(<span class="string">'hello world!'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;).listen(<span class="string">'5000'</span>)</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="http-client-客户端向服务端发起请求（类似前端ajax、axios）"><a href="#http-client-客户端向服务端发起请求（类似前端ajax、axios）" class="headerlink" title="http client 客户端向服务端发起请求（类似前端ajax、axios）"></a>http client 客户端向服务端发起请求（类似前端ajax、axios）</h3><blockquote>
<p>http模块提供了两个函数 http.request 和 http.get</p>
</blockquote>
<ul>
<li><p>http.request(options,callback)</p>
<ul>
<li>options表示请求参数，常见的参数有host、port（默认80）、method（默认GET）、path（请求相对于根的路径，默认’/‘）、headers（请求头内容）</li>
<li>callback回调函数，需要传递一个参数，为http.ClientResponse的实例</li>
<li>http.request返回一个http.ClientRequest的实例</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> options = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  hostname: <span class="string">"127.0.0.1"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  path: <span class="string">"/?user=zhangsan&amp;age=18"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  port: <span class="number">5000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> req = http.request(options, (res) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  res.setEncoding(<span class="string">"utf-8"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">let</span> dataChunk = <span class="string">""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  res.on(<span class="string">"data"</span>, (chunk) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dataChunk += chunk.toString()</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  res.on(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">"dataChunk"</span>, dataChunk);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">"statusCode"</span>, res.statusCode);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">req.on(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(err.message);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">req.end();</span></pre></td></tr></table></figure>
</li>
<li><p>http.get(options,callback)</p>
<ul>
<li>方法是http.request方法的简化版，唯一的区别是http.get自动将请求方法设为了GET请求，同时不需要手动调用req.end()。注意http.request方法时没有调用end方法，服务器将不会收到信息。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>Dockerfile</title>
    <url>/2025/01/19/docker/04/</url>
    <content><![CDATA[<p>Dockerfile 用于自动化构建 Docker 镜像，定义镜像的环境、依赖和行为。<br>参考: <a href="https://docs.docker.com/reference/dockerfile/" target="_blank" rel="noopener">https://docs.docker.com/reference/dockerfile/</a></p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>前端vue，后端nodejs的websocket服务，打包成docker镜像示例</p>
<blockquote>
<p>前端镜像打包</p>
</blockquote>
<img src="/images/2025/docker-002.png" style="height:260px; margin-left:0" >

<p>1.本地vue项目构建打包出dist文件<br>2.编写nginx/nginx.conf文件<br>3.编写Dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置环境</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx:<span class="number">1.14</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 复制应用代码到容器内</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="bash"> ./dist /usr/share/nginx/html</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 复制nginx配置到容器内</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="bash"> ./nginx/nginx.conf /etc/nginx/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 端口暴露</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span></pre></td></tr></table></figure>
<p>4.将dist、nginx.conf、Dockerfile推送到服务器 /app/websocket/client 目录下<br>5.docker build -t websocketclient:v1.0 . (构建镜像，注意最后的点号表示当前目录为构建上下文)</p>
<blockquote>
<p>后端镜像打包</p>
</blockquote>
<img src="/images/2025/docker-003.png" style="height:260px; margin-left:0" >

<p>1.编写Dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置环境</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">16.16</span>.<span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 设置工作目录</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 复制应用代码到容器内</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="bash"> . /app</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 端口暴露</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 容器启动时运行应用</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"npm"</span>,<span class="string">"run"</span>,<span class="string">"dev"</span>]</span></span></pre></td></tr></table></figure>
<p>2.将Dockerfile、index.js工程文件推送到服务器 /app/websocket/server 目录下<br>3.docker build -t websocketserver:v1.0 . (构建镜像，注意最后的点号表示当前目录为构建上下文)</p>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker build -t [镜像名]:[版本号] .</span></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 安装</title>
    <url>/2025/01/20/docker/05/</url>
    <content><![CDATA[<p>1.移除旧版本docker</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker docker-client \</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       docker-client-latest \</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       docker-common \</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       docker-latest \</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       docker-latest-logrotate \</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       docker-logrotate \</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       docker-engine</span></pre></td></tr></table></figure>
<p>2.配置docker yum源。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span></pre></td></tr></table></figure>
<p>3.安装 最新 docker</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span></pre></td></tr></table></figure>
<p>4.启动docker</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable docker # 开机启动</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span></pre></td></tr></table></figure>
<p>5.配置加速</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;etc&#x2F;docker</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;registry-mirrors&quot;: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;https:&#x2F;&#x2F;mirror.ccs.tencentyun.com&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;https:&#x2F;&#x2F;docker.m.daocloud.io&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">EOF</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart docker</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Node操作MySQL</title>
    <url>/2021/01/21/node/node04/</url>
    <content><![CDATA[<h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><ul>
<li>安装 mysql<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install mysql -S</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><ul>
<li>连接数据库<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 创建连接对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> db = mysql.createConnection(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  host: <span class="string">'localhost'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  user: <span class="string">'root'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  password: <span class="string">'xxxxxxx'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  port: <span class="string">'3306'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  database: <span class="string">'myblog'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 开始连接</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">db.connect()</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 执行sql语句</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sql = <span class="string">`INSERT INTO blogs (title,content,createtime,author) VALUES ('标题C','内容C',1611216592611,'wangwu');`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">db.query(sql, (err, result) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (err) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.error(err)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'result :&gt;&gt; '</span>, result);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 结束连接</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">db.end()</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="mysql项目配置"><a href="#mysql项目配置" class="headerlink" title="mysql项目配置"></a>mysql项目配置</h3><ul>
<li>创建数据库连接配置<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 环境变量</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> env = process.env.NODE_ENV</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 配置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> MYSQL_CONF</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 本地开发</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (env === <span class="string">'dev'</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  MYSQL_CONF = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    host: <span class="string">'localhost'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    user: <span class="string">'root'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    password: <span class="string">'xxxxxxx'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    port: <span class="string">'3306'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    database: <span class="string">'myblog'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 开发配置 todo</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (env === <span class="string">'prod'</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  MYSQL_CONF = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    host: <span class="string">'localhost'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    user: <span class="string">'root'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    password: <span class="string">'xxxxxxx'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    port: <span class="string">'3306'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    database: <span class="string">'myblog'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  MYSQL_CONF</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>连接数据库配置<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; MYSQL_CONF &#125; = <span class="built_in">require</span>(<span class="string">'../conf/db'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 创建连接对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> db = mysql.createConnection(MYSQL_CONF)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 开始连接</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">db.connect()</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 创建统一执行 sql 的函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exec</span>(<span class="params">sql</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    db.query(sql, (err, result) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span> (err) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        reject(err)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      resolve(result)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> p</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  exec</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
暴露执行sql的函数exec并返回结果</li>
</ul>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>Node操作文件</title>
    <url>/2021/01/30/node/node02/</url>
    <content><![CDATA[<h3 id="path-模块"><a href="#path-模块" class="headerlink" title="path 模块"></a>path 模块</h3><ul>
<li><p>path.resolve([…paths]) 把片段路径解析为绝对路径</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dataFilePath = path.resolve(__dirname, <span class="string">'./src/data.txt'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(dataFilePath); <span class="comment">// /Users/wangxiaoqi/Documents/learn/node/path-test/src/data.txt</span></span></pre></td></tr></table></figure>
<p><strong>__dirname</strong> 总是指向被执行 js 文件的绝对路径</p>
</li>
<li><p>path.join([…paths]) 使用平台(mac linux windows)特定的分隔符把全部给定的 path 片段连接到一起，并规范化生成的路径。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> joinPathName = path.join(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c/d'</span>, <span class="string">'e'</span>, <span class="string">'..'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(joinPathName); <span class="comment">// /a/b/c/d</span></span></pre></td></tr></table></figure>
<p><strong>..</strong> 表示上一层</p>
</li>
<li><p>path.relative(from, to) 从 from 到 to 的相对路径</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> aRelativeCPath = path.relative(<span class="string">'/path-test/a'</span>, <span class="string">'/path-test/b/c'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(aRelativeCPath); <span class="comment">// ../b/c</span></span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="fs-模块"><a href="#fs-模块" class="headerlink" title="fs 模块"></a>fs 模块</h3><ul>
<li><p>fs.readFile() 读取文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dataFilePath = path.resolve(__dirname, <span class="string">'data.txt'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 读取文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">fs.readFile(dataFilePath, (err, data) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (err) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.error(err);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 文件是一个buffer二进制利流</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'data :&gt;&gt; '</span>, data.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
</li>
<li><p>fs.writeFile() 写入文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dataFilePath = path.resolve(__dirname, <span class="string">'data.txt'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> content = <span class="string">'写入data.txt文件内的内容\n'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> opt = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  flag: <span class="string">'a'</span> <span class="comment">// a 追加写入；w 覆盖写入(默认)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">fs.writeFile(dataFilePath, content, opt, (err) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (err) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.error(err);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
</li>
<li><p>fs.existsSync() 判断文件是否存在（同步操作）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dataFilePath = path.resolve(__dirname, <span class="string">'data.txt'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 判断文件是否存在</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isDataFile = fs.existsSync(dataFilePath)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(isDataFile);</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h3><blockquote>
<p>Stream 是一个抽象接口，Node 中有很多对象实现了这个接口。例如，对http 服务器发起请求的request 对象就是一个 Stream，还有stdout（标准输出）。<br>管道提供了一个输出流到输入流的机制。通常我们用于从一个流中获取数据并将数据传递到另外一个流中。</p>
</blockquote>
  <img src="/images/2021/stream_1.png">

<ul>
<li>nodejs stream 标准输入输出<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">process.stdin.pipe(process.stdout)</span></pre></td></tr></table></figure></li>
<li>request发起请求<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (req.method === <span class="string">'POST'</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    req.pipe(res)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">server.listen(<span class="number">5000</span>)</span></pre></td></tr></table></figure></li>
<li>stream 流的方式对文件拷贝<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dataFilePath = path.resolve(__dirname,<span class="string">'./data.txt'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dataBakFilePath = path.resolve(__dirname,<span class="string">'./data-bak.txt'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 创建读取流对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> readStream = fs.createReadStream(dataFilePath)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 创建写入流对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> writeStream = fs.createWriteStream(dataBakFilePath)</span></pre></td></tr><tr><td class="code"><pre><span class="line">readStream.pipe(writeStream)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// data 监听每次流的写入</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">readStream.on(<span class="string">'data'</span>,(chunk) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(chunk.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// end 监听流的结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">readStream.on(<span class="string">'end'</span>,() =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'copy done'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure></li>
<li>stream 操作网络IO<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dataFilePath = path.resolve(__dirname,<span class="string">'./data.txt'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 创建读取流对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> readStream = fs.createReadStream(dataFilePath)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (req.method === <span class="string">'GET'</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    readStream.pipe(res)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">server.listen(<span class="number">5000</span>)</span></pre></td></tr></table></figure></li>
<li>流的方式读文件<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 创建读取流</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> stream = fs.createReadStream(path)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 绑定data事件接受数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">stream.on(<span class="string">"data"</span>, (data) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(data)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 3. 绑定end事件表示读取完毕</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">stream.on(<span class="string">"end"</span>, () =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">"数据流读取完毕"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 4. 绑定error错误事件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">stream.on(<span class="string">"error"</span>, (err) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">throw</span> err</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure></li>
<li>流的方式写文件<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 创建写入流</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> opt = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  flags: <span class="string">'a'</span> <span class="comment">// a 追加写入；w 覆盖写入(默认)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stream = fs.createWriteStream(path, opt)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 写入数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">stream.write(<span class="string">"数据1"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 3. 写入完毕后结束写入流</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">stream.end()</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 4. 数据写入完成事件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">stream.on(<span class="string">"finish"</span>, () =&gt; &#123; &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 5. 绑定error出错事件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">stream.on(<span class="string">"error"</span>, (err) =&gt; &#123; &#125;)</span></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>Node操作redis</title>
    <url>/2021/01/27/node/node05/</url>
    <content><![CDATA[<h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><ul>
<li>redis 安装<ul>
<li>windows <a href="https://www.runoob.com/redis/redis-install.html" target="_blank" rel="noopener">https://www.runoob.com/redis/redis-install.html</a></li>
<li>Mac 使用 brew install redis</li>
</ul>
</li>
<li>node模块 安装<ul>
<li>npm install redis -S</li>
</ul>
</li>
</ul>
<h3 id="redis常用命令"><a href="#redis常用命令" class="headerlink" title="redis常用命令"></a>redis常用命令</h3><ul>
<li>连接操作命令<ul>
<li>redis-server （本地开启服务-mac）</li>
<li>redis-cli shutdown (停止服务)</li>
<li>redis-cli （本地连接命令-mac）</li>
<li>quit （关闭当前连接）</li>
</ul>
</li>
<li>操作命令<ul>
<li>keys * （查看数据列表）</li>
<li>get key （查看当前key的值）</li>
<li>set key value （insert 数据）</li>
<li>del key （删除数据）</li>
</ul>
</li>
</ul>
<h3 id="node对接redis"><a href="#node对接redis" class="headerlink" title="node对接redis"></a>node对接redis</h3><ul>
<li>node redis 模块<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> redis = <span class="built_in">require</span>(<span class="string">'redis'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 创建客户端</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> redisClient = redis.createClient(<span class="number">6379</span>, <span class="string">'127.0.0.1'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">redisClient.on(<span class="string">'error'</span>, err =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.error(err);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 插入数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">redisClient.set(<span class="string">'myname'</span>, <span class="string">'zhangsan'</span>, redis.print)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 获取数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">redisClient.get(<span class="string">'myname'</span>, (err, val) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (err) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.error(err);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 退出客户端连接</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  redisClient.quit()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure></li>
<li>redis 配置项抽离<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 环境变量</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> env = process.env.NODE_ENV</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 配置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> REDIS_CONF</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 本地开发</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (env === <span class="string">'dev'</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  REDIS_CONF = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    port: <span class="number">6379</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    host: <span class="string">'127.0.0.1'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 开发配置 todo</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (env === <span class="string">'prod'</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  REDIS_CONF = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    port: <span class="number">6379</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    host: <span class="string">'127.0.0.1'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  REDIS_CONF</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>redis 工具函数封装<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> redis = <span class="built_in">require</span>(<span class="string">'redis'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; REDIS_CONF &#125; = <span class="built_in">require</span>(<span class="string">'../conf/db'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 创建redis链接</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> redisClient = redis.createClient(REDIS_CONF.port, REDIS_CONF.host)</span></pre></td></tr><tr><td class="code"><pre><span class="line">redisClient.on(<span class="string">'error'</span>, err =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.error(err)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 存值函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params">key, val</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> val === <span class="string">'object'</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    val = <span class="built_in">JSON</span>.stringify(val)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  redisClient.set(key, val, redis.print)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 取值函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">key</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    redisClient.get(key, (err, val) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// 异常处理</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span> (err) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        reject(err)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// val 为 null 情况</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span> (val === <span class="literal">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        resolve(<span class="literal">null</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// val 为json字符串 以及 普通字符串情况</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        resolve(<span class="built_in">JSON</span>.parse(val))</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        resolve(val)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> p</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">set</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">get</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>Node操作mongodb</title>
    <url>/2021/02/23/node/node03/</url>
    <content><![CDATA[<h3 id="mongodb模块"><a href="#mongodb模块" class="headerlink" title="mongodb模块"></a>mongodb模块</h3><ul>
<li>安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install mongodb --save</span></pre></td></tr></table></figure></li>
<li>mongodb模块的文档<ul>
<li><a href="https://www.npmjs.com/package/mongodb" target="_blank" rel="noopener">https://www.npmjs.com/package/mongodb</a></li>
</ul>
</li>
</ul>
<ul>
<li>node操作mongodb<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> MongoClient = <span class="built_in">require</span>(<span class="string">'mongodb'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// mongodb数据库地址</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">'mongodb://localhost:27017'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 数据库</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dbName = <span class="string">'mydb'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 建立连接</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">MongoClient.connect(</span></pre></td></tr><tr><td class="code"><pre><span class="line">  url,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    useUnifiedTopology: <span class="literal">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  (err, client) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 异常处理</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (err) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">console</span>.log(<span class="string">'mongodb connet error'</span>, err)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 没有报错，连接成功</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">"mongodb connect success"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 切换到数据库，相当于 use dbName</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> db = client.db(dbName)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 连接集合</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> myCollection = db.collection(<span class="string">'myCollection'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 查询数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    myCollection.find().toArray(<span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span> (err) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">console</span>.error(<span class="string">'myCollection find error'</span>, err)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// 输出查询结果</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">console</span>.log(result);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// 关闭连接</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      client.close()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">)</span></pre></td></tr></table></figure>
  连接mongodb，切换到数据库，找到对应集合，进行增删改查。具体参考mongodb模块的文档 <a href="https://www.npmjs.com/package/mongodb" target="_blank" rel="noopener">https://www.npmjs.com/package/mongodb</a></li>
</ul>
<h3 id="mongoose模块"><a href="#mongoose模块" class="headerlink" title="mongoose模块"></a>mongoose模块</h3><ul>
<li>安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install mongoose --save</span></pre></td></tr></table></figure></li>
<li>mongoose模块文档<ul>
<li><a href="https://www.npmjs.com/package/mongoose" target="_blank" rel="noopener">https://www.npmjs.com/package/mongoose</a>  （npm）</li>
<li><a href="https://mongoosejs.com/" target="_blank" rel="noopener">https://mongoosejs.com/</a>  （官方文档）<br/>
<br/></li>
</ul>
</li>
<li>mongoose连接数据库<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">'mongodb://localhost:27017'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dbName = <span class="string">'myblog'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 执行连接</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">mongoose.connect(<span class="string">`<span class="subst">$&#123;url&#125;</span>/<span class="subst">$&#123;dbName&#125;</span>`</span>, &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  useNewUrlParser: <span class="literal">true</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  useUnifiedTopology: <span class="literal">true</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  useFindAndModify: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  useCreateIndex: <span class="literal">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 创建连接对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> db = mongoose.connection</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 异常监听处理</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">db.on(<span class="string">'error'</span>, (err) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.error(err)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 连接成功</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// db.on('open', () =&gt; &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//   console.log('mongoose connect success')</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// &#125;)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = mongoose</span></pre></td></tr></table></figure>
<strong>mongoose.connect(‘mongodb://username:password@host:port/database’);</strong> 如果数据库开启校验 需要账户密码时 使用此规则对数据库进行连接。<br/>
<br/></li>
<li>Schema定义数据格式的规范，以Model规范Collection<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'../db'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 用 Schema 定义数据规范</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> UserSchema = mongoose.Schema(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  username: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    type: <span class="built_in">String</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    required: <span class="literal">true</span>,<span class="comment">// 必须</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    unique: <span class="literal">true</span> <span class="comment">// 唯一，不能重复</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  password: <span class="built_in">String</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  realname: <span class="built_in">String</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// Model 对应 collection</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">'user'</span>, UserSchema) <span class="comment">// user可不用加s</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = User</span></pre></td></tr></table></figure>
Schame文档 <a href="https://mongoosejs.com/docs/api/schema.html" target="_blank" rel="noopener">https://mongoosejs.com/docs/api/schema.html</a><br/>
<br/></li>
<li>Model 对文档进行增删改查<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> User = <span class="built_in">require</span>(<span class="string">'../modules/User'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// insert一条数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// User.create(&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//   username: 'zhangsan',</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//   password: '123',</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//   realname: '张三'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// &#125;, (err, result) =&gt; &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//   if (err) &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//     console.error('User create error', err)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//     return</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//   &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//   console.log('result :&gt;&gt; ', result);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// &#125;)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 或者</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// User.create(&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//   username: 'lisi',</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//   password: '123',</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//   realname: '李四'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// &#125;).then((result) =&gt; &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//   console.log('result', result)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// &#125;)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// delete一条数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// User.deleteOne(&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//   username: 'aaa',</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//   password: '123'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// &#125;).then((result) =&gt; &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//   console.log('result', result)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// &#125;)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// update 一条数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// User.updateOne(</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//   &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//     username: 'lisi',</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//     password: '123'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//   &#125;,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//   &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//     $set: &#123; realname: '历史' &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//   &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// ).then((result) =&gt; &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//   console.log('result', result)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// &#125;)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// find 数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">User.find()</span></pre></td></tr><tr><td class="code"><pre><span class="line">  .sort(&#123; <span class="attr">_id</span>: <span class="number">-1</span> &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  .skip(<span class="number">1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  .limit(<span class="number">1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  .then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'result'</span>, result)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr></table></figure>
model 操作集合 即可以通过回调函数的形式读取操作结果，也可以通过Promise.then读取结果<br>model 的api 文档具体请查看 <a href="https://mongoosejs.com/docs/api/model.html" target="_blank" rel="noopener">https://mongoosejs.com/docs/api/model.html</a></li>
</ul>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>Node脚本</title>
    <url>/2022/07/05/node/node06/</url>
    <content><![CDATA[<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><ol>
<li>npm init -y 初始化一个包</li>
</ol>
<ol start="2">
<li>package.json 中配置 bin<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;bin&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;test-cli&quot;: &quot;test-cli.js&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


</li>
</ol>
<ol start="3">
<li>创建脚本文件，指定执行脚本的解释器<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env node</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 或者</span></pre></td></tr><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;local&#x2F;bin&#x2F;node</span></pre></td></tr></table></figure>
type node</li>
</ol>
<ol start="4">
<li>npm link <img src="/images/2022/node_script_01.png">
把当前包软链接到全局的node_modules下<br>
脚本也会同样软连接到全局bin下
npm unlink 移除软链接


</li>
</ol>
<ol start="5">
<li>全局执行脚本<br>test-cli</li>
</ol>
<h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><h5 id="commander"><a href="#commander" class="headerlink" title="commander"></a>commander</h5><blockquote>
<p>命令行界面工具</p>
</blockquote>
<ul>
<li>安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i commander</span></pre></td></tr></table></figure></li>
<li>option<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const &#123; program &#125; &#x3D; require(&#39;commander&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">program</span></pre></td></tr><tr><td class="code"><pre><span class="line">  .option(&#39;-s, --separator &lt;char&gt;&#39;, &#39;这是一个描述信息&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  .action((options) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(&#39;options&#39;, options) &#x2F;&#x2F; options &#x3D;&#x3D;&#x3D; program.opts()</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">program.parse() &#x2F;&#x2F; 在控制台打印信息</span></pre></td></tr><tr><td class="code"><pre><span class="line">const options &#x3D; program.opts()</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(&#39;options&#39;, options)</span></pre></td></tr></table></figure></li>
<li>command<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">program</span></pre></td></tr><tr><td class="code"><pre><span class="line">.command(&#39;clone &lt;source&gt; [destination]&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">.description(&#39;这是一个描述信息&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">.action((source, destination) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(&#39;source, destination&#39;, source, destination)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">program.parse()</span></pre></td></tr><tr><td class="code"><pre><span class="line">const options &#x3D; program.opts()</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(&#39;options&#39;, options)</span></pre></td></tr></table></figure></li>
<li>async<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">program</span></pre></td></tr><tr><td class="code"><pre><span class="line">  .command(&#39;create &lt;project-name&gt;&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  .description(&#39;这是一个描述信息&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  .action((source) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      console.log(&#39;source&#39;, source)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;, 2000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">program.parseAsync()</span></pre></td></tr></table></figure></li>
<li>文档地址<br><a href="https://www.npmjs.com/package/commander" target="_blank" rel="noopener">https://www.npmjs.com/package/commander</a><br><a href="https://github.com/tj/commander.js/blob/HEAD/Readme_zh-CN.md" target="_blank" rel="noopener">https://github.com/tj/commander.js/blob/HEAD/Readme_zh-CN.md</a></li>
</ul>
<h5 id="inquirer"><a href="#inquirer" class="headerlink" title="inquirer"></a>inquirer</h5><blockquote>
<p>交互式命令行工具</p>
</blockquote>
<ul>
<li><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i inquirer</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const inquirer &#x3D; require(&#39;inquirer&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">let prompt &#x3D; [</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    type: &#39;input&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    name: &#39;version&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    message: &#39;version&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    default: &#39;1.0.0&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    type: &#39;confirm&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    name: &#39;confirm&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    message: &#39;Are you handsome?&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    default: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    type: &#39;checkbox&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    name: &#39;checkbox&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    choices: [&#39;选项一&#39;, &#39;选项二&#39;],</span></pre></td></tr><tr><td class="code"><pre><span class="line">    default: [&#39;选项一&#39;],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; ....</span></pre></td></tr><tr><td class="code"><pre><span class="line">]</span></pre></td></tr><tr><td class="code"><pre><span class="line">inquirer.prompt(prompt).then((params) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(&#39;params&#39;, params)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
<p>type 提示的类型。默认值input, 可选input, number, confirm, list, rawlist, expand, checkbox, password, editor。<br>name 键（变量名）<br>message 提示信息<br>default 默认值<br>choices 展示的列表<br>…</p>
</li>
<li><p>文档地址<br><a href="https://github.com/SBoudrias/Inquirer.js#readme" target="_blank" rel="noopener">https://github.com/SBoudrias/Inquirer.js#readme</a><br><a href="https://juejin.cn/post/6844903480700698638" target="_blank" rel="noopener">https://juejin.cn/post/6844903480700698638</a></p>
</li>
</ul>
<h5 id="fs-extra"><a href="#fs-extra" class="headerlink" title="fs-extra"></a>fs-extra</h5><blockquote>
<p>文件处理工具</p>
</blockquote>
<ul>
<li><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i fs-extra</span></pre></td></tr></table></figure></li>
<li><p>文件复制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fse.copy(&#39;&#x2F;tmp&#x2F;myfile&#39;, &#39;&#x2F;tmp&#x2F;mynewfile&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">.then(() &#x3D;&gt; console.log(&#39;success!&#39;))</span></pre></td></tr><tr><td class="code"><pre><span class="line">.catch(err &#x3D;&gt; console.error(err))</span></pre></td></tr></table></figure></li>
<li><p>创建文件<br>emptyDir 创建空文件。若文件存在，则删除创建。<br>ensureFile 创建文件，及文件夹。若文件存在，不进行修改。<br>ensureDir 创建文件夹。若文件夹存在，不进行创建。</p>
</li>
<li><p>移动文件<br>move</p>
</li>
<li><p>删除文件<br>remove</p>
</li>
<li><p>文件写入<br>outputFile</p>
</li>
<li><p>文件读取<br>readFile</p>
</li>
<li><p>json写入<br>outputJson</p>
</li>
<li><p>json读取<br>readJson</p>
</li>
<li><p>文档地址<br><a href="https://github.com/jprichardson/node-fs-extra" target="_blank" rel="noopener">https://github.com/jprichardson/node-fs-extra</a><br><a href="https://juejin.cn/post/6844903641594216455" target="_blank" rel="noopener">https://juejin.cn/post/6844903641594216455</a></p>
</li>
</ul>
<h5 id="shelljs"><a href="#shelljs" class="headerlink" title="shelljs"></a>shelljs</h5><blockquote>
<p>命令行工具</p>
</blockquote>
<ul>
<li>安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i shelljs</span></pre></td></tr></table></figure></li>
<li>基本命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 命令行打印信息 &#x3D;&#x3D;&#x3D; console.log</span></pre></td></tr><tr><td class="code"><pre><span class="line">shelljs.echo(&#39;hello world！&#39;)</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 退出当前进程</span></pre></td></tr><tr><td class="code"><pre><span class="line">shelljs.exit(1) &#x2F;&#x2F; 0正常退出，其他异常退出</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; exec同步运行外部工具</span></pre></td></tr><tr><td class="code"><pre><span class="line">if(shelljs.exec(&#39;npm -v&#39;).code !&#x3D;&#x3D; 0)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  shelljs.echo(&#39;npm -v 命令执行错误&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  shelljs.exit(1) &#x2F;&#x2F; 0正常退出，其他异常退出</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 切换文件目录</span></pre></td></tr><tr><td class="code"><pre><span class="line">shelljs.cd(&#39;..&#39;)</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 递归删除 -f:强制删除 -r:递归处理</span></pre></td></tr><tr><td class="code"><pre><span class="line">shelljs.rm(&#39;-rf&#39;, &#39;test&#39;)</span></pre></td></tr></table></figure></li>
<li>文档地址<br><a href="https://www.kancloud.cn/outsider/clitool/313191" target="_blank" rel="noopener">https://www.kancloud.cn/outsider/clitool/313191</a></li>
</ul>
<h5 id="chalk"><a href="#chalk" class="headerlink" title="chalk"></a>chalk</h5><blockquote>
<p>命令行样式处理工具</p>
</blockquote>
<ul>
<li><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 4版本为require 5版本为import</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm i chalk@4.1.1</span></pre></td></tr></table></figure></li>
<li><p>字体颜色</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const chalk &#x3D; require(&#39;chalk&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 内置颜色</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(chalk.blue(&#39;---- Hello Chalk ----&#39;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 自定义颜色</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(chalk.rgb(9, 218, 158).visible(&#39;---- Hello Chalk ----&#39;))</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(chalk.hex(&#39;#09DA9E&#39;).visible(&#39;---- Hello Chalk ----&#39;))</span></pre></td></tr></table></figure></li>
<li><p>字体样式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(chalk.blue.dim(&#39;---- Hello Chalk ----&#39;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(chalk.blue.italic(&#39;---- Hello Chalk ----&#39;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(chalk.blue.underline(&#39;---- Hello Chalk ----&#39;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(chalk.blue.inverse(&#39;---- Hello Chalk ----&#39;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(chalk.blue.hidden(&#39;---- Hello Chalk ----&#39;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(chalk.blue.strikethrough(&#39;---- Hello Chalk ----&#39;));</span></pre></td></tr></table></figure>
<p>bold 加粗字体<br>dim 让字体稍微泛光<br>italic 斜体（powershell上不支持）<br>underline 下划线（git bash上不支持）<br>inverse 翻转背景色和前景色<br>hidden 打印文本，但使其不可见<br>strikethrough 将一条水平线穿过文本的中心（git bash和powershell都不支持）<br>visible 仅当chalk的颜色级别为&gt; 0时打印文本。</p>
</li>
<li><p>背景颜色</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 内置背景颜色</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(chalk.bgGreenBright(&#39;---- Hello Chalk ----&#39;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 自定义背景颜色</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(chalk.bgHex(&#39;#09DA9E&#39;).visible(&#39;---- Hello Chalk ----&#39;))</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(chalk.bgRgb(9, 218, 158).visible(&#39;---- Hello Chalk ----&#39;))</span></pre></td></tr></table></figure></li>
<li><p>模板字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const miles &#x3D; 18;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const calculateFeet &#x3D; miles &#x3D;&gt; miles * 5280;</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(chalk&#96;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  There are &#123;bold 5280 feet&#125; in a mile.</span></pre></td></tr><tr><td class="code"><pre><span class="line">  In &#123;bold $&#123;miles&#125; miles&#125;, there are &#123;green.bold $&#123;calculateFeet(miles)&#125; feet&#125;.</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#96;);</span></pre></td></tr></table></figure>
</li>
<li><p>文档地址<br><a href="https://github.com/chalk/chalk" target="_blank" rel="noopener">https://github.com/chalk/chalk</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>项目环境配置cross-env</title>
    <url>/2020/08/06/configuration/configuration01/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev cross-env</span></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><blockquote>
<p>package.json中配置是环境变量<code>VUE_APP_ENV</code>为 <code>开发: dev</code> / <code>测试：test</code> / <code>正式：prod</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;scripts&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;dev&quot;: &quot;cross-env VUE_APP_ENV&#x3D;dev vue-cli-service serve --open&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;test&quot;: &quot;cross-env VUE_APP_ENV&#x3D;test vue-cli-service serve --open&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;build:test&quot;: &quot;cross-env VUE_APP_ENV&#x3D;test vue-cli-service build&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;build:prod&quot;: &quot;cross-env VUE_APP_ENV&#x3D;prod vue-cli-service build&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<blockquote>
<p>项目中根据环境变量 配置不同的 运行环境 例如：axios 的基础路径 ，项目打包路径 …</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">switch (process.env.VUE_APP_ENV) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    case &quot;dev&quot;:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        BASE_API &#x3D; &quot;&quot;; &#x2F;&#x2F; 开发环境的 接口地址</span></pre></td></tr><tr><td class="code"><pre><span class="line">        break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    case &quot;test&quot;:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        BASE_API &#x3D; &quot;&quot;; &#x2F;&#x2F; 测试环境的接口地址</span></pre></td></tr><tr><td class="code"><pre><span class="line">        break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    case &quot;prod&quot;:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        BASE_API &#x3D; &quot;&quot;; &#x2F;&#x2F; 正式环境接口地址</span></pre></td></tr><tr><td class="code"><pre><span class="line">        break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="cross-env"><a href="#cross-env" class="headerlink" title="cross-env"></a>cross-env</h3><blockquote>
<p>1.它是运行跨平台设置和使用环境变量(Node中的环境变量)的脚本。<br>2.webpack中本身提供<code>NODE_ENV</code>环境变量，分别对应 <code>开发：development</code> / <code>生产：production</code>。但是windows不支持NODE_ENV=development的设置方式，使用cross-env可以做到对windows的兼容。</p>
</blockquote>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端rem适配</title>
    <url>/2020/08/06/configuration/configuration02/</url>
    <content><![CDATA[<h3 id="简单实现rem适配"><a href="#简单实现rem适配" class="headerlink" title="简单实现rem适配"></a>简单实现rem适配</h3><ol>
<li>使用onresize事件，当设备窗口发生变化时，动态设置根节点的font-size</li>
<li>设置尺寸时，以标准设计稿为基础设置，一般以750视口下font-size为100px动态换算当前设备的font-size（750一般为设计稿尺寸）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.onresize &#x3D; function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F;窗口发生改变时 触发事件 用来做响应式</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F;将根节点的fontsize 设置为100px 作为 1rem</span></pre></td></tr><tr><td class="code"><pre><span class="line">    var clientX &#x3D; document.documentElement.clientWidth;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F;750:100 &#x3D; clientX:?</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F;标准设计稿:100px &#x3D; 当前设备宽: ?</span></pre></td></tr><tr><td class="code"><pre><span class="line">    document.documentElement.style.fontSize &#x3D; (clientX &#x2F; 7.5) + &quot;px&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="淘宝适配与网易适配"><a href="#淘宝适配与网易适配" class="headerlink" title="淘宝适配与网易适配"></a>淘宝适配与网易适配</h3><ol>
<li>网易适配: 设计稿宽度是 750px，假定当前设计稿的 1rem = 100px，那么 屏幕宽度：设计稿宽度 = 设备的rem:设计稿假定的rem(100)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">html&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    font-size: calc(100vw&#x2F;7.5);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    font-size: -webkit-calc(100vw&#x2F;7.5);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>淘宝适配: 把设备宽度 100vw 分成 10等份，假设当前设备的rem 等于 其中的一份，那么1rem = 10vw<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 安装</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm i lib-flexible -S</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; main.js 中引入</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#39;lib-flexible&#39;</span></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="lib-flexible与postcss-px2rem-exclude适配方案"><a href="#lib-flexible与postcss-px2rem-exclude适配方案" class="headerlink" title="lib-flexible与postcss-px2rem-exclude适配方案"></a>lib-flexible与postcss-px2rem-exclude适配方案</h3><ol>
<li>设置理想视口：把默认的layout viewport的宽度设为移动设备的屏幕宽度，得到理想视口<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta</span></pre></td></tr><tr><td class="code"><pre><span class="line">    name&#x3D;&quot;viewport&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    content&#x3D;&quot;width&#x3D;device-width,initial-scale&#x3D;1.0,minimum-scale&#x3D;1.0,maximum-scale&#x3D;1.0,user-scalable&#x3D;no,viewport-fit&#x3D;cover&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&gt;</span></pre></td></tr></table></figure></li>
<li>下载安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install lib-flexible postcss-px2rem-exclude --save-dev</span></pre></td></tr></table></figure></li>
<li>mian.js引入 lib-flexible<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 移动端适配</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &quot;lib-flexible&quot;;</span></pre></td></tr></table></figure></li>
<li>创建.postcssrc.js 使用postcss-px2rem-exclude将px转译为rem<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; ctx &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; vant 文件使用 37.5 适配</span></pre></td></tr><tr><td class="code"><pre><span class="line">    const isNormalDpr &#x3D;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;\.css$&#x2F;.test(ctx.file.basename) &amp;&amp; &#x2F;\bvant\b&#x2F;.test(ctx.file.dirname);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        plugins: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            autoprefixer: &#123;&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &quot;postcss-px2rem-exclude&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                remUnit: isNormalDpr ? 37.5 : 75</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>
或者<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plugins: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        autoprefixer: &#123;&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;postcss-px2rem-exclude&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &quot;remUnit&quot;: 75,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            exclude: &#x2F;node_modules&#x2F;i &#x2F;&#x2F; 忽略node_modules文件夹下所有文件的适配</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="postcss-px-to-viewport适配方案"><a href="#postcss-px-to-viewport适配方案" class="headerlink" title="postcss-px-to-viewport适配方案"></a>postcss-px-to-viewport适配方案</h3><ol>
<li>设置理想视口：把默认的layout viewport的宽度设为移动设备的屏幕宽度，得到理想视口<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta</span></pre></td></tr><tr><td class="code"><pre><span class="line">    name&#x3D;&quot;viewport&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    content&#x3D;&quot;width&#x3D;device-width,initial-scale&#x3D;1.0,minimum-scale&#x3D;1.0,maximum-scale&#x3D;1.0,user-scalable&#x3D;no,viewport-fit&#x3D;cover&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&gt;</span></pre></td></tr></table></figure></li>
<li>下载安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i postcss-px-to-viewport -D</span></pre></td></tr></table></figure></li>
<li>创建.postcssrc.js 使用postcss-px-to-viewport将px转译为vw<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plugins: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        autoprefixer: &#123;&#125;, &#x2F;&#x2F; 用来给不同的浏览器自动添加相应前缀，如-webkit-，-moz-等等</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;postcss-px-to-viewport&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &quot;viewportWidth&quot;: 750,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &quot;minPixelValue&quot;: 1,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &quot;mediaQuery&quot;: false,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &quot;selectorBlackList&quot;: [&quot;van&quot;],</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &quot;landscape&quot;: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &quot;landscapeUnit&quot;: &quot;vw&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &quot;landscapeWidth&quot;: 2048 </span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure></li>
<li>查看postcss-px-to-viewport文档<ul>
<li><a href="https://github.com/evrone/postcss-px-to-viewport/blob/master/README_CN.md" target="_blank" rel="noopener">https://github.com/evrone/postcss-px-to-viewport/blob/master/README_CN.md</a></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>vue cli4 项目构建优化配置</title>
    <url>/2020/11/22/configuration/configuration03/</url>
    <content><![CDATA[<h3 id="基本配置模板"><a href="#基本配置模板" class="headerlink" title="基本配置模板"></a>基本配置模板</h3><ol>
<li>vue.config.js基本配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 基本路径</span></pre></td></tr><tr><td class="code"><pre><span class="line">  publicPath: &#39;&#x2F;&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 输出文件目录</span></pre></td></tr><tr><td class="code"><pre><span class="line">  outputDir: &#39;dist&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; eslint-loader 是否在保存的时候检查</span></pre></td></tr><tr><td class="code"><pre><span class="line">  lintOnSave: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; webpack配置</span></pre></td></tr><tr><td class="code"><pre><span class="line">  chainWebpack: () &#x3D;&gt; &#123; &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  configureWebpack: () &#x3D;&gt; &#123; &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 生产环境是否生成 sourceMap 文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F;是否在构建生产包时生成 sourceMap 文件，false将提高构建速度(map文件能看到具体报错位置)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  productionSourceMap: false,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; css相关配置</span></pre></td></tr><tr><td class="code"><pre><span class="line">  css: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 是否使用css分离插件 ExtractTextPlugin css 抽离成单独文件而非直接 style内联样式写法</span></pre></td></tr><tr><td class="code"><pre><span class="line">    extract: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 开启 CSS source maps?</span></pre></td></tr><tr><td class="code"><pre><span class="line">    sourceMap: false,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; css loader 预设器配置项</span></pre></td></tr><tr><td class="code"><pre><span class="line">    loaderOptions: &#123;&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 设置为 false 将所有的 *.(css|scss|sass|less|styl(us)?) 文件视为 CSS Modules 模块</span></pre></td></tr><tr><td class="code"><pre><span class="line">    requireModuleExtension: true</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; webpack-dev-server 相关配置</span></pre></td></tr><tr><td class="code"><pre><span class="line">  devServer: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F;...</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 第三方插件配置</span></pre></td></tr><tr><td class="code"><pre><span class="line">  pluginOptions: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="打包性能优化"><a href="#打包性能优化" class="headerlink" title="打包性能优化"></a>打包性能优化</h3><ol>
<li>使用webpack-bundle-analyzer查看资源树<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chainWebpack: (config) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  if (process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &#39;production&#39;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F;添加分析工具</span></pre></td></tr><tr><td class="code"><pre><span class="line">    config</span></pre></td></tr><tr><td class="code"><pre><span class="line">      .plugin(&#39;webpack-bundle-analyzer&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      .use(require(&#39;webpack-bundle-analyzer&#39;).BundleAnalyzerPlugin)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      .end()</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>去除map文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">productionSourceMap: false</span></pre></td></tr></table></figure></li>
<li>关闭预加载<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chainWebpack: (config) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  if (process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &#39;production&#39;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F;关闭预加载关闭prefetch</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F;vuecli4 默认开启prefetch(预先加载模块)，提前获取用户未来可能会访问的内容在首屏会把这十几个路由文件都下载下来</span></pre></td></tr><tr><td class="code"><pre><span class="line">    config.plugins.delete(&#39;prefetch&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    config.plugins.delete(&#39;preload&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>压缩分割代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chainWebpack: (config) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  if (process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &#39;production&#39;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 压缩代码</span></pre></td></tr><tr><td class="code"><pre><span class="line">    config.optimization.minimize(true)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 分割代码</span></pre></td></tr><tr><td class="code"><pre><span class="line">    config.optimization.splitChunks(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      chunks: &#39;all&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>cdn公用资源<blockquote>
<p>1.忽略打包文件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const externals &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  vue: &#39;Vue&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#39;vue-router&#39;: &#39;VueRouter&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  vuex: &#39;Vuex&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#39;element-ui&#39;: &#39;ELEMENT&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">configureWebpack: (config) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  if (process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &#39;production&#39;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 忽略打包文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">    config.externals &#x3D; externals</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<blockquote>
<p>2.注入cdn资源。资源可以直接使用网上cdn资源，也可以直接下载放在 public 文件夹下 使用相对路径方式引入</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const cdn &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 开发环境</span></pre></td></tr><tr><td class="code"><pre><span class="line">  dev: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    css: [],</span></pre></td></tr><tr><td class="code"><pre><span class="line">    js: []</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 生产环境</span></pre></td></tr><tr><td class="code"><pre><span class="line">  build: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    css: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#39;https:&#x2F;&#x2F;unpkg.com&#x2F;element-ui@2.14.1&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">    js: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#39;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;vue&#x2F;2.6.11&#x2F;vue.min.js&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#39;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;vue-router&#x2F;3.2.0&#x2F;vue-router.min.js&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#39;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;vuex&#x2F;3.1.2&#x2F;vuex.min.js&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#39;https:&#x2F;&#x2F;unpkg.com&#x2F;element-ui@2.14.1&#x2F;lib&#x2F;index.js&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chainWebpack: config &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 添加CDN参数到htmlWebpackPlugin配置中</span></pre></td></tr><tr><td class="code"><pre><span class="line">  config.plugin(&#39;html&#39;).tap(args &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &#39;production&#39;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      args[0].cdn &#x3D; cdn.build</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      args[0].cdn &#x3D; cdn.dev</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return args</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<blockquote>
<p>3.在 public/index.html 中注入配置的cdn</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 使用CDN的CSS文件 --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;% for (var i in</span></pre></td></tr><tr><td class="code"><pre><span class="line">  htmlWebpackPlugin.options.cdn&amp;&amp;htmlWebpackPlugin.options.cdn.css) &#123; %&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;link href&#x3D;&quot;&lt;%&#x3D; htmlWebpackPlugin.options.cdn.css[i] %&gt;&quot; rel&#x3D;&quot;preload&quot; as&#x3D;&quot;style&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;link href&#x3D;&quot;&lt;%&#x3D; htmlWebpackPlugin.options.cdn.css[i] %&gt;&quot; rel&#x3D;&quot;stylesheet&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;% &#125; %&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;!-- 使用CDN加速的JS文件，配置在vue.config.js下 --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;% for (var i in</span></pre></td></tr><tr><td class="code"><pre><span class="line">  htmlWebpackPlugin.options.cdn&amp;&amp;htmlWebpackPlugin.options.cdn.js) &#123; %&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;script src&#x3D;&quot;&lt;%&#x3D; htmlWebpackPlugin.options.cdn.js[i] %&gt;&quot;&gt;&lt;&#x2F;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;% &#125; %&gt;</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="添加-IE-兼容"><a href="#添加-IE-兼容" class="headerlink" title="添加 IE 兼容"></a>添加 IE 兼容</h3><ol>
<li>使用 core-js 和 regenerator-runtime<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i --save core-js regenerator-runtime</span></pre></td></tr></table></figure></li>
<li>main.js 中添加<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;core-js&#x2F;stable&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#39;regenerator-runtime&#x2F;runtime&#39;</span></pre></td></tr></table></figure></li>
<li>配置 babel.config.js<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const plugins &#x3D; []</span></pre></td></tr><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  presets: [[&#39;@vue&#x2F;cli-plugin-babel&#x2F;preset&#39;, &#123;useBuiltIns: &#39;usage&#39;, corejs: 3&#125;]],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  plugins</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>vue路由管控</title>
    <url>/2020/08/09/configuration/configuration04/</url>
    <content><![CDATA[<h3 id="1-创建router"><a href="#1-创建router" class="headerlink" title="1. 创建router"></a>1. 创建router</h3><blockquote>
<p>将路由拆分成<code>静态路由</code>与<code>动态路由</code>。<code>静态路由</code>：所有用户均可以访问。<code>动态路由</code>：根据meta内roles权限组动态生成</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &quot;vue&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import Router from &quot;vue-router&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Vue.use(Router);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * constantRoutes</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 没有权限要求的基本页面</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 所有角色都可以访问</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * keepAlive&#x3D;true 页面缓存</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export const constantRoutes &#x3D; [</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    path: &quot;&#x2F;login&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    name: &quot;login&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    meta: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      title: &quot;登录&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    component: () &#x3D;&gt; import(&quot;@&#x2F;views&#x2F;login&#x2F;index&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * asyncRoutes</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 需要根据用户角色动态加载的路由</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * roles 必须是字符串数组 根据字符串数组 动态匹配路由</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * roles 不写默认所有人都有权限</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export const asyncRoutes &#x3D; [</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    path: &quot;&#x2F;async&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    name: &quot;async&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    meta: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      title: &quot;async&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      roles: [&quot;admin&quot;, &quot;editor&quot;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    component: () &#x3D;&gt; import(&quot;@&#x2F;views&#x2F;async&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 404页面必须放置在末尾!!!</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123; path: &quot;*&quot;, redirect: &quot;&#x2F;404&quot;, hidden: true &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">const createRouter &#x3D; () &#x3D;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  new Router(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; mode: &#39;history&#39;, &#x2F;&#x2F; require service support</span></pre></td></tr><tr><td class="code"><pre><span class="line">    scrollBehavior: () &#x3D;&gt; (&#123; y: 0 &#125;),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    routes: constantRoutes</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">const router &#x3D; createRouter();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">export function resetRouter() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const newRouter &#x3D; createRouter();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  router.matcher &#x3D; newRouter.matcher; &#x2F;&#x2F; reset router</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">export default router;</span></pre></td></tr></table></figure>

<h3 id="2-创建根据权限组动态生成路由方法"><a href="#2-创建根据权限组动态生成路由方法" class="headerlink" title="2. 创建根据权限组动态生成路由方法"></a>2. 创建根据权限组动态生成路由方法</h3><blockquote>
<p>此方法引用vue-element-admin动态获取动态路由方法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; asyncRoutes, constantRoutes &#125; from &quot;@&#x2F;router&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * Use meta.role to determine if the current user has permission</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param roles</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param route</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">function hasPermission(roles, route) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  if (route.meta &amp;&amp; route.meta.roles) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return roles.some(role &#x3D;&gt; route.meta.roles.includes(role));</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * Filter asynchronous routing tables by recursion</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param routes asyncRoutes</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param roles</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export function filterAsyncRoutes(routes, roles) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const res &#x3D; [];</span></pre></td></tr><tr><td class="code"><pre><span class="line">  routes.forEach(route &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    const tmp &#x3D; &#123; ...route &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (hasPermission(roles, tmp)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      if (tmp.children) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        tmp.children &#x3D; filterAsyncRoutes(tmp.children, roles);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      res.push(tmp);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return res;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const state &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  routes: [],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  addRoutes: []</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const mutations &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SET_ROUTES: (state, routes) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    state.addRoutes &#x3D; routes;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    state.routes &#x3D; constantRoutes.concat(routes);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const actions &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  generateRoutes(&#123; commit &#125;, roles) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return new Promise(resolve &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      let accessedRoutes;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      if (roles.includes(&quot;admin&quot;)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        accessedRoutes &#x3D; asyncRoutes || [];</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        accessedRoutes &#x3D; filterAsyncRoutes(asyncRoutes, roles);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      commit(&quot;SET_ROUTES&quot;, accessedRoutes);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      resolve(accessedRoutes);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  namespaced: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  state,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  mutations,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  actions</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>

<h3 id="3-根据全局路由守卫，动态管控路由"><a href="#3-根据全局路由守卫，动态管控路由" class="headerlink" title="3. 根据全局路由守卫，动态管控路由"></a>3. 根据全局路由守卫，动态管控路由</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import router from &quot;.&#x2F;index&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import store from &quot;..&#x2F;store&#x2F;index&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import NProgress from &quot;nprogress&quot;; &#x2F;&#x2F; progress bar</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &quot;nprogress&#x2F;nprogress.css&quot;; &#x2F;&#x2F; progress bar style</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; getToken &#125; from &quot;@&#x2F;libs&#x2F;token&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; setTitle &#125; from &quot;@&#x2F;libs&#x2F;tools&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">NProgress.configure(&#123; showSpinner: false &#125;); &#x2F;&#x2F; NProgress Configuration</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">const whiteList &#x3D; [&quot;&#x2F;login&quot;, &quot;&#x2F;404&quot;, &quot;&#x2F;test&quot;]; &#x2F;&#x2F; no redirect whitelist</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">router.beforeEach(async (to, from, next) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 开始进度条</span></pre></td></tr><tr><td class="code"><pre><span class="line">  NProgress.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 确定用户是否已经登录</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const hasToken &#x3D; getToken();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  if (hasToken) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (to.path &#x3D;&#x3D;&#x3D; &quot;&#x2F;login&quot;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; 如果已登录，则重定向到主页</span></pre></td></tr><tr><td class="code"><pre><span class="line">      next(&#123; path: &quot;&#x2F;&quot; &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      NProgress.done();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; 确定用户是否通过getInfo获得了他的权限角色</span></pre></td></tr><tr><td class="code"><pre><span class="line">      const hasRoles &#x3D; store.state.user.roles &amp;&amp; store.state.user.roles.length &gt; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      if (hasRoles) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#x2F;&#x2F; roles 必须是字符串数组对象 such as: [&#39;admin&#39;] or ,[&#39;developer&#39;,&#39;editor&#39;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">          const &#123; roles &#125; &#x3D; await store.dispatch(&quot;user&#x2F;getInfo&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#x2F;&#x2F; 根据角色生成可访问路由图</span></pre></td></tr><tr><td class="code"><pre><span class="line">          const accessRoutes &#x3D; await store.dispatch(&quot;permission&#x2F;generateRoutes&quot;, roles);</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#x2F;&#x2F; 动态添加可访问路由</span></pre></td></tr><tr><td class="code"><pre><span class="line">          router.addRoutes(accessRoutes);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#x2F;&#x2F; 避免首页两次重定向</span></pre></td></tr><tr><td class="code"><pre><span class="line">          if (to.path &#x3D;&#x3D;&#x3D; &quot;&#x2F;home&quot;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 设置replace: true，这样导航将不会留下历史记录</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next(&#123; ...to, replace: true &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (error) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#x2F;&#x2F; 清楚 token 重新登录</span></pre></td></tr><tr><td class="code"><pre><span class="line">          await store.dispatch(&quot;user&#x2F;resetToken&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">          next(&quot;&#x2F;login&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">          NProgress.done();</span></pre></td></tr><tr><td class="code"><pre><span class="line">          console.log(&quot;error :&gt;&gt; &quot;, error);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;* 没有 token 未登录 *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (whiteList.indexOf(to.path) !&#x3D;&#x3D; -1) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; 在免登录白名单中，直接登录</span></pre></td></tr><tr><td class="code"><pre><span class="line">      next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; 其他没有访问权限的页面被重定向到登录页面。</span></pre></td></tr><tr><td class="code"><pre><span class="line">      next(&quot;&#x2F;login&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      NProgress.done();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">router.afterEach(to &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 动态设置HTML meta Title</span></pre></td></tr><tr><td class="code"><pre><span class="line">  setTitle(to, router.app);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 完成进度条</span></pre></td></tr><tr><td class="code"><pre><span class="line">  NProgress.done();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

<h3 id="4-具体"><a href="#4-具体" class="headerlink" title="4. 具体"></a>4. 具体</h3><ul>
<li><a href="https://github.com/wangxiaoqi0123/vue-cli3-vant" target="_blank" rel="noopener">https://github.com/wangxiaoqi0123/vue-cli3-vant</a></li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>微前端初体验</title>
    <url>/2022/02/08/configuration/configuration06/</url>
    <content><![CDATA[<h3 id="微前端理解"><a href="#微前端理解" class="headerlink" title="微前端理解"></a>微前端理解</h3><blockquote>
<p>微前端就是将不同的功能按照不同的维度拆分成多个子应用。通过主应用来加载这些子应用。<br>微前端的核心在于拆, 拆完后在合</p>
</blockquote>
<img src="/images/2022/micro-front-01.png">

<p><a href="https://github.com/Shenjieping/micro-app" target="_blank" rel="noopener">https://github.com/Shenjieping/micro-app</a></p>
<h3 id="组成结构"><a href="#组成结构" class="headerlink" title="组成结构"></a>组成结构</h3><blockquote>
<p>qiankun架构为例，以一个基座（MainApp）应用和若干个微（MicroApp）应用</p>
</blockquote>
<img src="/images/2022/micro-front-02.png">

<h3 id="qiankun基座构建"><a href="#qiankun基座构建" class="headerlink" title="qiankun基座构建"></a>qiankun基座构建</h3><ul>
<li>安装 qiankun<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add qiankun # 或者 npm i qiankun -S</span></pre></td></tr></table></figure></li>
<li>主应用中注册微应用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; registerMicroApps, start &#125; from &#39;qiankun&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">registerMicroApps([</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    name: &#39;react app&#39;, &#x2F;&#x2F; app name registered</span></pre></td></tr><tr><td class="code"><pre><span class="line">    entry: &#39;&#x2F;&#x2F;localhost:7100&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    container: &#39;#yourContainer&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    activeRule: &#39;&#x2F;yourActiveRule&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    name: &#39;vue app&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    entry: &#123; scripts: [&#39;&#x2F;&#x2F;localhost:7100&#x2F;main.js&#39;] &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    container: &#39;#yourContainer2&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    activeRule: &#39;&#x2F;yourActiveRule2&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">]);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">start();</span></pre></td></tr></table></figure>
<a href="https://qiankun.umijs.org/zh/guide/getting-started" target="_blank" rel="noopener">qiankun官网说明</a></li>
</ul>
<h3 id="子应用注册"><a href="#子应用注册" class="headerlink" title="子应用注册"></a>子应用注册</h3><ul>
<li><p>导出相应的生命周期钩子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function render()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ReactDOM.render(&lt;App &#x2F;&gt;, document.getElementById(&#39;root&#39;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 独立运行微应用</span></pre></td></tr><tr><td class="code"><pre><span class="line">if(!window.__POWERED_BY_QIANKUN__)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  render();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; bootstrap 只会在微应用初始化的时候调用一次</span></pre></td></tr><tr><td class="code"><pre><span class="line">export async function bootstrap()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 应用每次进入调用 mount</span></pre></td></tr><tr><td class="code"><pre><span class="line">export async function mount() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  render()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 应用每次 切出&#x2F;卸载 会调用 unmount</span></pre></td></tr><tr><td class="code"><pre><span class="line">export async function unmount()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ReactDOM.unmountComponentAtNode( document.getElementById(&#39;root&#39;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p><a href="https://qiankun.umijs.org/zh/guide/getting-started" target="_blank" rel="noopener">qiankun官网说明</a></p>
</li>
<li><p>配置微应用的打包工具</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 指定模块的暴露方式</span></pre></td></tr><tr><td class="code"><pre><span class="line">output: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  library: &#39;vueApp&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  libraryTarget: &#39;umd&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 解决图片等静态资源路径错误</span></pre></td></tr><tr><td class="code"><pre><span class="line">publicPath: process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &quot;production&quot; ? &#39;http:&#x2F;&#x2F;api.com&#39; : &#96;http:&#x2F;&#x2F;localhost:$&#123;port&#125;&#96;;</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 解决访问路径跨域</span></pre></td></tr><tr><td class="code"><pre><span class="line">headers:&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#39;Access-Control-Allow-Origin&#39;: &#39;*&#39; &#x2F;&#x2F; 允许跨域</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>……<br><a href="https://qiankun.umijs.org/zh/guide/tutorial" target="_blank" rel="noopener">qiankun官网说明</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 字段类型</title>
    <url>/2025/02/03/mysql/02/</url>
    <content><![CDATA[<h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><table border="1">
    <tr>
        <th width='20%'>类型</th>
        <th width='10%'>字节</th>
        <th width='35%'>有符号范围</th>
        <th width='35%'>无符号范围</th>
    </tr>
    <tr>
        <td>INT</td>
        <td>4</td>
        <td>-2147483648 ~ 2147483647</td>
        <td>0 ~ 4294967295</td>
    </tr>
    <tr>
        <td>SMALLINT</td>
        <td>2</td>
        <td>-32768 ~ 32767</td>
        <td>0 ~ 65535</td>
    </tr>
    <tr>
        <td>TINYINT</td>
        <td>1</td>
        <td>-128 ~ 127</td>
        <td>0 ~ 255</td>
    </tr>
    <tr>
        <td>MEDIUMINT</td>
        <td>3</td>
        <td>-8388608 ~ 8388607</td>
        <td>0 ~ 16777215</td>
    </tr>
    <tr>
        <td>BIGINT</td>
        <td>8</td>
        <td>-2<sup>63</sup> ~ 2<sup>63</sup>-1</td>
        <td>0 ~ 2<sup>64</sup>-1</td>
    </tr>
</table>

<p>列名 整数类型 -&gt; 有符号 有负值和正值<br>列名 整数类型 UNSIGNED -&gt; 无符号 只存正数, 负值部分用来存更大的正数</p>
<h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><table border="1">
    <tr>
        <th width='20%'>类型</th>
        <th width='10%'>字节</th>
        <th width='35%'>M（小数位数+整数位数）</th>
        <th width='35%'>D（小数位数）</th>
    </tr>
    <tr>
        <td>FLOAT(M,D)</td>
        <td>4</td>
        <td>M最大位24</td>
        <td>D最大为8</td>
    </tr>
    <tr>
        <td>DOUBLE(M,D)</td>
        <td>8</td>
        <td>M最大位53</td>
        <td>D最大为30</td>
    </tr>
    <tr>
        <td>DECIMAL(M<D)</td>
        <td>动态计算</td>
        <td>M最大位65</td>
        <td>D最大为30</td>
    </tr>
</table>

<p>FLOAT, DOUBLE 类型在存储时会丢失精度，不适合用来做精确计算，如果要存储精确小数，可以使用decimal类型。<br>可以使用 UNSIGNED 属性修饰浮点类型，使其变为无符号。</p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><table border="1">
    <tr>
        <th width='20%'>类型</th>
        <th width='10%'>特点</th>
        <th width='35%'>长度范围（字符）</th>
        <th width='35%'>存储空间</th>
    </tr>
    <tr>
        <td>CHAR(M)</td>
        <td>固定长度</td>
        <td>0 ~ 255</td>
        <td>M*4个字节（utf8mb4）</td>
    </tr>
    <tr>
        <td>VARCHAR(M)</td>
        <td>可变长度</td>
        <td>0 ~ *（一行数据最大占有空向是65535字节）</td>
        <td>M*4+1个字节（utf8mb4）</td>
    </tr>
</table>

<p>mysql中一行数据最大的占有空向是65535字节，所以varchar的长度不能超过65532字节，否则会报错。</p>
<blockquote>
<p>文本类型</p>
</blockquote>
<table border="1">
    <tr>
        <th width='20%'>类型</th>
        <th width='10%'>描述</th>
        <th width='70%'>存储空间范围（字节）</th>
    </tr>
    <tr>
        <td>TINYTEXT</td>
        <td>小文本</td>
        <td>0 ~ 255</td>
    </tr>
    <tr>
        <td>TEXT</td>
        <td>文本</td>
        <td>0 ~ 65535</td>
    </tr>
    <tr>
        <td>MEDIUMTEXT</td>
        <td>中等文本</td>
        <td>0 ~ 16777215</td>
    </tr>
        <td>LONGTEXT</td>
        <td>大文本</td>
        <td>0 ~ 4294967295（4G）</td>
    </tr>
</table>
文本类型不受mysql中一行数据最大的占有空向是65535字节的限制。

<h3 id="日期时间"><a href="#日期时间" class="headerlink" title="日期时间"></a>日期时间</h3><table border="1">
    <tr>
        <th width='20%'>类型</th>
        <th width='10%'>字节</th>
        <th width='35%'>格式</th>
        <th width='35%'>范围</th>
    </tr>
    <tr>
        <td>YEAR</td>
        <td>1</td>
        <td>YYYY或YY</td>
        <td>1901 ~ 2155 或 00~99</td>
    </tr>
    <tr>
        <td>TIME</td>
        <td>3</td>
        <td>HH:MM:SS</td>
        <td>-838:59:59 ~ 838:59:59</td>
    </tr>
    <tr>
        <td>DATE</td>
        <td>3</td>
        <td>YYYY-MM-DD</td>
        <td>1000-01-01 ~ 9999-12-31</td>
    </tr>
        <td>DATETIME</td>
        <td>8</td>
        <td>YYYY-MM-DD HH:MM:SS</td>
        <td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td>
    </tr>
    </tr>
        <td>TIMESTAMP</td>
        <td>4</td>
        <td>YYYY-MM-DD HH:MM:SS</td>
        <td>1970-01-01 00:00:01 ~ 2038-01-19 03:14:07</td>
    </tr>
</table>

<p>扩展：<code>DATETIME</code>和<code>TIMESTAMP</code>类型可以设置自动初始化和更新<br>自动初始化：CREATE TABLE 表名 (字段名 <code>DATETIME</code> <code>DEFAULT CURRENT_TIMESTAMP</code>);<br>自动初始化，自动更新：CREATE TABLE 表名 (字段名 <code>TIMESTAMP</code> <code>DEFAULT CURRETN_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</code>);</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 增删改与select</title>
    <url>/2025/02/04/mysql/03/</url>
    <content><![CDATA[<h3 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h3><h4 id="数据添加"><a href="#数据添加" class="headerlink" title="数据添加"></a>数据添加</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...); <span class="comment"># 添加一行数据，但不指定字段。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 (字段<span class="number">1</span>, 字段<span class="number">2</span>, ...) <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...); <span class="comment"># 添加一行数据，并指定字段。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 (字段<span class="number">1</span>, 字段<span class="number">2</span>, ...) <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">11</span>, 值<span class="number">12</span>, ...); <span class="comment"># 添加多行数据。</span></span></pre></td></tr></table></figure>
<p>注意：<br>如果不指定字段，则必须按照表中定义的顺序添加值。<br>添加的值要和字段类型匹配。<br>如果要添加多行，则需要使用逗号分隔。</p>
<h4 id="数据修改"><a href="#数据修改" class="headerlink" title="数据修改"></a>数据修改</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 字段<span class="number">1</span> = 新值<span class="number">1</span>, 字段<span class="number">2</span> = 新值<span class="number">2</span>, ...; <span class="comment"># 修改表中所有行的数据。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 字段<span class="number">1</span> = 新值<span class="number">1</span>, 字段<span class="number">2</span> = 新值<span class="number">2</span>, ... <span class="keyword">WHERE</span> 条件; <span class="comment"># 修改表中符合条件的行的数据。</span></span></pre></td></tr></table></figure>

<h4 id="数据删除"><a href="#数据删除" class="headerlink" title="数据删除"></a>数据删除</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名; <span class="comment"># 删除表中所有数据，但不删除表结构。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> 表名; <span class="comment"># 删除表中所有数据，并重置自增计数器。</span></span></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件; <span class="comment"># 删除表中符合条件的行。</span></span></pre></td></tr></table></figure>

<h3 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h3><p><strong>非表查询</strong><br>解释：利用select关键字，快速输出一个运算结果或者函数，类似 java 控制台输出。<br>语法：select 运算，函数。<br>示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span>+<span class="number">1</span>;</span></pre></td></tr></table></figure>

<p><strong>指定表进行查询</strong><br>解释：利用select关键字，指定表名进行查询。<br>语法：select 列名,列名,列名,… from 表名;<br>提示：* 表示查询所有列，且*必须写在最前面。<br>示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_employee;</span></pre></td></tr></table></figure>

<p><strong>查询列并且起别名</strong><br>解释：利用select关键字，查询列并且起别名。<br>语法：select 列名 as 别名,列名 as 别名,… from 表名;<br>示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> eid <span class="keyword">as</span> <span class="keyword">id</span>, ename <span class="keyword">name</span> <span class="keyword">FROM</span> t_employee;</span></pre></td></tr></table></figure>

<p><strong>去掉重复行数据</strong><br>解释：利用select关键字，去掉重复行数据。<br>语法：SELECT DISTINCT 字段名 FROM 表名;</p>
<p><strong>查询常数列</strong><br>解释：人为制造的一个值和一个列！（多个值，多个列）<br>语法：select 列名,…, ‘值’ as 列名 from 表名;<br>示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> eid,ename,<span class="string">'我是常量'</span> <span class="keyword">as</span> const_value <span class="keyword">FROM</span> t_employee;</span></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 运算符</title>
    <url>/2025/02/04/mysql/04/</url>
    <content><![CDATA[<h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p>语法：<br>  <code>+</code>（加） <code>-</code>（减） <code>*</code>（乘） <code>/</code>（除） <code>div</code>（整除） <code>%</code>（模）<code>mod</code>（模）<br>注意：<br>  <code>/</code> 浮点数除法，<code>div</code>整数除法。<br>  <code>/</code>0 不会抛出异常，返回null。<br>  浮点数类型运算结果为浮点数。<br>  优先级：<code>*</code> <code>/</code> <code>div</code> <code>%</code> <code>mod</code> <code>&gt;</code> <code>+</code> <code>-</code>，提升优先级使用括号。</p>
<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>比较对比：<code>&gt;</code> <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code><br>等于对比：<code>=</code> 不能做空判断 null <code>=</code> null 结果为 false，null <code>&lt;=&gt;</code> null 结果为 true（mysql独有）<br>不等于对比：<code>&lt;&gt;</code> <code>!=</code>（mysql独有）<br>空值处理：<code>is null</code> <code>is not null</code><br>区间比较：<code>between min and max</code> <code>not between min and max</code><br>范围比较：<code>key in(x,y,z)</code> <code>key = x or key = y or key = z</code> <code>not in</code><br>模糊匹配：<code>like</code> <code>not like</code> like 匹配规则，<code>%</code>任意字符出现0次或多次，<code>_</code>单一字符。</p>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>语法：<code>and</code> <code>or</code> <code>not</code> <code>xor</code><br>注意：数据库中非空 非0代表true 反之为false, true -&gt; 1 | false -&gt; 0</p>
<h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><table border="1">
    <tr>
        <th width='90px'>优先级</th>
        <th>运算符</th>
        <th width='240px'>说明</th>
    </tr>
    <tr>
        <th>1（最高）</th>
        <th>!</th>
        <th>逻辑非</th>
    </tr>
    <tr>
        <th>2</th>
        <th>*，/，div，%，mod</th>
        <th>乘、除、整除、取模，取模</th>
    </tr>
    <tr>
        <th>3</th>
        <th>+，-</th>
        <th>加、减</th>
    </tr>
    <tr>
        <th>4</th>
        <th>=，<=>，>=，>，<，<=，!=，IS，LIKE，IN，REGEXP</th>
        <th>比较运算</th>
    </tr>
    <tr>
        <th>5</th>
        <th>BETWEEN，CASE，WHEN，THEN，ELSE</th>
        <th>逻辑运算</th>
    </tr>
    <tr>
        <th>6</th>
        <th>NOT</th>
        <th>逻辑非</th>
    </tr>
    <tr>
        <th>7</th>
        <th>AND</th>
        <th>逻辑与</th>
    </tr>
    <tr>
        <th>8</th>
        <th>XOR</th>
        <th>逻辑异或</th>
    </tr>
    <tr>
        <th>9（最低）</th>
        <th>OR</th>
        <th>逻辑或</th>
    </tr>
</table>

<p>注意：<br>一般情况下的运算符优先级。在实际使用中，如果不确定优先级，可以使用<strong>括号</strong>来明确运算的顺序！<strong>()</strong>内优先级最高！</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>husky+lint-staged+commitlint git提交配置</title>
    <url>/2023/03/23/configuration/configuration11/</url>
    <content><![CDATA[<blockquote>
<p>使用 husky、lint-staged 对 git commit时进行代码修复检查<br>使用 commitlint 对 git commit message 进行规范</p>
</blockquote>
<h3 id="husky"><a href="#husky" class="headerlink" title="husky"></a>husky</h3><blockquote>
<p>husky 使用git提交代码的过程中会触发的钩子</p>
</blockquote>
<ol>
<li><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pnpm add husky -D</span></pre></td></tr></table></figure>
</li>
<li><p>在package.json中的script中添加一条脚本命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;prepare&quot;: &quot;husky install&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>执行 pnpm prepare 命令，根目录下生成 .husky目录</p>
</li>
<li><p>husky命令添加pre-commit</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pnpm husky add .husky&#x2F;pre-commit &quot;pnpm lint&quot;</span></pre></td></tr></table></figure>
<p>执行命令后会在.husky目录下生成一个pre-commit文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env sh</span></pre></td></tr><tr><td class="code"><pre><span class="line">. &quot;$(dirname -- &quot;$0&quot;)&#x2F;_&#x2F;husky.sh&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">pnpm lint</span></pre></td></tr></table></figure>
</li>
<li><p>git commit<br>执行git commit时，就会 执行 pnpm lint。通过配置pnpm lint 命令对代码修复 和错误检查。</p>
</li>
</ol>
<h3 id="lint-staged"><a href="#lint-staged" class="headerlink" title="lint-staged"></a>lint-staged</h3><blockquote>
<p>当我们执行 pnpm lint:eslint、pnpm lint:prettier、pnpm lint:style 这些命令时，会把项目中的文件都检查一遍。<br>lint-staged 用于校验我们修改过的文件，而不是全部文件。</p>
</blockquote>
<ol>
<li><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pnpm i lint-staged -D</span></pre></td></tr></table></figure>
</li>
<li><p>在packages.json的scripts中添加命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;lint-staged&quot;: &quot;lint-staged&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
</li>
<li><p>修改.husky/pre-commit下的npm命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run lint-staged</span></pre></td></tr></table></figure>
</li>
<li><p>项目根目录下创建.lintstagedrc配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;*.&#123;js,jsx,ts,tsx&#125;&quot;: [&quot;prettier --write&quot;, &quot;eslint --fix&quot;],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;&#123;!(package)*.json,.!(browserslist)*rc&#125;&quot;: [&quot;prettier --write--parser json&quot;],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;package.json&quot;: [&quot;prettier --write&quot;],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;*.vue&quot;: [&quot;prettier --write&quot;, &quot;stylelint --fix --aei&quot;, &quot;eslint --fix&quot;],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;*.&#123;vue,css,scss,postcss,less&#125;&quot;: [&quot;prettier --write&quot;, &quot;stylelint --fix --aei&quot;],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;*.md&quot;: [&quot;prettier --write&quot;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>提交commit时，pre-commit钩子执行npm run lint-staged命令，lint-staged找到.lintstagedrc配置文件，对git暂存区的文件，根据文件类型，执行相应的命令。</p>
</li>
</ol>
<h3 id="commitlint"><a href="#commitlint" class="headerlink" title="commitlint"></a>commitlint</h3><blockquote>
<p>使用 commitlint 对 git commit message 进行规范</p>
</blockquote>
<ol>
<li><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pnpm i @commitlint&#x2F;cli @commitlint&#x2F;config-conventional -D</span></pre></td></tr></table></figure>
</li>
<li><p>husky命令添加commit-msg</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npx husky add .husky&#x2F;commit-msg &quot;npx commitlint -e&quot;</span></pre></td></tr></table></figure>
</li>
<li><p>根目录下创建 commitlint.config.js 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ignores: [(commit) &#x3D;&gt; commit.includes(&#39;init&#39;)],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  extends: [&#39;@commitlint&#x2F;config-conventional&#39;],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  rules: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;body-leading-blank&#39;: [2, &#39;always&#39;],</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;footer-leading-blank&#39;: [1, &#39;always&#39;],</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;header-max-length&#39;: [2, &#39;always&#39;, 108],</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;subject-empty&#39;: [2, &#39;never&#39;],</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;type-empty&#39;: [2, &#39;never&#39;],</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;type-enum&#39;: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">      2,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#39;always&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      [</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#39;feat&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#39;fix&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#39;perf&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#39;style&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#39;docs&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#39;test&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#39;refactor&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#39;build&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#39;ci&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#39;chore&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#39;revert&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#39;wip&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#39;workflow&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#39;types&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#39;release&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 函数</title>
    <url>/2025/02/05/mysql/06/</url>
    <content><![CDATA[<h3 id="常规函数"><a href="#常规函数" class="headerlink" title="常规函数"></a>常规函数</h3><p><strong>数字函数</strong><br>abs(x): 返回 x 的绝对值<br>ceil(x): 返回 大于或等于 x 的最小整数（向上取整）<br>floor(x): 返回 小于或等于 x 的最大整数（向下取整）<br>round(x): 返回 x 四舍五入最接近的整数<br>round(x,n): 返回 x 四舍五入保留 n 位小数<br>rand(): 返回 0 到 1 之间的随机浮点数（0 ≤ x &lt; 1）<br>rand(x): 当 x 相同时，RAND(x) 返回相同的随机数（用于伪随机种子）<br>truncate(x,n): 返回 x 截断到 n 位小数（不四舍五入）</p>
<p><strong>字符串函数</strong><br>concat(str1, str2, …): 返回连接参数产生的字符串<br>char_length(str): 返回 str 的字符数<br>find_in_set(str, strlist): 返回 str 在字符串列表 strlist 中的位置</p>
<p><strong>时间日期函数</strong><br>日期获取<br>now()、curdate()、curtime()、utc_date()、utc_time(): 返回当前日期和时间、当前日期、当前时间、utc日期、utc时间<br>year(date)、month(date)、day(date): 返回日期参数的年份部分、月份部分、日部分<br>week(date): 返回日期参数的年份的第几周<br>weekday(date): 返回日期参数的星期索引（0 周一，1 周二，…，6 周日）<br>dayofyear(date): 返回日期参数的年中的天数</p>
<p>日期计算<br>adddate(date, INTERVAL expr unit): 返回日期加上一个时间间隔<br>addtime(date, expr): 返回日期加上一个时间<br>datediff(expr1, expr2): 返回两个日期之间的天数</p>
<p>日期格式化<br>date_format(date, format): 根据格式返回日期。<br>str_to_date(str, format): 根据格式返回日期。<br>format 可以是：%Y 年，%m 月，%d 日，%H 时，%i 分，%s 秒。</p>
<h3 id="控制函数"><a href="#控制函数" class="headerlink" title="控制函数"></a>控制函数</h3><p><strong>单行函数</strong><br>if(表达式,true_value,false_value)：if 函数处理有两个结果的流程<br>ifnull(字段名,null_value)：处理列等于 null 的时候,我们赋予其他的默认值<br>case: 处理多流程结果</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式一</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">case </span></pre></td></tr><tr><td class="code"><pre><span class="line">  when 表达式1 then 结果1</span></pre></td></tr><tr><td class="code"><pre><span class="line">  when 表达式2 then 结果3</span></pre></td></tr><tr><td class="code"><pre><span class="line">  else 默认结果</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 方式二</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> 列名|表达式</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">when</span> 值<span class="number">1</span> <span class="keyword">then</span> 结果<span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">when</span> 值<span class="number">2</span> <span class="keyword">then</span> 结果<span class="number">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">else</span> 默认结果</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></table></figure>

<p><strong>聚合函数</strong><br>avg(列名) 求平均值<br>sum(列名) 求和<br>min|max(列名) 求最小值和最大值<br>count(列名/*/1) 计数<br>注意：<br>聚合函数不能嵌套在其他函数中<br>聚合函数遇到null值，会自动忽略</p>
<h3 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h3><p>作用：<br>允许在结果集中执行聚合、分析、排序操作，而不会改变查询结果行数。</p>
<p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 多行函数 <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> 字段名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段名 <span class="keyword">ASC</span>|<span class="keyword">DESC</span>) <span class="keyword">from</span> table_name,</span></pre></td></tr></table></figure>

<p><code>ROW_NUMBER</code> 顺序排序，从1开始。<br><code>RANK()</code> 并列挂序，会跳过重复的序号，比如序号为1、1、3。<br><code>PERCENT_RANK()</code> 等级值百分比，通过<code>RANK - 1 / 总行数 - 1</code>进行计算结果。</p>
<p>注意：<br>多行函数 可以是聚合函数，也可以是窗口函数。<br>聚合函数：SUM、AVG、MAX、MIN …<br>窗口函数：ROW_NUMBER()、RANK()、PERCENT_RANK …</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 多表查询</title>
    <url>/2025/02/07/mysql/08/</url>
    <content><![CDATA[<h3 id="表关系"><a href="#表关系" class="headerlink" title="表关系"></a>表关系</h3><p><strong>一对一</strong><br>特点：双方的数据行都对应对方至多一条数据<br>意义：用于优化冷热数据查询<br>如何建立关系：<br>方式一：子表的外键与主键融合，两张表公用同一个主键。<br>方式二：子表外键添加唯一约束</p>
<p><strong>一对多</strong><br>特点：主表对应多条子表数据，子表对应主表至多一条数据<br>意义：解决数据冗余问题。<br>如何建立关系：<br>子表的外键不进行约束。</p>
<p><strong>多对多</strong><br>特点：双方的数据行都可以对应对方多条数据<br>如何建立关系：<br>多对多需要创建中间表建立数据之间的关联。<br>中间表包含两个外键，主表数据之间间接关联。</p>
<h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p><strong>内连接（inner join）</strong><br>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">as</span> 表<span class="number">1</span>别名 [<span class="keyword">inner</span>] <span class="keyword">join</span> 表<span class="number">2</span> 表<span class="number">2</span>别名 <span class="keyword">on</span> 表<span class="number">1</span>别名.主键 = 表<span class="number">2</span>别名.外键; <span class="comment"># 标准语法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">as</span> 表<span class="number">1</span>别名, 表<span class="number">2</span> 表<span class="number">2</span>别名 <span class="keyword">where</span> 表<span class="number">1.</span>主键 = 表<span class="number">2.</span>外键; <span class="comment"># mysql语法</span></span></pre></td></tr></table></figure>

<p>作用：<br>可以将多个表的数据行，正确水平拼接到一个结果集中。<br>两个表中必须存在相同的主外键，内连接才能查询到结果。</p>
<p>注意：<br>为了避免错误数据行连接（笛卡尔积，连接查询，将所有的行都拼接一遍），需要添加主外键相等的条件。<br>多表中可能存在相同的列名，建议表别名，以区分。<br>存在N个表相连接时，会先将前两个表进行连接，再将结果与第三个表进行连接。</p>
<p><strong>外连接 （left outer join）</strong><br>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">as</span> 表<span class="number">1</span>别名 <span class="keyword">left</span> [<span class="keyword">outer</span>] <span class="keyword">join</span> 表<span class="number">2</span> 表<span class="number">2</span>别名 <span class="keyword">on</span> 表<span class="number">1</span>别名.主键 = 表<span class="number">2</span>别名.外键;</span></pre></td></tr></table></figure>

<p>作用：<br>外连接可以通过left或right指定一个逻辑主表，逻辑主表的数据一定会显示全。<br>逻辑主表之外的行，如果存在匹配的外键则显示，否则为null。</p>
<p>注意：<br>内连接必须存在主外键主外键相等的条件。<br>外连接指定一个逻辑主表，一点会显示全。<br>外连接的outer关键字可以省略。<br>如果有逻辑主表，就将逻辑组表放在第一位，后面全部是用left连接。</p>
<p><strong>自然连接 （natural join）</strong><br>自然连接 是 内连接，外连接的一种简化写法。</p>
<p><strong>自连接</strong><br>自连接就是表与自身进行连接的一种特殊场景。</p>
<p>注意：<br>一个表中的数据引用这个表中的另一行数据。<br>自连接依然使用内外连接语法进行实现。</p>
<h3 id="嵌套子查询"><a href="#嵌套子查询" class="headerlink" title="嵌套子查询"></a>嵌套子查询</h3><p>概念：一个sql语句中嵌套了另一个或多个完整的sql语句，称为子查询或内查询。</p>
<p>根据子查询的结果，可分为4种情况：<br>标量子查询：子查询返回结果是一行一列，单一值，一般用在条件判断。<br>行子子查询：子查询返回结果是一行多列，一般用于插入数据的值，或者整体对比。<br>列子子查询：子查询返回结果是一列多行，一般用于条件对比，需要配合 in any all 等关键字。<br>表子子查询：子查询返回结果是多行多列，不能用于条件判断，一般用于查询的虚拟表的中间表。</p>
<p>提示：<br>any all 关键字只用在列子查询中。<br>any 关键字相当于 or 关系，all 关键字相当于 and 关系。</p>
<p>子查询可以在select，update，delete，insert，等语句中使用。<br>注意：update，delete 中使用时，更新的表与子查询的表是同一个表，会产生冲突。<br>示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> t_employee <span class="keyword">SET</span> salary = (<span class="keyword">SELECT</span> salary <span class="keyword">FROM</span> t_employee <span class="keyword">WHERE</span> ename = <span class="string">'孙红梅'</span>) <span class="keyword">WHERE</span> ename = <span class="string">'李冰冰'</span>; <span class="comment"># 错误</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> t_employee <span class="keyword">SET</span> salary = (<span class="keyword">SELECT</span> salary <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> salary <span class="keyword">FROM</span> t_employee <span class="keyword">WHERE</span> ename = <span class="string">'孙红梅'</span>) <span class="keyword">as</span> temp) <span class="keyword">WHERE</span> ename = <span class="string">'李冰冰'</span>; <span class="comment"># 正确</span></span></pre></td></tr></table></figure>
<p>这里update占用了员工表的引用，内部又需要查员工表，也占用了员工表的引用，所以需要用一个子查询来做临时表，先执行子查询，然后释放掉对员工表的引用，再通过临时表来做更新。</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 用户权限</title>
    <url>/2025/02/07/mysql/10/</url>
    <content><![CDATA[<h3 id="用户登陆"><a href="#用户登陆" class="headerlink" title="用户登陆"></a>用户登陆</h3><p>1.登录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql [-h 主机地址 -P 端口] -u用户名 -p密码</span></pre></td></tr></table></figure>
<p>-h 主机地址：可以不写，默认是localhost<br>-P 端口：可以不写，默认是3306</p>
<h3 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h3><p>1.创建用户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'账号'</span>@<span class="string">'访问的主机地址 localhost | ip地址 | %'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'密码'</span>;</span></pre></td></tr></table></figure>
<p>2.赋予权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> 权限,权限 <span class="keyword">ON</span> 数据库名.表名（* 任何库和表） <span class="keyword">TO</span> <span class="string">'账号'</span>@<span class="string">'访问的主机地址 localhost | ip地址 | %'</span>;</span></pre></td></tr></table></figure>
<p>权限：<br><code>SELECT</code> 查询数据<br><code>INSERT</code> 插入数据<br><code>UPDATE</code> 修改数据<br><code>DELETE</code> 删除数据<br><code>CREATE</code> 创建数据库<br><code>DROP</code> 删除数据库<br><code>GRAANT OPTION</code> 授予权限<br><code>ALL PRIVILEGES</code> 所有权限<br>3.回收权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> 权限,权限 <span class="keyword">ON</span> 数据库名.表名（* 任何库和表） <span class="keyword">FROM</span> <span class="string">'账号'</span>@<span class="string">'访问的主机地址 localhost | ip地址 | %'</span>;</span></pre></td></tr></table></figure>
<p>4.删除用户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">'账号'</span>@<span class="string">'访问的主机地址 localhost | ip地址 | %'</span>;</span></pre></td></tr></table></figure>
<p>5.查看用户和权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span>,host <span class="keyword">FROM</span> mysql.user;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> <span class="string">'账号'</span>@<span class="string">'访问的主机地址 localhost | ip地址 | %'</span>;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 约束</title>
    <url>/2025/02/06/mysql/07/</url>
    <content><![CDATA[<h3 id="NOT-NULL"><a href="#NOT-NULL" class="headerlink" title="NOT NULL"></a>NOT NULL</h3><p>作用：确保列中不能有NULL值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(字段 数据类型 <span class="keyword">NOT</span> <span class="literal">NULL</span>); <span class="comment"># 创建表时添加</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">MODIFY</span> 字段 数据类型 <span class="keyword">NOT</span> <span class="literal">NULL</span>; <span class="comment"># 添加</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">MODIFY</span> 字段 数据类型; <span class="comment"># 移除</span></span></pre></td></tr></table></figure>

<h3 id="DEFAULT"><a href="#DEFAULT" class="headerlink" title="DEFAULT"></a>DEFAULT</h3><p>作用：为列提供一个默认值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(字段 数据类型 <span class="keyword">DEFAULT</span> 默认值); <span class="comment"># 创建表时添加</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">MODIFY</span> 字段 数据类型 <span class="keyword">DEFAULT</span> 默认值; <span class="comment"># 添加</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">MODIFY</span> 字段 数据类型; <span class="comment"># 移除</span></span></pre></td></tr></table></figure>
<p>提示：如果主动插入NULL值，则不会触发默认值行为。</p>
<h3 id="CKECK"><a href="#CKECK" class="headerlink" title="CKECK"></a>CKECK</h3><p>作用：确保列中的值满足某个条件。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span></pre></td></tr><tr><td class="code"><pre><span class="line">  字段<span class="number">1</span> 数据类型,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  字段<span class="number">2</span> 数据类型,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ...,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  [<span class="keyword">CONSTRAINT</span> 约束名] <span class="keyword">CHECK</span> (条件);</span></pre></td></tr><tr><td class="code"><pre><span class="line">); <span class="comment"># 创建表时添加</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 约束名 <span class="keyword">CHECK</span> (条件); <span class="comment"># 添加</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> 约束名; <span class="comment"># 移除</span></span></pre></td></tr></table></figure>

<h3 id="AUTO-INCREMENT"><a href="#AUTO-INCREMENT" class="headerlink" title="AUTO_INCREMENT"></a>AUTO_INCREMENT</h3><p>作用：自动增长约束，确保列中的数据唯一且不为空。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(字段 数据类型 PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT); <span class="comment"># 创建表时添加</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">MODIFY</span> 字段 数据类型 AUTO_INCREMENT; <span class="comment"># 添加</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">MODIFY</span> 字段 数据类型; <span class="comment"># 移除</span></span></pre></td></tr></table></figure>
<p>提示：<br>添加AUTO_INCREMENT约束的列必须是主键或者唯一约束。<br>每个表只能有一个AUTO_INCREMENT约束。<br>自增列必须是整数类型。<br>插入数据时，不指定自增列的值或值为null或0时，会自动增长。</p>
<h3 id="PIRMARY-KEY"><a href="#PIRMARY-KEY" class="headerlink" title="PIRMARY KEY"></a>PIRMARY KEY</h3><p>作用：主键约束，确保列中的数据唯一且不为空。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(字段 数据类型 PRIMARY <span class="keyword">KEY</span>); <span class="comment"># 创建表时添加</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span></pre></td></tr><tr><td class="code"><pre><span class="line">  字段<span class="number">1</span> 数据类型,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  字段<span class="number">2</span> 数据类型,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ...,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  PRIMARY <span class="keyword">KEY</span>(字段名,...);</span></pre></td></tr><tr><td class="code"><pre><span class="line">); <span class="comment"># 创建表时添加</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> PRIMARY <span class="keyword">KEY</span>(字段名,...); <span class="comment"># 添加</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span>; <span class="comment"># 移除</span></span></pre></td></tr></table></figure>
<p>提示：一个表只能有一个主键，但是可以有多个字段组合成一个复合主键。</p>
<h3 id="UNIQUE"><a href="#UNIQUE" class="headerlink" title="UNIQUE"></a>UNIQUE</h3><p>作用：唯一约束，确保列中的数据唯一。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(字段 数据类型 <span class="keyword">UNIQUE</span> [<span class="keyword">KEY</span>]); <span class="comment"># 创建表时添加</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span></pre></td></tr><tr><td class="code"><pre><span class="line">  字段<span class="number">1</span> 数据类型,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  字段<span class="number">2</span> 数据类型,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ...,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  [<span class="keyword">CONSTRAINT</span> 约束名] <span class="keyword">UNIQUE</span> [<span class="keyword">KEY</span>](字段名,...);</span></pre></td></tr><tr><td class="code"><pre><span class="line">); <span class="comment"># 创建表时添加</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> [<span class="keyword">KEY</span>] (字段名,...); <span class="comment"># 添加</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> 约束名;</span></pre></td></tr></table></figure>
<p>提示：同一个表上可以多个字段有唯一约束，或者多个字段组合唯一。</p>
<h3 id="FOREIGN-KEY"><a href="#FOREIGN-KEY" class="headerlink" title="FOREIGN KEY"></a>FOREIGN KEY</h3><p>作用：外键约束，确保列中的数据在另一个表中存在。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span></pre></td></tr><tr><td class="code"><pre><span class="line">  字段<span class="number">1</span> 数据类型,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  字段<span class="number">2</span> 数据类型,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ...,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  [<span class="keyword">CONSTRAINT</span> 约束名] <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (子表外键字段) <span class="keyword">REFERENCES</span> 主表(主表的主键)[级联配置];</span></pre></td></tr><tr><td class="code"><pre><span class="line">); <span class="comment"># 创建表时添加</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 约束名 <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (子表外键字段) <span class="keyword">REFERENCES</span> 主表(主表的主键)[级联配置]; <span class="comment"># 添加</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> 约束名; <span class="comment"># 移除</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">INDEX</span> <span class="keyword">FROM</span> 子表名; <span class="comment"># 查看索引</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">AlTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">INDEX</span> 约束名; <span class="comment"># 移除索引</span></span></pre></td></tr></table></figure>
<p>外键概念：外键就是在一个表中定义另一个表的主键列，从而达到两个表之间的关联。<br>外键约束概念：外键约束是用来保证外键数据正确的限制。外键没有外键约束也是外键，最好添加外键约束。<br>级联配置：<br>在定义外键时，可以使用<code>ON DELETE 配置 ON UPDATE 配置</code> 关键字来指定当父表数据被删除或更新时，子表应该执行的操作。<br><code>CASCADE</code> 级联删除/更新，如果删除/更新父表的记录，子表对应记录也被删除/更新。<br><code>SET NULL</code> 子表的外键允许为空，且删除父表记录时，子表数据应保留但失去关联，如部门被删除时，员工仍然存在，但 department_id 变 NULL。<br><code>RESTRICT / NO ACTION</code>（默认）限制删除/更新父表记录，如果子表有对应数据则不允许操作。</p>
<p>注意：<br>一个表可以有多个外键约束。<br>外键是跨表引用其他表的主键值。<br>外键所在的表叫子表，被引用的主键所在的表叫主表。<br>外键的类型必须必须和主键的类型相同，命名最好相同。<br>主外键关系，就代表两张表存在关联关系，之后可以进行多表的水平查询。<br>有主外键约束，删除主表数据的前提是子表没有引用数据！否则应该先删除子表的引用数据，再删除主表数据！</p>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看表结构，可查看`NOT NULL`、`DEFAULT`、`AUTO_INCREMENT`约束信息。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">DESC 表名;</span></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看约束信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> information_schema.table_constraints <span class="keyword">WHERE</span> table_name = <span class="string">'表名'</span>;</span></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看索引信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">INDEX</span> <span class="keyword">FROM</span> 子表名;</span></pre></td></tr></table></figure>
<p>注意：<br>使用<code>ALTER TABLE 表名 MODIFY 字段 数据类型;</code>进行修改时，会将之前的 <code>NOT NULL</code>、<code>DEFAULT</code>、<code>AUTO_INCREMENT</code>约束一并移除。</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 库与表</title>
    <url>/2025/02/03/mysql/01/</url>
    <content><![CDATA[<h3 id="库"><a href="#库" class="headerlink" title="库"></a>库</h3><p>1.创建</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> 数据库名;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> 数据库名 <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci; <span class="comment"># 指定字符集和排序规则</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> 数据库名; <span class="comment"># 如果不存在则创建</span></span></pre></td></tr></table></figure>
<p>mysql8: 默认 utf8mb4字符集 utf8mb4_0900_ai_ci不区分大小写排序规则</p>
<p>2.切换</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">USE</span> 数据库名;</span></pre></td></tr></table></figure>

<p>3.删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> 数据库名;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> 数据库名; <span class="comment"># 如果存在则删除</span></span></pre></td></tr></table></figure>

<p>4.修改</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> 数据库名 <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci; <span class="comment"># 修改字符集和排序规则</span></span></pre></td></tr></table></figure>

<p>5.查看</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATABASE</span>(); <span class="comment"># 查看当前数据库</span></span></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">DATABASES</span>; <span class="comment"># 查看所有数据库</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> 数据库名;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'character_set_database'</span>; <span class="comment"># 查看当前数据库的字符集和排序规则</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'collation_database'</span>; <span class="comment"># 查看当前数据库的字符集和排序规则</span></span></pre></td></tr></table></figure>

<h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><p>1.创建</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span></pre></td></tr><tr><td class="code"><pre><span class="line">  字段名 类型 [列的约束] [列的注释],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  字段名 类型 [列的约束] [列的注释],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ···</span></pre></td></tr><tr><td class="code"><pre><span class="line">  字段名 类型 [列的约束] [列的注释]</span></pre></td></tr><tr><td class="code"><pre><span class="line">)[描述][注释] <span class="comment"># 创建表。列之间使用逗号(,)隔开，最后一列没有逗号(,)</span></span></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> 表名(...) <span class="comment">#如果表存在则不创建</span></span></pre></td></tr></table></figure>

<p>2.删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 表名; <span class="comment"># 删除表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> 表名; <span class="comment"># 如果表存在则删除</span></span></pre></td></tr></table></figure>

<p>3.修改</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 字段名 类型 [列的约束] [列的注释]; <span class="comment"># 添加新字段</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">MODIFY</span> 字段名 新类型 [列的约束] [列的注释]; <span class="comment"># 修改字段</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">CHANGE</span> 旧字段名 新字段名 类型 [列的约束] [列的注释]; <span class="comment"># 重命名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 字段名; <span class="comment"># 删除字段</span></span></pre></td></tr></table></figure>

<p>4.查看</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span>; <span class="comment"># 查看当前数据库的所有表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span> <span class="keyword">FROM</span> 数据库名; <span class="comment"># 查看指定数据库的所有表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名; <span class="comment"># 查看表结构</span></span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 数据备份与还原</title>
    <url>/2025/02/08/mysql/11/</url>
    <content><![CDATA[<h3 id="全量"><a href="#全量" class="headerlink" title="全量"></a>全量</h3><p>1.全量备份</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mysqldump -u用户 -p密码 数据库名 &gt; 文件.sql # 导出数据库</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysqldump -u用户 -p密码 数据库名 表名<span class="number">1</span> 表名<span class="number">2</span> &gt; 文件.sql # 导出数据库中的部分表</span></pre></td></tr></table></figure>

<p>2.全量恢复</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mysql -u用户 -p密码 数据库名 &lt; 文件.sql # 导入</span></pre></td></tr></table></figure>
<p>注意：<br>迁移过程中，确保源服务器和目标服务器的MySQL版本一致。</p>
<h3 id="手动"><a href="#手动" class="headerlink" title="手动"></a>手动</h3><p>如果误删除数据，也可以通过手动的方式恢复，前提是开启了binlog日志。<br>1.查看是否开启了 binlog 以及它的存储路径，mysql8.0 版本是默认开启</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%log_bin%'</span>;</span></pre></td></tr></table></figure>

<p>2.查看binlog日志文件</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">master</span> <span class="keyword">logs</span>; <span class="comment"># 查看所有日志</span></span></pre></td></tr></table></figure>

<p>3.查看误删除数据的binlog日志位置</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">binlog</span> <span class="keyword">events</span> <span class="keyword">in</span> 日志文件名 [<span class="keyword">from</span> 日志pos <span class="keyword">limit</span> <span class="keyword">offset</span>, <span class="built_in">number</span>]; <span class="comment"># 查看日志内容</span></span></pre></td></tr></table></figure>

<p>4.恢复数据<br>方式一：先导出，再导入</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mysqlbinlog 日志文件（路径+名称） --<span class="built_in">start</span>-position=日志pos --stop-position=日志pos &gt; 文件.sql</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql -u用户 -p密码 [数据库名] &lt; 文件.sql</span></pre></td></tr></table></figure>
<p>方式二：直接导入</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mysqlbinlog 日志文件（路径+名称） --<span class="built_in">start</span>-position=日志pos --stop-position=日志pos | mysql -u用户 -p密码 [数据库名]</span></pre></td></tr></table></figure>
<p>注意：<br>这种方式恢复数据的本质是重新执行一遍日志中的SQL语句。通过剔除误操作的日志，执行剩下的日志，从而达到恢复数据的目的。</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>深入JSX</title>
    <url>/2021/04/05/react/react01/</url>
    <content><![CDATA[<p><strong>JSX 仅仅只是 React.createElement(component, props, …children) 函数的语法糖。</strong></p>
<h3 id="React-createElement"><a href="#React-createElement" class="headerlink" title="React.createElement"></a>React.createElement</h3><blockquote>
<pre><code>React.createElement(
  type,
  props,
  [...children]
)</code></pre><p><code>type</code>: 元素标签名 例如：div<br><code>props</code>: 标签上的属性对象<br><code>[...children]</code>: 子节点</p>
</blockquote>
<ul>
<li><p>使用React.createElement创建React DOM</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">InputText</span>(<span class="params">props</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> input = React.createElement(<span class="string">"input"</span>, &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    key: <span class="string">"xxxKey"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    onChange: <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">console</span>.log(event.target.value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> React.createElement(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"div"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      className: <span class="string">"container_box"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    [input, <span class="string">"文本子节点"</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">  );</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<img src="/images/2021/react_jsx_01.png">
</li>
<li><p>等同于使用jsx创建React DOM</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">InputText</span>(<span class="params">props</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> (</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;input</span></pre></td></tr><tr><td class="code"><pre><span class="line">        onChange=&#123;(event) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="built_in">console</span>.log(event.target.value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      /&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      文本子节点</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;<span class="regexp">/div&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">  );</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&#125;</span></span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="React-cloneElement"><a href="#React-cloneElement" class="headerlink" title="React.cloneElement"></a>React.cloneElement</h3><blockquote>
<pre><code>React.cloneElement(
  element,
  config,
  [...children]
)</code></pre><p><code>element</code>: 用于克隆的React元素<br><code>config</code>: 为新生成的React元素添加新的props，覆盖从中克隆的props<br><code>[...children]</code>: 为新生成的React元素添加新的children，取代从克隆元素的children</p>
</blockquote>
<ul>
<li><p>创建一个列表项组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListItem</span>(<span class="params">props</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> &#123; list, handleDel &#125; = props;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> (</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;ul&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#123;list.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> (</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &lt;li key=&#123;index&#125;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            文章&#123;item&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &lt;button onClick=&#123;() =&gt; &#123;handleDel(index)&#125;&#125;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">              删除</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &lt;<span class="regexp">/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">          &lt;/</span>li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;)&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">  );</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&#125;</span></span></pre></td></tr></table></figure>
</li>
<li><p>创建容器组件，用于包裹组件ListItem</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListContainer</span>(<span class="params">props</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> &#123; children &#125; = props;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> getControlled = <span class="function">(<span class="params">propsType</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      ...propsType,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      handleDel: <span class="function">(<span class="params">index</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(<span class="string">"劫持 handleDel 事件..."</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        propsType.handleDel(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> (</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;div className=<span class="string">"list_container"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;h1&gt;xxx大标题&lt;<span class="regexp">/h1&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">      &#123;React.cloneElement(children, getControlled(children.props))&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  );</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p><strong>React.cloneElement 复制插槽children ReactDOM，并劫持事件handleDel</strong></p>
</li>
<li><p>渲染组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Home</span>(<span class="params">params</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> [list, setList] = useState([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> handleDel = <span class="function">(<span class="params">index</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> arr = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(list));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    arr.splice(index, <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    setList(arr);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> (</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;ListContainer&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;ListItem list=&#123;list&#125; handleDel=&#123;handleDel&#125; /&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;<span class="regexp">/ListContainer&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">  );</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&#125;</span></span></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React redux</title>
    <url>/2021/08/10/react/react02/</url>
    <content><![CDATA[<h3 id="redux介绍"><a href="#redux介绍" class="headerlink" title="redux介绍"></a>redux介绍</h3><blockquote>
<p>redux 为状态管理厂库，主要解决在复杂场景下的数据管理</p>
</blockquote>
<ul>
<li>应用场景<ol>
<li>全局状态管理，针对整个系统做数据管理。</li>
<li>单个路由页面，多级组件通讯</li>
<li>对多个 alive 页面做状态管理</li>
</ol>
</li>
<li>核心思想<img src="/images/2021/redux_01.png"></li>
<li>安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add redux react-redux redux-thunk</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="配置redux"><a href="#配置redux" class="headerlink" title="配置redux"></a>配置redux</h3><ol>
<li><p>createStore 创建仓库</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = createStore(); <span class="comment">// 引入 redux 厂库</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span></pre></td></tr></table></figure></li>
<li><p>Provider 容器提供页面消费（一般在根组件下处理）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">"./store"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> TestPage <span class="keyword">from</span> <span class="string">"./pages/test"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> (</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;Provider store=&#123;store&#125;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;TestPage&gt;<span class="xml"><span class="tag">&lt;/<span class="name">TestPage</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;<span class="regexp">/Provider&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  );</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span></pre></td></tr></table></figure>
</li>
<li><p>仓库配置 state、reducer 及 异步action处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, combineReducers, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">"redux-thunk"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> globalUserinfoState <span class="keyword">from</span> <span class="string">"./states/globalUserinfo"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> globalUserinfoReducer <span class="keyword">from</span> <span class="string">"./reducers/globalUserinfo"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 合并所有redux</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> allReducers = combineReducers(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  globalUserinfo: globalUserinfoReducer,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = createStore(</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 所有的事件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  allReducers,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 所有state</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    globalUserinfo: globalUserinfoState,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 异步处理</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  applyMiddleware(thunk)</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span></pre></td></tr></table></figure>
</li>
<li><p>路由消费</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; changeGlobalUserinfo &#125; <span class="keyword">from</span> <span class="string">"../../store/actions/globalUserinfo"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Test = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> &#123; premissions, changeGlobalUserinfo &#125; = props;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    changeGlobalUserinfo([<span class="string">'123'</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> (</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#123;<span class="built_in">JSON</span>.stringify(premissions)&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;hr /&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;button onClick=&#123;handleClick&#125;&gt;点击测试&lt;<span class="regexp">/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  );</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// state 映射到 props 中</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      premissions: state.globalUserinfo.premissions,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// reducer 映射到 props 中</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">mapDispathToProps</span>(<span class="params">dispatch</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      changeGlobalUserinfo: <span class="function">(<span class="params">payload</span>) =&gt;</span> dispatch(changeGlobalUserinfo(payload)),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">)(Test);</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="redux-Api"><a href="#redux-Api" class="headerlink" title="redux Api"></a>redux Api</h3><blockquote>
<p><strong>state</strong></p>
</blockquote>
<ol>
<li>创建<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> globalUserinfoState = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">premissions: [],</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> globalUserinfoState;</span></pre></td></tr></table></figure></li>
<li>注册<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> globalUserinfoState <span class="keyword">from</span> <span class="string">"./states/globalUserinfo"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = createStore(</span></pre></td></tr><tr><td class="code"><pre><span class="line">  allReducers,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 所有state</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    globalUserinfo: globalUserinfoState,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  applyMiddleware(thunk)</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr></table></figure></li>
<li>映射至页面props获取数据<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// state 映射到 props 中</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      premissions: state.globalUserinfo.premissions,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// reducer 映射到 props 中</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">mapDispathToProps</span>(<span class="params">dispatch</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      changeGlobalUserinfo: <span class="function">(<span class="params">payload</span>) =&gt;</span> dispatch(changeGlobalUserinfo(payload)),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">)(Test);</span></pre></td></tr></table></figure></li>
<li>store 对象全局获取<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">store.getState()</span></pre></td></tr></table></figure>


</li>
</ol>
<blockquote>
<p><strong>reducer</strong></p>
</blockquote>
<ol>
<li>创建<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> initialState <span class="keyword">from</span> <span class="string">"../states/globalUserinfo"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">globalUserinfoReducer</span>(<span class="params">state = initialState, action</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">case</span> <span class="string">"CHANGE_USERINFO"</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ...state,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        premissions: action.payload,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">default</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> state;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> globalUserinfoReducer;</span></pre></td></tr></table></figure></li>
<li>注册<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> globalUserinfoReducer <span class="keyword">from</span> <span class="string">"./reducers/globalUserinfo"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 合并所有redux</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> allReducers = combineReducers(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  globalUserinfo: globalUserinfoReducer,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = createStore(</span></pre></td></tr><tr><td class="code"><pre><span class="line">  allReducers, <span class="comment">// 所有的事件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123; <span class="attr">globalUserinfo</span>: globalUserinfoState &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  applyMiddleware(thunk)</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr></table></figure></li>
<li>映射至页面props获取数据<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// state 映射到 props 中</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      premissions: state.globalUserinfo.premissions,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// reducer 映射到 props 中</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">mapDispathToProps</span>(<span class="params">dispatch</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// dispatch(action())</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      changeGlobalUserinfo: <span class="function">(<span class="params">payload</span>) =&gt;</span> dispatch(changeGlobalUserinfo(payload)),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">)(Test);</span></pre></td></tr></table></figure></li>
<li>store 对象全局获取<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">store.dispatch(action(<span class="string">'payload'</span>));</span></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p><strong>action</strong></p>
</blockquote>
<ol>
<li><p>创建</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CHANGE_USERINFO = <span class="string">"CHANGE_USERINFO"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 同步方式</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeGlobalUserinfo</span>(<span class="params">payload</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    type: CHANGE_USERINFO,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    payload,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; changeGlobalUserinfo &#125;;</span></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CHANGE_USERINFO = <span class="string">"CHANGE_USERINFO"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 异步处理方式</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeGlobalUserinfo</span>(<span class="params">payload</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> (dispatch) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        dispatch(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          type: CHANGE_USERINFO,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          payload,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        resolve();</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;, <span class="number">3000</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; changeGlobalUserinfo &#125;;</span></pre></td></tr></table></figure></li>
<li><p>action 触发<br>action由dispatch主动触发，不需要在store中注册</p>
</li>
</ol>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 事务</title>
    <url>/2025/02/07/mysql/09/</url>
    <content><![CDATA[<h3 id="手动提交事务"><a href="#手动提交事务" class="headerlink" title="手动提交事务"></a>手动提交事务</h3><p>通过 set autocommit = 0 | false; 关闭事务自动提交，然后手动执行 commit 或者 rollback。<br>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> autocommit = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">sql</span></pre></td></tr><tr><td class="code"><pre><span class="line">sql</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">commit</span> / <span class="keyword">rollback</span>;</span></pre></td></tr></table></figure>
<p>注意：<br>关闭自动提交后，直到执行 COMMIT 或 ROLLBACK 前，所有的 SQL 语句都会被视为一个事务的一部分。<br>commit 提交事务，将所有更改永久保存到数据库中。<br>rollback 回滚事务，撤销自上次 commit 或 rollback 后执行的所有更改。<br>设置 set autocommit = 1 | true; 可以重新开启自动提交。<br>通过 set autocommit 设置事务的提交方式，只适用于当前会话。<br>通过 show variables like ‘autocommit’; 可以查看当前会话的自动提交状态。</p>
<h3 id="开启独立事务"><a href="#开启独立事务" class="headerlink" title="开启独立事务"></a>开启独立事务</h3><p>通过 start transaction; 开启一个独立的事务，然后执行一系列的 SQL 语句，最后通过 COMMIT 或 ROLLBACK 来提交或回滚事务。<br>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">sql</span></pre></td></tr><tr><td class="code"><pre><span class="line">sql</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">commit</span> / <span class="keyword">rollback</span>;</span></pre></td></tr></table></figure>
<p>注意：<br>不管是否关闭自动提交，都可以通过 start transaction 开启一个独立的事务。</p>
<h3 id="事务特性"><a href="#事务特性" class="headerlink" title="事务特性"></a>事务特性</h3><p>事务不支持 DDL 语句（如 CREATE TABLE、ALTER TABLE 等），因为这些操作会立即生效，无法回滚。</p>
<h3 id="事务隔离"><a href="#事务隔离" class="headerlink" title="事务隔离"></a>事务隔离</h3><p>隔离作用：<br>避免并发事务之间的干扰，保证数据的一致性。<br>隔离级别：<br>read-uncommitted（读未提交）：最低的隔离级别，会出现 脏读 不可能重复读 幻读。<br>read-committed（读已提交）：避免了脏读，可能出现 不可重复读 和幻读。<br>repeatable-read（可重复读）：避免了脏读和不可重复读，可能出现幻读。<br>serializable（可串行化）：最高的隔离级别，避免了脏读、不可重复读和幻读。<br>隔离问题：<br>脏读：一个事务读取了另一个未提交的事务的数据（真实错误）。<br>不可重复读：一个事物读取了另一个事务提交的修改数据（不符合一致性原则，不是数据错误）。<br>幻读：一个事务读取了另一个事务提交的插入数据（不符合一致性原则，不是数据错误）。<br>修改查看语法：<br>select @@transaction_isolation;<br>set transaction_isolation = 隔离级别;<br>总结：<br>隔离级别越高，数据越安全，性能越低。建议设置隔离级别为 read-committed。</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>React生命周期</title>
    <url>/2021/03/08/react/react06/</url>
    <content><![CDATA[<h3 id="React生命周期旧"><a href="#React生命周期旧" class="headerlink" title="React生命周期旧"></a>React生命周期旧</h3>  <img src="/images/2021/react_life_01.png">

<h3 id="React生命周期新"><a href="#React生命周期新" class="headerlink" title="React生命周期新"></a>React生命周期新</h3>  <img src="/images/2021/react_life_02.png">]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 高级查询</title>
    <url>/2025/02/04/mysql/05/</url>
    <content><![CDATA[<h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><p>分组是将数据分成若干个组，并对每个组进行单独的查询，最终统计的是组的特性和数据（分组列，聚合函数）。<br>语法：<br>  <code>group by</code> 分组列, 分组列, … <code>hanving</code> 分组后进行比较。<br>提示：<br>  分组查询只能查询<strong>分组字段</strong>和<strong>聚合函数</strong>。<br>  <code>having</code>是分组后的条件，<code>where</code>是分组前的条件。<br>  <code>having</code>只能出现在<code>group by</code>后面，<code>where</code>可以出现在任何位置。<br>  <code>having</code>通常比较的是聚合函数，<code>where</code>可以是任何参数比较。<br>  <code>having</code>可以引用别名，<code>where</code>不可以，因为<code>having</code>是在分组之后执行，已经有了查询结果。</p>
<h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><p>语法：<br>  <code>order by</code> 列名 <code>asc</code>/<code>desc</code>, 列名 <code>asc</code>/<code>desc</code>, …<br>提示：<br>  <code>asc</code>升序 从小到大，<code>desc</code>降序 从大到小。<br>  默认是<code>asc</code>，可以不写。<br>  <code>order by</code>后面可以有多个列，按照第一个排序，如果相同则按第二个排序，以此类推。</p>
<h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>语法：<br>  <code>limit</code> 起始索引, 每页条数<br>提示：<br>  起始索引可以省略，省略默认为0。<br>  <code>limit</code>影响的是查询结果，通常用在查询的最后。</p>
<h3 id="查询的执行流程"><a href="#查询的执行流程" class="headerlink" title="查询的执行流程"></a>查询的执行流程</h3><p>关键字书写的顺序：<br>  select -&gt; from -&gt; where -&gt; group by -&gt; having -&gt; order by -&gt; limit<br>关键字的执行顺序：<br>  from -&gt; where -&gt; group by -&gt; having -&gt; select -&gt; order by -&gt; limit<br>提示：<br>  mysql8.0+版本存在优化，使 group by 、having 可以使用 select 产生的列（别名）。</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-cli4</title>
    <url>/2020/10/25/configuration/configuration08/</url>
    <content><![CDATA[<h3 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h3><ol>
<li>在项目根目录中新建.env.* 创建环境变量的配置文件<img src="/images/2020/vuecli4_1.png" style="width:240px;margin-left:0" /></li>
<li>在环境变量的配置文件中 可以设置以VUE_APP_ 开头的变量，在代码中可以通过 process.env.VUE_APP_ 访问。此外始终可用的还有两个特殊的变量NODE_ENV 和BASE_URL。<img src="/images/2020/vuecli4_2.png" style="width:240px;margin-left:0" /></li>
<li>package.json 里的 scripts 命令行，通过配置 –mode xxx 来执行不同环境的配置文件<img src="/images/2020/vuecli4_3.png" style="width:480px;margin-left:0" /></li>
<li>为了修改方便，一般还会配置config文件<img src="/images/2020/vuecli4_4.png" style="width:240px;margin-left:0" />
- config/index.js
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 根据环境引入不同配置 process.env.VUE_APP_ENV</span></pre></td></tr><tr><td class="code"><pre><span class="line">const config &#x3D; require(&#39;.&#x2F;env.&#39; + process.env.VUE_APP_ENV)</span></pre></td></tr><tr><td class="code"><pre><span class="line">module.exports &#x3D; config</span></pre></td></tr></table></figure>
- env.* .js
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  baseUrl: &#39;http:&#x2F;&#x2F;localhost:8080&#39;, &#x2F;&#x2F; 项目地址</span></pre></td></tr><tr><td class="code"><pre><span class="line">  baseApi: &#39;https:&#x2F;&#x2F;test.xxx.com&#x2F;api&#39;, &#x2F;&#x2F; 本地api请求地址</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; todo</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
- 项目中使用
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 根据环境不同引入不同baseApi地址</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; baseApi &#125; from &#39;@&#x2F;config&#39;</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="vue-config-js-基础配置"><a href="#vue-config-js-基础配置" class="headerlink" title="vue.config.js 基础配置"></a>vue.config.js 基础配置</h3><ul>
<li>根目录下创建 vue.config.js<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  publicPath: &#39;.&#x2F;&#39;, &#x2F;&#x2F; 署应用包时的基本 URL。 </span></pre></td></tr><tr><td class="code"><pre><span class="line">  outputDir: &#39;dist&#39;, &#x2F;&#x2F;  生产环境构建文件的目录</span></pre></td></tr><tr><td class="code"><pre><span class="line">  assetsDir: &#39;static&#39;, &#x2F;&#x2F;  outputDir的静态资源(js、css、img、fonts)目录</span></pre></td></tr><tr><td class="code"><pre><span class="line">  lintOnSave: false,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  productionSourceMap: false, &#x2F;&#x2F; 如果你不需要生产环境的 source map，可以将其设置为 false 以加速生产环境构建。</span></pre></td></tr><tr><td class="code"><pre><span class="line">  devServer: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    port: 8080, &#x2F;&#x2F; 端口号</span></pre></td></tr><tr><td class="code"><pre><span class="line">    open: false, &#x2F;&#x2F; 启动后打开浏览器</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="配置-proxy-代理"><a href="#配置-proxy-代理" class="headerlink" title="配置 proxy 代理"></a>配置 proxy 代理</h3><ul>
<li>解决项目中的跨域问题 在 vue.config.js中 配置 proxy<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  devServer: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; ....</span></pre></td></tr><tr><td class="code"><pre><span class="line">    proxy: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F;配置跨域</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#39;&#x2F;api&#39;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        target: &#39;https:&#x2F;&#x2F;test.xxx.com&#39;, &#x2F;&#x2F; 接口的域名</span></pre></td></tr><tr><td class="code"><pre><span class="line">        changOrigin: true, &#x2F;&#x2F; 开启代理，在本地创建一个虚拟服务端</span></pre></td></tr><tr><td class="code"><pre><span class="line">        pathRewrite: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#39;^&#x2F;api&#39;: &#39;&#x2F;&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="配置-externals-引入-cdn"><a href="#配置-externals-引入-cdn" class="headerlink" title="配置 externals 引入 cdn"></a>配置 externals 引入 cdn</h3><blockquote>
<p>cdn 首屏加载优化使用注意事项<br>    1. 项目中使用的是公共 CDN 不稳定<br>    2. 尽量使用同一个域名，域名解析也是需要时间</p>
</blockquote>
<ol>
<li>排除包文件，设置cdn<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const IS_PROD &#x3D; [&#39;production&#39;].includes(process.env.NODE_ENV)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; externals</span></pre></td></tr><tr><td class="code"><pre><span class="line">const externals &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  vue: &#39;Vue&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#39;vue-router&#39;: &#39;VueRouter&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  vuex: &#39;Vuex&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; CDN外链，会插入到index.html中</span></pre></td></tr><tr><td class="code"><pre><span class="line">const cdn &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 开发环境</span></pre></td></tr><tr><td class="code"><pre><span class="line">  dev: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    css: [],</span></pre></td></tr><tr><td class="code"><pre><span class="line">    js: []</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 生产环境</span></pre></td></tr><tr><td class="code"><pre><span class="line">  build: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    css: [],</span></pre></td></tr><tr><td class="code"><pre><span class="line">    js: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&#x2F;dist&#x2F;vue.min.js&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue-router@3.1.5&#x2F;dist&#x2F;vue-router.min.js&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vuex@3.1.2&#x2F;dist&#x2F;vuex.min.js&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  configureWebpack: config &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 为生产环境修改配置...</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (IS_PROD) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; externals</span></pre></td></tr><tr><td class="code"><pre><span class="line">      config.externals &#x3D; externals</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  chainWebpack: config &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">    * 添加CDN参数到htmlWebpackPlugin配置中</span></pre></td></tr><tr><td class="code"><pre><span class="line">    *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    config.plugin(&#39;html&#39;).tap(args &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      if (IS_PROD) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        args[0].cdn &#x3D; cdn.build</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        args[0].cdn &#x3D; cdn.dev</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      return args</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>在 public/index.html 中注入配置的cdn<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 使用CDN的CSS文件 --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;% for (var i in</span></pre></td></tr><tr><td class="code"><pre><span class="line">  htmlWebpackPlugin.options.cdn&amp;&amp;htmlWebpackPlugin.options.cdn.css) &#123; %&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;link href&#x3D;&quot;&lt;%&#x3D; htmlWebpackPlugin.options.cdn.css[i] %&gt;&quot; rel&#x3D;&quot;preload&quot; as&#x3D;&quot;style&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;link href&#x3D;&quot;&lt;%&#x3D; htmlWebpackPlugin.options.cdn.css[i] %&gt;&quot; rel&#x3D;&quot;stylesheet&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;% &#125; %&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;!-- 使用CDN加速的JS文件，配置在vue.config.js下 --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;% for (var i in</span></pre></td></tr><tr><td class="code"><pre><span class="line">  htmlWebpackPlugin.options.cdn&amp;&amp;htmlWebpackPlugin.options.cdn.js) &#123; %&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;script src&#x3D;&quot;&lt;%&#x3D; htmlWebpackPlugin.options.cdn.js[i] %&gt;&quot;&gt;&lt;&#x2F;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;% &#125; %&gt;</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="添加-IE-兼容"><a href="#添加-IE-兼容" class="headerlink" title="添加 IE 兼容"></a>添加 IE 兼容</h3><ol>
<li>使用 core-js 和 regenerator-runtime<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i --save core-js regenerator-runtime</span></pre></td></tr></table></figure></li>
<li>main.js 中添加<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;core-js&#x2F;stable&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#39;regenerator-runtime&#x2F;runtime&#39;</span></pre></td></tr></table></figure></li>
<li>配置 babel.config.js<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const plugins &#x3D; []</span></pre></td></tr><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  presets: [[&#39;@vue&#x2F;cli-plugin-babel&#x2F;preset&#39;, &#123;useBuiltIns: &#39;usage&#39;, corejs: 3&#125;]],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  plugins</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


</li>
</ol>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>React项目搭建</title>
    <url>/2021/09/23/react/react08/</url>
    <content><![CDATA[<h3 id="基本模块"><a href="#基本模块" class="headerlink" title="基本模块"></a>基本模块</h3><img src="/images/2021/react_project01.png">
      通过基本的脚手架及环境配置、项目构建配置、数据管理、请求拦截器、配置路由及鉴权...构建基本的项目框架

<h3 id="脚手架模板"><a href="#脚手架模板" class="headerlink" title="脚手架模板"></a>脚手架模板</h3><ul>
<li><p>构建基本ts react模板</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npx create-react-app my-app --template typescript</span></pre></td></tr></table></figure></li>
<li><p>ts 配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;compilerOptions&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;target&quot;: &quot;es5&quot;, &#x2F;&#x2F;编译后目标js版本</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;lib&quot;: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;dom&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;dom.iterable&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;esnext&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;noImplicitAny&quot;: true, &#x2F;&#x2F;不需要显示的声明变量any</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;allowJs&quot;: true, &#x2F;&#x2F;允许混合编译js文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;skipLibCheck&quot;: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;esModuleInterop&quot;: true, &#x2F;&#x2F;允许使用commonJs的方式import默认文件,import React from &#39;react</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;allowSyntheticDefaultImports&quot;: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;strict&quot;: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;forceConsistentCasingInFileNames&quot;: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;noFallthroughCasesInSwitch&quot;: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;module&quot;: &quot;esnext&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;moduleResolution&quot;: &quot;node&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;resolveJsonModule&quot;: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;isolatedModules&quot;: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;noEmit&quot;: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;jsx&quot;: &quot;react-jsx&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;include&quot;: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;src&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li><p>global.d.ts<br>定义全局变量、函数、接口</p>
</li>
<li><p>react-app-env.d.ts<br>项目编译时将会根据tsconfig.json中include指定的目录去找代码所需要的类型声明文件，而react-app-env.d.ts会告诉编译器含有哪些类型声明，里面含有一些常用的类型声明，比如react、react-dom的一些API类型声明，图片、样式模块类型声明等等</p>
</li>
</ul>
<h3 id="项目模块"><a href="#项目模块" class="headerlink" title="项目模块"></a>项目模块</h3><p>  <a href="https://xiaoqi0123.gitee.io/2021/08/10/react/react02/" target="_blank" rel="noopener">全局数据管理-redux</a><br>  <a href="https://xiaoqi0123.gitee.io/2021/09/23/react/react09/" target="_blank" rel="noopener">react-router react-router-dom配置路由及鉴权</a><br>  <a href="https://xiaoqi0123.gitee.io/2021/09/26/react/react10/" target="_blank" rel="noopener">customize-cra项目构建配置</a><br>  <a href="https://xiaoqi0123.gitee.io/2021/09/26/react/react11/" target="_blank" rel="noopener">request封装</a></p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>Recoil</title>
    <url>/2021/05/23/react/react07/</url>
    <content><![CDATA[<blockquote>
<p><strong>React 的状态管理库 Recoil。同 vuex redux … 功能类型对全局数据状态进行管理。</strong></p>
</blockquote>
<h3 id="下载与文档"><a href="#下载与文档" class="headerlink" title="下载与文档"></a>下载与文档</h3><ul>
<li>安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install recoil</span></pre></td></tr></table></figure></li>
<li>recoil 文档地址<br><a href="https://www.recoiljs.cn/docs/introduction/getting-started" target="_blank" rel="noopener">https://www.recoiljs.cn/docs/introduction/getting-started</a></li>
</ul>
<h3 id="RecoilRoot"><a href="#RecoilRoot" class="headerlink" title="RecoilRoot"></a>RecoilRoot</h3><ul>
<li>RecoilRoot <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;RecoilRoot, atom, selector, useRecoilState, useRecoilValue&#125; <span class="keyword">from</span> <span class="string">'recoil'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> (</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;RecoilRoot&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;CharacterCounter /&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;<span class="regexp">/RecoilRoot&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">  );</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&#125;</span></span></pre></td></tr></table></figure>
初始化recoil需要将RecoilRoot组件放在，所有组件树的父节点上，最好将其放在根组件中。</li>
</ul>
<h3 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h3><blockquote>
<p>atom 代表一个状态</p>
</blockquote>
<ul>
<li>创建一个count的atom<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; atom &#125; from &quot;recoil&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export const count &#x3D; atom(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  key: &quot;test_count&quot;, &#x2F;&#x2F; key 为 atom 的唯一值</span></pre></td></tr><tr><td class="code"><pre><span class="line">  default: 0, &#x2F;&#x2F; 默认值</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure></li>
<li>useRecoilValue获取atom count<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; useRecoilValue &#125; from &quot;recoil&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; count &#125; from &quot;..&#x2F;..&#x2F;store&#x2F;test&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">function Home(props: HomeProps) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const num &#x3D; useRecoilValue(count);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return &lt;div&gt;&#123;num&#125;&lt;&#x2F;div&gt;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default Home;</span></pre></td></tr></table></figure></li>
<li>useRecoilState类似于React hooks 的useState，可以对count进行读取和修改<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; useRecoilState &#125; from &quot;recoil&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; count &#125; from &quot;..&#x2F;..&#x2F;store&#x2F;test&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">function Home(props: HomeProps) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const [num, setNum] &#x3D; useRecoilState(count);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return (</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;div onClick&#x3D;&#123;() &#x3D;&gt; setNum(num+1)&#125;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#123;num&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  );</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default Home;</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h3><blockquote>
<p>selector 代表一个派生状态。即计算属性，由其他的值计算得到一个新的值（selector）。</p>
</blockquote>
<ul>
<li>根据count（atom）创建一个countSince的selector<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; selector &#125; from &quot;recoil&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; count &#125; from &quot;.&#x2F;atoms&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export const countSince &#x3D; selector(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  key: &quot;test_count_since&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  get: (&#123; get &#125;) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return get(count) + 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure></li>
<li>useRecoilValue获取selector countSince<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; useRecoilState, useRecoilValue &#125; from &quot;recoil&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; count, countSince &#125; from &quot;..&#x2F;..&#x2F;store&#x2F;test&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">function Home(props: HomeProps) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const [num, setNum] &#x3D; useRecoilState(count);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const numSince &#x3D; useRecoilValue(countSince);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return (</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;div onClick&#x3D;&#123;() &#x3D;&gt; setNum(num + 1)&#125;&gt;&#123;num&#125;&lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;div&gt;&#123;numSince&#125;&lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  );</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default Home;</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="自定义hooks"><a href="#自定义hooks" class="headerlink" title="自定义hooks"></a>自定义hooks</h3><blockquote>
<p>同其他自定义hooks一样，实现对逻辑的抽离，状态派发。</p>
</blockquote>
<ul>
<li>创建一个 useCountAdd 自定义hooks<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; useRecoilState &#125; from &quot;recoil&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; count &#125; from &quot;.&#x2F;atoms&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export const useCountAdd &#x3D; () &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const [num, setNum] &#x3D; useRecoilState(count);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return (addNumber: number) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    setNum(num + addNumber);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure></li>
<li>使用 useCountAdd 对 count 进行自增<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; useRecoilValue &#125; from &quot;recoil&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; count, useCountAdd &#125; from &quot;..&#x2F;..&#x2F;store&#x2F;test&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">function Home(props: HomeProps) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const num &#x3D; useRecoilValue(count);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const numAdd &#x3D; useCountAdd();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return &lt;div onClick&#x3D;&#123;() &#x3D;&gt; numAdd(1)&#125;&gt;&#123;num&#125;&lt;&#x2F;div&gt;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default Home;</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h3><blockquote>
<p>同其他状态管理库一样，由于状态缓存在页面，当页面被初始化时。状态也会被清空</p>
</blockquote>
<ul>
<li>本地local持久化<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; DefaultValue, AtomEffect &#125; from &quot;recoil&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export const localStorageEffect &#x3D; (key: string): AtomEffect&lt;any&gt; &#x3D;&gt; (&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  setSelf,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onSet,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const savedValue &#x3D; localStorage.getItem(key);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  if (savedValue !&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    setSelf(JSON.parse(savedValue));</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onSet((newValue: any, oldValue: any) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (newValue instanceof DefaultValue) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      localStorage.removeItem(key);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      localStorage.setItem(key, JSON.stringify(newValue));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure></li>
<li>count（atom）设置持久化<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; atom &#125; from &quot;recoil&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; localStorageEffect &#125; from &quot;..&#x2F;effects&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export const count &#x3D; atom(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  key: &quot;test_count&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  default: 0,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  effects_UNSTABLE: [localStorageEffect(&quot;test_count&quot;)],</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React配置路由及鉴权</title>
    <url>/2021/09/23/react/react09/</url>
    <content><![CDATA[<h3 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h3><ul>
<li>安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add react-router react-router-dom</span></pre></td></tr></table></figure></li>
<li>实现<img src="/images/2021/react_router01.png">


</li>
</ul>
<h3 id="参数配置路由"><a href="#参数配置路由" class="headerlink" title="参数配置路由"></a>参数配置路由</h3><ul>
<li>约定路由数据结构<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface RouteItemMetaType &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  permissions: string[]; &#x2F;&#x2F; 路由权限</span></pre></td></tr><tr><td class="code"><pre><span class="line">  hide?: boolean; &#x2F;&#x2F; 是否隐藏菜单</span></pre></td></tr><tr><td class="code"><pre><span class="line">  [key: string]: any;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">interface RouteItemType &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  path: string; &#x2F;&#x2F; 路由路径</span></pre></td></tr><tr><td class="code"><pre><span class="line">  component?: LazyExoticComponent&lt;any&gt;; &#x2F;&#x2F; lazy 组件</span></pre></td></tr><tr><td class="code"><pre><span class="line">  render?: () &#x3D;&gt; any; &#x2F;&#x2F; route render</span></pre></td></tr><tr><td class="code"><pre><span class="line">  routes?: RouteItemType[]; &#x2F;&#x2F; 二级菜单</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name?: string; &#x2F;&#x2F; 路由名称</span></pre></td></tr><tr><td class="code"><pre><span class="line">  exact?: boolean;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  strict?: boolean;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  meta?: RouteItemMetaType;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  [key: string]: any;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const routes: RouteItemType[] &#x3D; [</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    path: &quot;&#x2F;manage&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    component: lazy(() &#x3D;&gt; import(&quot;..&#x2F;pages&#x2F;manage&#x2F;ManageLayout&quot;)),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    routes: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        path: &quot;&#x2F;manage&#x2F;user&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        title: &quot;用户&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        meta: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          permissions: [&quot;KEY1&quot;, &quot;KEY2&quot;],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        component: lazy(() &#x3D;&gt; import(&quot;..&#x2F;pages&#x2F;manage&#x2F;user&#x2F;UserLayout&quot;)),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        routes: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            path: &quot;&#x2F;manage&#x2F;user&#x2F;index&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            title: &quot;用户&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            component: lazy(() &#x3D;&gt; import(&quot;..&#x2F;pages&#x2F;manage&#x2F;user&#x2F;index&#x2F;index&quot;)),</span></pre></td></tr><tr><td class="code"><pre><span class="line">            meta: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">              permissions: [&quot;KEY1&quot;],</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">];</span></pre></td></tr></table></figure></li>
<li>根据路由配置参数动态生成路由树<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; Suspense &#125; from &quot;react&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; Switch, Route &#125; from &quot;react-router-dom&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">function RenderRoutes(props: any) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const &#123; routes, extraProps &#x3D; &#123;&#125;, switchProps &#x3D; &#123;&#125; &#125; &#x3D; props;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const mapFunc &#x3D; (routes: any) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return routes.map((route: any) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      if (route.routes &amp;&amp; route.routes.length &gt; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 存在二级菜单</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return (</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &lt;Route</span></pre></td></tr><tr><td class="code"><pre><span class="line">            key&#x3D;&#123;route.path&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            path&#x3D;&#123;route.path&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            exact&#x3D;&#123;route.exact&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            strict&#x3D;&#123;route.strict&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            render&#x3D;&#123;() &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">              return (</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &lt;Suspense fallback&#x3D;&#123;null&#125;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                  &lt;Switch&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#123;React.createElement(route.component,&#123;&#125;,mapFunc(route.routes))&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                  &lt;&#x2F;Switch&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &lt;&#x2F;Suspense&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">              );</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 只存在一个路由</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return (</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &lt;Route</span></pre></td></tr><tr><td class="code"><pre><span class="line">            key&#x3D;&#123;route.path&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            path&#x3D;&#123;route.path&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            exact&#x3D;&#123;route.exact&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            strict&#x3D;&#123;route.strict&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            render&#x3D;&#123;(props) &#x3D;&gt; (</span></pre></td></tr><tr><td class="code"><pre><span class="line">              &lt;Suspense fallback&#x3D;&#123;null&#125;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#123;route.render ? </span></pre></td></tr><tr><td class="code"><pre><span class="line">                (route.render(&#123; ...props, ...extraProps, route: route &#125;)) : </span></pre></td></tr><tr><td class="code"><pre><span class="line">                (&lt;route.component &#123;...props&#125; &#123;...extraProps&#125; route&#x3D;&#123;route&#125;&gt;&lt;&#x2F;route.component&gt;)&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">              &lt;&#x2F;Suspense&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            )&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return routes ? &lt;Switch &#123;...switchProps&#125;&gt;&#123;mapFunc(routes)&#125;&lt;&#x2F;Switch&gt; : null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default RenderRoutes;</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="鉴权配置"><a href="#鉴权配置" class="headerlink" title="鉴权配置"></a>鉴权配置</h3><ul>
<li>鉴权流程<img src="/images/2021/react_router02.png"></li>
<li>登录鉴权<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; useMemo &#125; from &#39;react&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; connect &#125; from &#39;react-redux&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; Redirect &#125; from &#39;react-router-dom&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const routeWhiteList &#x3D; [&#39;&#x2F;login&#39;, &#39;&#x2F;404&#39;, &#39;&#x2F;test&#39;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">const LoginAuth &#x3D; props &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const &#123; token, path, children &#125; &#x3D; props</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const isLogin &#x3D; useMemo(() &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (token) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      return true</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; else if (routeWhiteList.includes(path)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      return true</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      return false</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;, [path, token])</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return isLogin ? &lt;&gt;&#123;children&#125;&lt;&#x2F;&gt; : &lt;Redirect to&#x3D;&quot;&#x2F;login&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default connect(function mapStateToProps(state: any) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    token: state.globalUserinfo.token</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)(LoginAuth)</span></pre></td></tr></table></figure></li>
<li>路由鉴权<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; useMemo &#125; from &#39;react&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; connect &#125; from &#39;react-redux&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; Redirect &#125; from &#39;react-router-dom&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const RouterAuth &#x3D; props &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const &#123; authKeys, permissions &#x3D; [], children &#125; &#x3D; props</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const isPermissions &#x3D; useMemo(() &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 路由中不配置权限，默认存在权限</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (!authKeys || authKeys.length &#x3D;&#x3D;&#x3D; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      return true</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; 权限校验</span></pre></td></tr><tr><td class="code"><pre><span class="line">      return permissions.some(role &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return authKeys.includes(role)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;, [authKeys, permissions])</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return isPermissions ? &lt;&gt;&#123;children&#125;&lt;&#x2F;&gt; : &lt;Redirect to&#x3D;&quot;&#x2F;404&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default connect(function mapStateToProps(state: any) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    permissions: state.globalUserinfo.premissions</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)(RouterAuth)</span></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>request封装</title>
    <url>/2021/09/26/react/react11/</url>
    <content><![CDATA[<h3 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h3><ul>
<li>axios 安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add axios</span></pre></td></tr></table></figure></li>
<li>流程结构<img src="/images/2021/react_request01.png"></li>
<li>功能实现<br>1.接口重复请求配置<br>2.请求loading配置<br>3.数据返回配置<br>4.异常处理</li>
</ul>
<h3 id="axios实例配置"><a href="#axios实例配置" class="headerlink" title="axios实例配置"></a>axios实例配置</h3><ul>
<li>基本配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function request(axiosConfig, customOptions) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; axios参数配置</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const service &#x3D; axios.create(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    baseURL: config.baseApi, &#x2F;&#x2F; 设置统一的请求前缀</span></pre></td></tr><tr><td class="code"><pre><span class="line">    timeout: 6000, &#x2F;&#x2F; 设置统一的超时时长</span></pre></td></tr><tr><td class="code"><pre><span class="line">    headers: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;Content-Type&quot;: &quot;application&#x2F;json&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 自定义配置</span></pre></td></tr><tr><td class="code"><pre><span class="line">  let custom_options &#x3D; Object.assign(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      repeat_request_cancel: true, &#x2F;&#x2F; 是否开启取消重复请求, 默认为 true</span></pre></td></tr><tr><td class="code"><pre><span class="line">      loading: false, &#x2F;&#x2F; 是否开启loading层效果, 默认为false</span></pre></td></tr><tr><td class="code"><pre><span class="line">      reduct_data_format: true, &#x2F;&#x2F; 是否开启简洁的数据结构响应, 默认为true</span></pre></td></tr><tr><td class="code"><pre><span class="line">      error_message_show: true, &#x2F;&#x2F; 是否开启接口错误信息展示,默认为true</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    customOptions</span></pre></td></tr><tr><td class="code"><pre><span class="line">  );</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 请求拦截器</span></pre></td></tr><tr><td class="code"><pre><span class="line">  service.interceptors.request.use(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    (config) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; 请求前若当前请求存在先移除</span></pre></td></tr><tr><td class="code"><pre><span class="line">      return config;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    (error) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      return Promise.reject(error);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  );</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 响应拦截器</span></pre></td></tr><tr><td class="code"><pre><span class="line">  service.interceptors.response.use(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    (response) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      return custom_options.reduct_data_format ? response.data : response; &#x2F;&#x2F; 根据条件获取参数信息</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    (error) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      return Promise.reject(error);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  );</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  return service(axiosConfig);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default request;</span></pre></td></tr></table></figure>
封装请求方法request，一共分为4个模块axios参数配置、自定义功能配置、请求拦截器、响应拦截器。</li>
</ul>
<h3 id="防止重复请求"><a href="#防止重复请求" class="headerlink" title="防止重复请求"></a>防止重复请求</h3><ul>
<li>基本流程<img src="/images/2021/react_request02.png"></li>
<li>pendingMap<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import axios from &quot;axios&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const pendingMap &#x3D; new Map();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 生成每个请求唯一的键</span></pre></td></tr><tr><td class="code"><pre><span class="line">function getPendingKey(config) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  let &#123; url, method, params, data &#125; &#x3D; config;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  if (typeof data &#x3D;&#x3D;&#x3D; &quot;string&quot;) data &#x3D; JSON.parse(data); &#x2F;&#x2F; response里面返回的config.data是个字符串对象</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return [url, method, JSON.stringify(params), JSON.stringify(data)].join(&quot;&amp;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 储存每个请求唯一值, 也就是cancel()方法, 用于取消请求</span></pre></td></tr><tr><td class="code"><pre><span class="line">export function addPending(config) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const pendingKey &#x3D; getPendingKey(config);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  config.cancelToken &#x3D;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    config.cancelToken ||</span></pre></td></tr><tr><td class="code"><pre><span class="line">    new axios.CancelToken((cancel) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      if (!pendingMap.has(pendingKey)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        pendingMap.set(pendingKey, cancel);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 删除重复的请求</span></pre></td></tr><tr><td class="code"><pre><span class="line">export function removePending(config) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const pendingKey &#x3D; getPendingKey(config);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  if (pendingMap.has(pendingKey)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    const cancelToken &#x3D; pendingMap.get(pendingKey);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    cancelToken(pendingKey);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    pendingMap.delete(pendingKey);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<a href="https://gitee.com/xiaoqi0123/react-pc-template/blob/master/src/api/lib/pending.ts" target="_blank" rel="noopener">pendingMap 数组结构实现</a></li>
</ul>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>customize-cra项目配置</title>
    <url>/2021/09/23/react/react10/</url>
    <content><![CDATA[<h3 id="基本安装配置"><a href="#基本安装配置" class="headerlink" title="基本安装配置"></a>基本安装配置</h3><ul>
<li>安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add react-app-rewired customize-cra -D</span></pre></td></tr></table></figure></li>
<li>修改package.json的启动配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;start&quot;: &quot;react-app-rewired start&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;build&quot;: &quot;react-app-rewired build&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;test&quot;: &quot;react-app-rewired test&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;eject&quot;: &quot;react-scripts eject&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>根目录下创建config-overrides.js文件<br>主要的打包构建配置文件，覆盖webpack的配置<br/>
<br/></li>
<li>文档地址<br><a href="https://github.com/arackaf/customize-cra/blob/master/api.md#setwebpackoptimizationsplitchunkstarget" target="_blank" rel="noopener">customize-cra配置</a></li>
</ul>
<h3 id="常规配置"><a href="#常规配置" class="headerlink" title="常规配置"></a>常规配置</h3><ul>
<li>addWebpackAlias 别名配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const path &#x3D; require(&#39;path&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">const resolve &#x3D; dir &#x3D;&gt; path.join(__dirname, dir)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">addWebpackAlias(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#39;@&#x2F;&#39;: resolve(&#39;src&#39;),</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure></li>
<li>fixBabelImports 按需加载<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 包分析工具</span></pre></td></tr><tr><td class="code"><pre><span class="line">yarn add babel-plugin-import -D</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 按需引入 antd *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">fixBabelImports(&#39;antd&#39;, &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">  libraryDirectory: &#39;es&#39;, </span></pre></td></tr><tr><td class="code"><pre><span class="line">  style: &#39;css&#39; </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;),</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 按需引入 antd-mobile *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">fixBabelImports(&#39;import&#39;, &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  libraryName: &#39;antd-mobile&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  style: &#39;css&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;),</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 按需引入lodash *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">fixBabelImports(&quot;lodash&quot;, &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  libraryDirectory: &quot;&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  camel2DashComponentName: false</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;),</span></pre></td></tr></table></figure></li>
<li>移动适配<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add postcss-px2rem-exclude lib-flexible</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(config, env) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 重写postcss</span></pre></td></tr><tr><td class="code"><pre><span class="line">  rewirePostcss(config, &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plugins: ctx &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      const isNormalDpr &#x3D; &#x2F;\.css$&#x2F;.test(ctx.resourcePath) &amp;&amp; &#x2F;\bantd-mobile\b&#x2F;.test(ctx.resourcePath)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      return [</span></pre></td></tr><tr><td class="code"><pre><span class="line">        require(&#39;postcss-flexbugs-fixes&#39;),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        require(&#39;postcss-preset-env&#39;)(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          autoprefixer: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            flexbox: &#39;no-2009&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          stage: 3</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        require(&#39;postcss-px2rem-exclude&#39;)(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          remUnit: isNormalDpr ? 37.5 : 75</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        require(&#39;postcss-normalize&#39;)()</span></pre></td></tr><tr><td class="code"><pre><span class="line">      ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return config</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="项目构建配置"><a href="#项目构建配置" class="headerlink" title="项目构建配置"></a>项目构建配置</h3><ul>
<li>依赖分析工具<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add webpack-bundle-analyzer</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const &#123; BundleAnalyzerPlugin &#125; &#x3D; require(&#39;webpack-bundle-analyzer&#39;)</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">addWebpackPlugin(</span></pre></td></tr><tr><td class="code"><pre><span class="line">  new BundleAnalyzerPlugin(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    analyzerMode: &#39;static&#39; &#x2F;&#x2F;输出静态报告文件report.html，而不是启动一个web服务</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">)</span></pre></td></tr></table></figure></li>
<li>gzip文件压缩<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add compression-webpack-plugin@5.0.1</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const CompressionPlugin &#x3D; require(&#39;compression-webpack-plugin&#39;) &#x2F;&#x2F; gzip 压缩 (5.0.1版本)</span></pre></td></tr><tr><td class="code"><pre><span class="line">const productionGzipExtensions &#x3D; &#x2F;\.(js|css|json|txt|html|ico|svg)(\?.*)?$&#x2F;i</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">addWebpackPlugin(</span></pre></td></tr><tr><td class="code"><pre><span class="line">  new CompressionPlugin(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    filename: &#39;[path].gz[query]&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    algorithm: &#39;gzip&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    test: productionGzipExtensions, &#x2F;&#x2F; 匹配文件名</span></pre></td></tr><tr><td class="code"><pre><span class="line">    threshold: 10240, &#x2F;&#x2F; 对超过 10k 数据压缩</span></pre></td></tr><tr><td class="code"><pre><span class="line">    minRatio: 0.8,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    deleteOriginalAssets: false &#x2F;&#x2F; true-删除原文件 false-不删除源文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">),</span></pre></td></tr></table></figure></li>
<li>setWebpackOptimizationSplitChunks 代码分离spilt<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setWebpackOptimizationSplitChunks(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  chunks: &#39;all&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  cacheGroups: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; reactDom: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F;   test: &#x2F;[\\&#x2F;]node_modules[\\&#x2F;]_?react\-dom(.*)&#x2F;, &#x2F;&#x2F; 兼容cnpm 情况</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F;   name: &#39;react-dom&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F;   chunks: &#39;initial&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F;   minChunks: 1,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F;   minSize: 0,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F;   priority: 3,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F;   reuseExistingChunk: true</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    libs: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; 拆分第三方库（通过npm|yarn安装的库）</span></pre></td></tr><tr><td class="code"><pre><span class="line">      test: &#x2F;[\\&#x2F;]node_modules[\\&#x2F;]&#x2F;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      name: &#39;chunk-libs&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      chunks: &#39;initial&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      priority: 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;),</span></pre></td></tr></table></figure>
<a href="https://juejin.cn/post/6919684767575179278" target="_blank" rel="noopener">cacheGroups 分包文章</a></li>
</ul>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>Cookie</title>
    <url>/2021/01/24/server/server01/</url>
    <content><![CDATA[<h3 id="cookie-特点"><a href="#cookie-特点" class="headerlink" title="cookie 特点"></a>cookie 特点</h3><ol>
<li>cookie 是存储在浏览器中的一段字符串，无数据结构的，但是统一约定为<code>key=value; key=value</code>（分号后紧接着空格）的一串字符串，大小一般不超过4k。</li>
<li>发起http请求，会<strong>自动携带</strong>http请求所在域名的cookie。</li>
</ol>
<h3 id="cookie-重要属性"><a href="#cookie-重要属性" class="headerlink" title="cookie 重要属性"></a>cookie 重要属性</h3><ul>
<li>属性说明<table border="1">
<tr>
  <th width='180px'>属性</th>
  <th>说明</th>
</tr>
<tr>
  <td>domain</td>
  <td>指定cookie所属的域名，默认是当前域名</td>
</tr>
<tr>
  <td>path</td>
  <td>指定cookie在哪个路径（路由下生效）</td>
</tr>
<tr>
  <td>maxAge</td>
  <td>cookie失效日期，单位秒。如果为整数，则该cookie在maxAge秒后失效。如果为负数，该cookie为临时cookie，关闭浏览器即失效，浏览器也不会以任何形式保存该cookie。如果为0，标识删除该cookie。默认为-1</td>
</tr>
<tr>
  <td>expires</td>
  <td>
    过期时间，在设置的某个时间点后该cookie就会消失。时间要转成GMT形式，toGMTString()。<br/>
    一般浏览器的cookie都是默认存储的，当关闭浏览器结束这个回话的时候，这个cookie也就会被删除
  </td>
</tr>
<tr>
  <td>secure</td>
  <td>该cookie是否仅被使用安全协议传输。安全协议有HTTPS，SSL等，在网络上传输数据之前先将数据加密。默认false。</td>
</tr>
<tr>
  <td>httpOnly</td>
  <td>如果给某个cookie设置了httpOnly属性，则无法通过js脚本读取到该cookie信息，但是还是可以通过Application中手动修改cookie</td>
</tr>
</table>

</li>
</ul>
<h3 id="前端操作cookie"><a href="#前端操作cookie" class="headerlink" title="前端操作cookie"></a>前端操作cookie</h3><blockquote>
<p>前端通过 document.cookie 设置 cookie， 设置多个 cookie 则需要编写多条 document.cookie = ‘…’， 如果需要对 cookie 进行修改创建一条相同名称的 cookie 即可对 cookie 进行替换</p>
</blockquote>
<ul>
<li>设置cookie<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 通用方法： 设置cookie 方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * @param &#123;String&#125; name     cookie 名称</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * @param &#123;String&#125; value    cookie 值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * @param &#123;Number&#125; maxAge   cookie 存活时间（maxAge秒， 默认存储 30 天）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">&#123; name, value, maxAge &#125;</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  maxAge = maxAge || <span class="number">30</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// escape： 对字符串进行编码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">document</span>.cookie = <span class="string">`<span class="subst">$&#123;name&#125;</span>=<span class="subst">$&#123;<span class="built_in">escape</span> (value)&#125;</span>;max-age=<span class="subst">$&#123;maxAge&#125;</span>`</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<strong>创建</strong>：当document.cookie中没有相同的name时创建一个cookie<br><strong>修改</strong>：把对应document.cookie中的name的value直接替换<br><strong>删除</strong>：把对应document.cookie中的name的max-age设置为0<br/><br/></li>
<li>获取cookie<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 通用方法： 将 cookie 转为对象 &#123;anme: value&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * @return &#123;Object&#125; &#123;name, value&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookieObj</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">let</span> cookieArr = <span class="built_in">document</span>.cookie.split(<span class="string">";"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  cookieArr.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">let</span> arr = v.split(<span class="string">"="</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">let</span> key = arr[<span class="number">0</span>].trim()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">let</span> val = arr[<span class="number">1</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    obj[key] = <span class="built_in">unescape</span>(val);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> obj</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="后端操作cookie（nodejs）"><a href="#后端操作cookie（nodejs）" class="headerlink" title="后端操作cookie（nodejs）"></a>后端操作cookie（nodejs）</h3><blockquote>
<p>服务端设置 cookie 主要是通过设置<strong>响应头</strong> set-cookie 来设置 cookie， 如果需要设置多个 cookie 得多写几个 set-cookie</p>
</blockquote>
<ul>
<li><p>设置cookie</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">http.createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  response.setHeader(<span class="string">'Set-Cookie'</span>, <span class="string">'token=xxx; path=/ ;max-age=30; httpOnly'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  response.end()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;).listen(<span class="number">5000</span>)</span></pre></td></tr></table></figure>
<p>通过<strong>response</strong>设置cookie token值为xxx 当前域根路径 失效时间30秒 客户端不可以通过js操作</p>
</li>
<li><p>获取cookie</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">http.createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  request.cookie = &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">let</span> cookieStr = request.headers.cookie || <span class="string">''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  cookieStr.split(<span class="string">';'</span>).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!item) &#123; <span class="keyword">return</span> &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> arr = item.split(<span class="string">'='</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> key = arr[<span class="number">0</span>].trim()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> val = arr[<span class="number">1</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    request.cookie[key] = val</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  response.end()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;).listen(<span class="number">5000</span>)</span></pre></td></tr></table></figure>
<p>通过<strong>request</strong>获取cookie</p>
</li>
</ul>
]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title>express基本使用</title>
    <url>/2021/02/02/server/server02/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li>express 脚手架<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install express-generator -g</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 项目生成</span></pre></td></tr><tr><td class="code"><pre><span class="line">express project</span></pre></td></tr></table></figure></li>
<li>单独express安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install express --save</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="初始化项目结构介绍"><a href="#初始化项目结构介绍" class="headerlink" title="初始化项目结构介绍"></a>初始化项目结构介绍</h3><ul>
<li>express 初始化项目结构<img style="margin-left:0px;width:240px"   src="/images/2021/express_1.png"></li>
<li>express 初始化项目介绍<img style="margin-left:-20px;width:278px" src="/images/2021/express_2.png"></li>
<li>express app.js入口文件介绍<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处理未命中路由 404 情况</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> createError = <span class="built_in">require</span>(<span class="string">'http-errors'</span>);</span></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将请求头中req.headers.cookie字符串 解析成 req.cookies 对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>);</span></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处理入口日志</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> logger = <span class="built_in">require</span>(<span class="string">'morgan'</span>);</span></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将post请求中的数据流 处理成 req.body 对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">app.use(express.json());</span></pre></td></tr><tr><td class="code"><pre><span class="line">app.use(express.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// get请求中地址栏的数据也会被express 处理成 req.query 对象</span></span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="路由处理"><a href="#路由处理" class="headerlink" title="路由处理"></a>路由处理</h3><ul>
<li><p>创建 get post 路由</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = express.Router();</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 处理get请求</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">router.get(<span class="string">'/get'</span>, (req, res, next) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  res.json(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    errno: <span class="number">0</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    results: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      message: <span class="string">'这是一个get请求测试信息！'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      data: req.query</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 处理post请求</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">router.post(<span class="string">'/post'</span>, (req, res, next) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  res.json(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    errno: <span class="number">0</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    results: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      message: <span class="string">'这是一个post请求测试信息！'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      data: req.body</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = router;</span></pre></td></tr></table></figure>
</li>
<li><p>路由注册</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> testsRouter = <span class="built_in">require</span>(<span class="string">'./routes/tests'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="code"><pre><span class="line">app.use(<span class="string">'/api/tests'</span>, testsRouter);</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="中间件介绍"><a href="#中间件介绍" class="headerlink" title="中间件介绍"></a>中间件介绍</h3><ul>
<li>中间件执行顺序<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = express()</span></pre></td></tr><tr><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'请求开始。。。 :&gt;&gt; '</span>, req.method, req.url);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  next()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 假设处理cookie</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  req.cookies = &#123; <span class="attr">userId</span>: <span class="string">'xxx123'</span> &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  next()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 假设处理异步</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    req.body = &#123; <span class="attr">a</span>: <span class="number">100</span>, <span class="attr">b</span>: <span class="number">200</span> &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next()</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;, <span class="number">1000</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">app.use(<span class="string">'/api'</span>, (req, res, next) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'处理 /api 路由'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  next()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">app.get(<span class="string">'/api'</span>, (req, res, next) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'get /api 路由'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  next()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">app.post(<span class="string">'/api'</span>, (req, res, next) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'post /api 路由'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  next()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 模拟登陆验证</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loginCheck</span>(<span class="params">req, res, next</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'模拟登陆失败'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    res.json(&#123; <span class="attr">errno</span>: <span class="number">-1</span>, <span class="attr">msg</span>: <span class="string">'登陆失败'</span> &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 中间件自左向右执行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">app.get(<span class="string">'/api/get-cookie'</span>, loginCheck, (req, res, next) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'get /api/get-cookie'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  res.json(&#123; <span class="attr">errno</span>: <span class="number">0</span>, <span class="attr">datd</span>: req.cookies &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">app.post(<span class="string">'/api/get-post-data'</span>, (req, res, next) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'post /api/get-post-data'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  res.json(&#123; <span class="attr">errno</span>: <span class="number">0</span>, <span class="attr">datd</span>: req.body &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'处理 404'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  res.json(&#123; <span class="attr">errno</span>: <span class="number">-1</span>, <span class="attr">msg</span>: <span class="string">'404 not found'</span> &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'server is running on port 3000'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
1.app.use()会默认访问任何路由，如果第一个参数为路由的路径，则只会访问当前路径下的路由。<br>2.中间件的执行顺序按照，app.use中自左向右，代码中自上而下的顺序执行。<br>3.app.get()与app.use()基本一致，不同的是app.get()只处理get类型的请求。<br>4.app.post()与app.use()基本一致，不同的是app.post()只处理post类型的请求。</li>
</ul>
<h3 id="中间件原理"><a href="#中间件原理" class="headerlink" title="中间件原理"></a>中间件原理</h3><ul>
<li>收集并注册中间件</li>
<li>匹配要执行的中间件</li>
<li>next<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> slice = <span class="built_in">Array</span>.prototype.slice</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LikeExpress</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">constructor</span>() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.routers = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      all: [],</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">get</span>: [],</span></pre></td></tr><tr><td class="code"><pre><span class="line">      post: []</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.middlewareSort = 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  // 中间件收集注册 - start</span></pre></td></tr><tr><td class="code"><pre><span class="line">  register(path) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">let</span> currentMiddlewareList = []</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> path !== <span class="string">'string'</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      path = <span class="string">'/'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      currentMiddlewareList = slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      currentMiddlewareList = slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> currentRoutersList = []</span></pre></td></tr><tr><td class="code"><pre><span class="line">    currentMiddlewareList.forEach(<span class="function"><span class="params">middleware</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">const</span> router = &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">this</span>.middlewareSort++</span></pre></td></tr><tr><td class="code"><pre><span class="line">      router.sort = <span class="keyword">this</span>.middlewareSort</span></pre></td></tr><tr><td class="code"><pre><span class="line">      router.path = path</span></pre></td></tr><tr><td class="code"><pre><span class="line">      router.stack = middleware</span></pre></td></tr><tr><td class="code"><pre><span class="line">      currentRoutersList.push(router)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> currentRoutersList</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  use() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> allRouters = <span class="keyword">this</span>.register(...arguments)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.routers.all = <span class="keyword">this</span>.routers.all.concat(allRouters)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">get</span>() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> getRouters = <span class="keyword">this</span>.register(...arguments)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.routers.get = <span class="keyword">this</span>.routers.get.concat(getRouters)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  post() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> postRouters = <span class="keyword">this</span>.register(...arguments)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.routers.post = <span class="keyword">this</span>.routers.post.concat(postRouters)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 中间件收集注册 - end</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  match(method, url) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">let</span> routersList = []</span></pre></td></tr><tr><td class="code"><pre><span class="line">    routersList = <span class="keyword">this</span>.routers.all.concat(<span class="keyword">this</span>.routers[method]).filter(<span class="function"><span class="params">item</span> =&gt;</span> url.includes(item.path))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> stackList = routersList.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.sort - b.sort).map(<span class="function"><span class="params">item</span> =&gt;</span> item.stack)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> stackList</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  handle(req, res, stackList) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> next = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">let</span> stack = stackList.shift()</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span> (stack) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        stack(req, res, next)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next()</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  callback() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">let</span> method = req.method.toLowerCase()</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">let</span> url = req.url</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// 处理 /favicon.ico</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span> (req.url == <span class="string">'/favicon.ico'</span>) &#123; <span class="keyword">return</span> &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// 扩展res.json</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      res.json = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        res.setHeader(<span class="string">'content-type'</span>, <span class="string">'application/json'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        res.end(</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="built_in">JSON</span>.stringify(data)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        )</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// 1. 匹配要执行的中间件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">const</span> stackList = <span class="keyword">this</span>.match(method, url)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// 2. next 执行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">this</span>.handle(req, res, stackList)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// server</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  listen() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> server = http.createServer(<span class="keyword">this</span>.callback())</span></pre></td></tr><tr><td class="code"><pre><span class="line">    server.listen(...arguments)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">express</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> LikeExpress()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = express</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="debugger-调试"><a href="#debugger-调试" class="headerlink" title="debugger 调试"></a>debugger 调试</h3><ul>
<li>package.json配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;start&quot;: &quot;node --inspect&#x3D;9229 .&#x2F;bin&#x2F;www&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>浏览器地址打开<br>chrome://inspect或者about:inspect</li>
</ul>
]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb基本使用</title>
    <url>/2021/02/17/server/server04/</url>
    <content><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul>
<li>mongodb安装<ul>
<li>社区版本安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install mongodb-community</span></pre></td></tr></table></figure></li>
<li><a href="https://github.com/mongodb/homebrew-brew" target="_blank" rel="noopener">https://github.com/mongodb/homebrew-brew</a> （文档）</li>
</ul>
</li>
<li>mongodb服务启动/停止<ul>
<li>启动<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew services start mongodb-community</span></pre></td></tr></table></figure></li>
<li>停止<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew services stop mongodb-community</span></pre></td></tr></table></figure></li>
</ul>
</li>
<li>下载mongodb可视化工具<ul>
<li>例如 Navicat Premium</li>
</ul>
</li>
</ul>
<h3 id="mongodb简介"><a href="#mongodb简介" class="headerlink" title="mongodb简介"></a>mongodb简介</h3><ul>
<li>数据库<ul>
<li>mongodb是一个数据的服务或者系统。一个数据库系统可以对接多个服务，一个服务也可以对接多个数据库。</li>
</ul>
</li>
<li>集合collection<ul>
<li>集合是mongodb的文档组，存在于数据库中。</li>
</ul>
</li>
<li>文档document<ul>
<li>文档是单条数据，可以被增删改查。</li>
</ul>
</li>
<li>bson<ul>
<li>mongodb内数据存储是一以一种<strong>二进制类型的json</strong>存储的，数据格式是一种json的格式。</li>
</ul>
</li>
<li>NoSQL<ul>
<li>mongodb 与 一些关系型数据库不同，不需要使用SQL语句查询。</li>
</ul>
</li>
<li>mongodb区别于关系型数据库<table border="1">
<tr>
  <th width='50%'>mysql</th>
  <th width='50%'>mongodb</th>
</tr>
<tr>
  <td>数据库</td>
  <td>数据库</td>
</tr>
<tr>
  <td>表格</td>
  <td>集合</td>
</tr>
<tr>
  <td>行</td>
  <td>文档</td>
</tr>
<tr>
  <td>列</td>
  <td>字段</td>
</tr>
<tr>
  <td>主键</td>
  <td>mongodb 默认主键 _id</td>
</tr>
</table>

</li>
</ul>
<h3 id="mongodb-常用命令"><a href="#mongodb-常用命令" class="headerlink" title="mongodb 常用命令"></a>mongodb 常用命令</h3><blockquote>
<p><strong>数据库</strong></p>
</blockquote>
<ul>
<li>产看数据库列表<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show dbs</span></pre></td></tr></table></figure></li>
<li>切换数据库<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use mydb</span></pre></td></tr></table></figure>
当存在数据库时，切换到该数据库。当不存在数据库时，创建该数据库，并切换到该数据库。</li>
</ul>
<ul>
<li>删除数据库<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use mydb</span></pre></td></tr><tr><td class="code"><pre><span class="line">db.dropDatabase()</span></pre></td></tr></table></figure>
先切换到需要删除的数据库，然后执行db.dropDatabase()删除数据库。</li>
</ul>
<blockquote>
<p><strong>集合collection</strong></p>
</blockquote>
<ul>
<li>查看当前数据库集合列表<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show collections</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show tables</span></pre></td></tr></table></figure></li>
<li>插入文档<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollection.insert(&#123;name:&quot;wangxiaoqi&quot;&#125;)</span></pre></td></tr></table></figure>
当存在集合时，向集合中插入一条数据。当集合不存在时，创建新的集合并插入数据。</li>
</ul>
<ul>
<li>删除集合<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollecction.drop()</span></pre></td></tr></table></figure>


</li>
</ul>
<blockquote>
<p><strong>插入文档</strong></p>
</blockquote>
<ul>
<li>insert 插入一条或多条数据<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollection.insert(&#123;number:1&#125;) &#x2F;&#x2F; 插入单条数据</span></pre></td></tr><tr><td class="code"><pre><span class="line">db.myCollection.insert([&#123;number:2&#125;,&#123;number:3&#125;]) &#x2F;&#x2F; 插入多条数据</span></pre></td></tr></table></figure></li>
<li>insertOne 插入一条数据<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollection.insertOne(&#123;number:4&#125;)</span></pre></td></tr></table></figure></li>
<li>insertMany 插入多条数据<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollection.insertMany([&#123;number:5&#125;,&#123;number:6&#125;])</span></pre></td></tr></table></figure>


</li>
</ul>
<blockquote>
<p><strong>更新文档</strong></p>
</blockquote>
<ul>
<li>update 语法格式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollection.update(</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;query&gt;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;update&gt;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    upsert: &lt;boolean&gt;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    multi: &lt;boolean&gt;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    writeConcern: &lt;ducument&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">)</span></pre></td></tr></table></figure>
query: update的查询条件，类似sql update查询内where后面的<br>update: update的对象和一些更新的操作符（如$,$inc…）等，也可以理解为sql update查询内set后面的<br>upsert: 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入<br>multi: 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新<br>writeConcern: 可选，抛出异常的级别</li>
</ul>
<ul>
<li>update<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollection.update(&#123;number:6&#125;,&#123;$set:&#123;number:66&#125;&#125;,&#123;multi:true&#125;)</span></pre></td></tr></table></figure>
匹配number为6的文档，文档的number字段全部更新为66。</li>
</ul>
<blockquote>
<p><strong>删除文档</strong></p>
</blockquote>
<ul>
<li>remove 语法格式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollection.remove(</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;query&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    justOne: &lt;boolean&gt;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    writeConcern: &lt;document&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">)</span></pre></td></tr></table></figure>
query: (可选) 删除的文档的条件<br>justOne: (可选) 如果设为 true 或 1，则只删除第一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档<br>writeConcern: (可选) 抛出异常的级别</li>
</ul>
<ul>
<li>remove<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollection.remove(&#123;number:66&#125;,&#123;justOne:true&#125;)</span></pre></td></tr></table></figure>
删除第一个number为66的文档。</li>
</ul>
<ul>
<li>删除所有数据<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollection.remove(&#123;&#125;)</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollection.deleteMany(&#123;&#125;)</span></pre></td></tr></table></figure></li>
<li>deleteOne 删除匹配的第一条文档<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollection.deleteOne(&#123;number:2&#125;)</span></pre></td></tr></table></figure></li>
<li>deleteMany 删除匹配到的所有文档<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollection.deleteMany(&#123;number:2&#125;)</span></pre></td></tr></table></figure>


</li>
</ul>
<blockquote>
<p><strong>查询文档</strong></p>
</blockquote>
<ul>
<li>find 语法格式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollection.find(query)</span></pre></td></tr></table></figure>
query: 可选，使用查询操作符指定查询条件</li>
</ul>
<ul>
<li>条件操作符<table border="1">
<tr>
  <th width='25%'>操作</th>
  <th width='25%'>格式</th>
  <th width='50%'>范例</th>
</tr>
<tr>
  <td>等于</td>
  <td>{key:valve}</td>
  <td>db.myCollection.find({number:1})</td>
</tr>
<tr>
  <td>小于</td>
  <td>{key:{$lt:value}}</td>
  <td>db.myCollection.find({number:{$lt:5}})</td>
</tr>
<tr>
  <td>小于等于</td>
  <td>{key:{$lte:value}}</td>
  <td>db.myCollection.find({number:{$lte:5}})</td>
</tr>
<tr>
  <td>大于</td>
  <td>{key:{$gt:value}}</td>
  <td>db.myCollection.find({number:{$gt:5}})</td>
</tr>
<tr>
  <td>大于等于</td>
  <td>{key:{$gte:value}}</td>
  <td>db.myCollection.find({number:{$gte:5}})</td>
</tr>
<tr>
  <td>不等于</td>
  <td>{key:{$ne:value}}</td>
  <td>db.myCollection.find({number:{$ne:5}})</td>
</tr>
</table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollection.find(&#123;number:&#123;$gt:2,$lt:5&#125;&#125;)</span></pre></td></tr></table></figure>
number 大于2小于5的文档。


</li>
</ul>
<ul>
<li>and条件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollection.find(&#123;number:&#123;$gt:1&#125;,author:&quot;zhangsan&quot;&#125;)</span></pre></td></tr></table></figure>
传入多个键(key)，每个键(key)以逗号隔开，相当于 SQL 的 AND 条件。</li>
</ul>
<ul>
<li>or条件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollection.find(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  $or:[</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;number:1,author:&quot;zhangsan&quot;&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;number:&#123;$gt:5&#125;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
 $or 数组中 每个对象的查询结果，得到的并集。</li>
</ul>
<ul>
<li>and与or组合<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollection.find(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  number:7,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  $or:[&#123;number:1&#125;,&#123;number:&#123;$gt:5&#125;&#125;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
query 中 查询条件交集的结果。</li>
</ul>
<ul>
<li>模糊查询<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollection.find(&#123;description:&#x2F;XXX&#x2F;&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 或者</span></pre></td></tr><tr><td class="code"><pre><span class="line">db.myCollection.find(&#123;description:&#123;$regex:&#x2F;XXX&#x2F;&#125;&#125;)</span></pre></td></tr></table></figure>
查询description中包含 ‘XXX’ 的文档。<br/>
<br/>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollection.find(&#123;description:&#x2F;^XXX&#x2F;&#125;)</span></pre></td></tr></table></figure>
查询description字段以 'XXX 开头的文档。
<br/>
<br/>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollection.find(&#123;description:&#x2F;XXX$&#x2F;&#125;)</span></pre></td></tr></table></figure>
查询description 字段以 'XXX' 结尾的文档。


</li>
</ul>
<ul>
<li>limit指定数目<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollection.find().limit(2)</span></pre></td></tr></table></figure>
limit()方法接受一个数字参数，该参数指定从MongoDB中读取的记录条数</li>
</ul>
<ul>
<li>skip跳过数目<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollecion.find().skip(2)</span></pre></td></tr></table></figure>
skip方法接受一个数字参数作为跳过的记录条数</li>
</ul>
<ul>
<li>sort 排序<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollection.find().sort(&#123;number:-1&#125;)</span></pre></td></tr></table></figure>
sort方法可以通过参数指定排序的字段，并使用 1 和 -1 来指定排序的方式，其中 1 为升序排列，而 -1 是用于降序排列</li>
</ul>
<ul>
<li>skip、limit、sort 联合<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.myCollection.find().skip(2).limit(2).sort(&#123;number:-1&#125;)</span></pre></td></tr></table></figure>
skip(), limilt(), sort()三个放在一起执行的时候，执行的顺序是先 sort(), 然后是 skip()，最后是显示的 limit()。</li>
</ul>
]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title>koa2基本使用</title>
    <url>/2021/02/07/server/server03/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li>koa2 脚手架<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install koa2-generator -g</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 项目生成</span></pre></td></tr><tr><td class="code"><pre><span class="line">koa2 project</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="初始化项目结构介绍"><a href="#初始化项目结构介绍" class="headerlink" title="初始化项目结构介绍"></a>初始化项目结构介绍</h3><ul>
<li><p>koa2 初始化项目结构</p>
<img style="margin-left:0px;width:240px"   src="/images/2021/koa2_01.png"></li>
<li><p>koa2 初始化项目介绍</p>
<img style="margin-left:-20px;width:278px" src="/images/2021/koa2_02.png"></li>
<li><p>koa2 app.js 入口文件介绍</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 错误处理</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">onerror(app)</span></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// post请求中传递的数据处理成json 解析至 ctx.request.body</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">app.use(bodyparser(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  enableTypes:[<span class="string">'json'</span>, <span class="string">'form'</span>, <span class="string">'text'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;))</span></pre></td></tr><tr><td class="code"><pre><span class="line">app.use(json())</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// get请求中地址栏中的数据 解析至 ctx.query / ctx.request.query</span></span></pre></td></tr></table></figure></li>
<li><p>ctx 结构</p>
<img style="margin-left:-14px"   src="/images/2021/koa2_03.png">

<p><a href="https://koa.bootcss.com/#introduction" target="_blank" rel="noopener">koa2中文文档</a></p>
</li>
</ul>
<h3 id="路由处理"><a href="#路由处理" class="headerlink" title="路由处理"></a>路由处理</h3><ul>
<li>创建 get post 路由<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)()</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 路由前缀</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">router.prefix(<span class="string">'/api'</span>) </span></pre></td></tr><tr><td class="code"><pre><span class="line">router.get(<span class="string">'/get'</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ctx.body = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    errno: <span class="number">0</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    results: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      message: <span class="string">'这是一个get请求测试信息！'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      data: ctx.query</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">router.post(<span class="string">'/post'</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ctx.body = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    errno: <span class="number">0</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    results: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      message: <span class="string">'这是一个post请求测试信息！'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      data: ctx.request.body</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = router</span></pre></td></tr></table></figure></li>
<li>注册路由<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> testsRouter = <span class="built_in">require</span>(<span class="string">'./routes/tests'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="code"><pre><span class="line">app.use(testsRouter.routes(), testsRouter.allowedMethods())</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="洋葱圈模型"><a href="#洋葱圈模型" class="headerlink" title="洋葱圈模型"></a>洋葱圈模型</h3><ul>
<li><p>洋葱圈模型图</p>
<img  src="/images/2021/koa2_04.png">
当 koa2 server 接受到一个请求时，会先经过第一个洋葱圈（如图外层最大的洋葱圈），依次再进入内层洋葱圈，最内层的洋葱圈最后到达但会最先被执行完成，第一个洋葱圈最先到达但会最后执行完成。</li>
<li><p>代码演示</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span></pre></td></tr><tr><td class="code"><pre><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'第一层洋葱圈 开始'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">await</span> next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> rt = ctx.response.get(<span class="string">'X-Response-Time'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;ctx.method&#125;</span> <span class="subst">$&#123;ctx.url&#125;</span> - <span class="subst">$&#123;rt&#125;</span>`</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'第一层洋葱圈 结束'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'第二层洋葱圈 开始'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> start = <span class="built_in">Date</span>.now();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">await</span> next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> ms = <span class="built_in">Date</span>.now() - start;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ctx.set(<span class="string">'X-Response-Time'</span>, <span class="string">`<span class="subst">$&#123;ms&#125;</span>ms`</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'第二层洋葱圈 结束'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'第三层洋葱圈 开始'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ctx.body = <span class="string">'Hello World'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'第三层洋葱圈 结束'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">app.listen(<span class="number">3000</span>);</span></pre></td></tr></table></figure></li>
<li><p>执行结果</p>
<img style="margin-left:0px"  src="/images/2021/koa2_05.png">
当 koa2 server 接受到一个请求时，第一个中间件会先被触发，再依次触发内层其他中间件，最内层中间件最后触发但会最先执行完成，第一个中间件最先触发但最后执行完成。

<h3 id="中间件原理"><a href="#中间件原理" class="headerlink" title="中间件原理"></a>中间件原理</h3><ul>
<li>收集并注册中间件</li>
<li>创建执行中间件函数<ol>
<li>封装ctx</li>
<li>实现next</li>
</ol>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 实现next 并对中间件实现promise处理</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">componse</span>(<span class="params">middlewareList</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">ctx</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">i</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">const</span> middleware = middlewareList[i]</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">Promise</span>.resolve(</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="comment">// 注意fn.bind()返回的是一个函数并不直接执行函数本身</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">          middleware(ctx, dispatch.bind(<span class="literal">null</span>, i + <span class="number">1</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        )</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">Promise</span>.reject(error)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dispatch(<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LikeKoa2</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">constructor</span>() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.middlewareList = []</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 收集注册中间件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  use(fn) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn === <span class="string">'function'</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">this</span>.middlewareList.push(fn)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  createContent(req, res) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> ctx = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      req,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      res</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ctx.query = req.query</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> ctx</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  handleRequest(fn, ctx) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> fn(ctx)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  callback() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> fn = componse(<span class="keyword">this</span>.middlewareList)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">const</span> ctx = <span class="keyword">this</span>.createContent(req, res)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">this</span>.handleRequest(fn, ctx)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// server</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  listen() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> server = http.createServer(<span class="keyword">this</span>.callback())</span></pre></td></tr><tr><td class="code"><pre><span class="line">    server.listen(...arguments)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = LikeKoa2</span></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基本使用</title>
    <url>/2021/01/20/server/server05/</url>
    <content><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul>
<li>mysql下载<ul>
<li>下载地址<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a></li>
<li>安装过程注意记住 root用户名的密码</li>
</ul>
</li>
<li>下载mysql可视化工具<ul>
<li>例如 Navicat Premium</li>
</ul>
</li>
</ul>
<h3 id="常用字段属性"><a href="#常用字段属性" class="headerlink" title="常用字段属性"></a>常用字段属性</h3><ul>
<li>字符串数据类型<table border="1">
<tr>
  <th width='180px'>MySQL数据类型</th>
  <th>含义</th>
</tr>
<tr>
  <td>char(n)</td>
  <td>固定长度，最多255个字符</td>
</tr>
<tr>
  <td>varchar(n)</td>
  <td>可变长度，最多65535个字符</td>
</tr>
<tr>
  <td>tinytext</td>
  <td>可变长度，最多255个字符</td>
</tr>
<tr>
  <td>text</td>
  <td>可变长度，最多65535个字符</td>
</tr>
<tr>
  <td>mediumtext</td>
  <td>可变长度，最多2的24次方-1个字符</td>
</tr>
<tr>
  <td>longtext</td>
  <td>可变长度，最多2的32次方-1个字符</td>
</tr>
</table>
1. char（n）和varchar（n）中括号中n代表字符的个数，并不代表字节个数，所以当使用了中文的时候(UTF8)意味着可以插入m个中文，但是实际会占用m*3个字节。<br/>
2. 同时char和varchar最大的区别就在于char不管实际value都会占用n个字符的空间，而varchar只会占用实际字符应该占用的空间+1，并且实际空间+1<=n。<br/>
3. 超过char和varchar的n设置后，字符串会被截断。<br/>
4. char的上限为255字节，varchar的上限65535字节，text的上限为65535。<br/>
5. char在存储的时候会截断尾部的空格，varchar和text不会。<br/>
6. varchar会使用1-3个字节来存储长度，text不会。<br/>


</li>
</ul>
<ul>
<li>数值数据类型（整型）<table border="1">
<tr>
  <th width='180px'>MySQL数据类型</th>
  <th>含义（有符号）</th>
</tr>
<tr>
  <td>tinyint</td>
  <td>1字节，范围（-128~127）</td>
</tr>
<tr>
  <td>smallint</td>
  <td>2字节，范围（-32768~32767）</td>
</tr>
<tr>
  <td>mediumint</td>
  <td>3字节，范围（-8388608~8388607）</td>
</tr>
<tr>
  <td>int</td>
  <td>4字节，范围（-2^31~2^31 - 1）</td>
</tr>
<tr>
  <td>bigint</td>
  <td>8字节，范围（-2^63~2^63-1）</td>
</tr>
</table>
1. 也可以加上unsigned关键字，定义成无符号的类型，那么对应的取值范围就要翻翻了，比如：tinyint unsigned的取值范为0~255。<br/>


</li>
</ul>
<ul>
<li>数值数据类型（浮点型）<table border="1">
<tr>
  <th width='180px'>MySQL数据类型</th>
  <th>含义</th>
</tr>
<tr>
  <td>float(m, d)</td>
  <td>4字节，单精度浮点型，m总个数，d小数位</td>
</tr>
<tr>
  <td>double(m, d)</td>
  <td>8字节，双精度浮点型，m总个数，d小数位</td>
</tr>
<tr>
  <td>decimal(m, d)</td>
  <td>decimal是存储为字符串的浮点数</td>
</tr>
</table>


</li>
</ul>
<ul>
<li>日期和时间数据类型<table border="1">
<tr>
  <th width='180px'>MySQL数据类型</th>
  <th>含义</th>
</tr>
<tr>
  <td>date</td>
  <td>3字节，日期，格式：yyyy-MM-dd</td>
</tr>
<tr>
  <td>time</td>
  <td>3字节，时间，格式：HH:mm:ss</td>
</tr>
<tr>
  <td>datetime</td>
  <td>8字节，日期时间，格式：yyyy-MM-dd HH:mm:ss</td>
</tr>
<tr>
  <td>timestamp</td>
  <td>4字节，日期+时间，可作时间戳，格式：yyyy-MM-dd HH:mm:ss</td>
</tr>
<tr>
  <td>year</td>
  <td>1字节，年份，格式：yyyy</td>
</tr>
</table>

</li>
</ul>
<h3 id="常用查询语句"><a href="#常用查询语句" class="headerlink" title="常用查询语句"></a>常用查询语句</h3><ul>
<li>增 关键字 <strong>insert</strong><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span> (username,<span class="string">`password`</span>,realname) <span class="keyword">VALUES</span> (<span class="string">'wangwu'</span>,<span class="string">'234'</span>,<span class="string">'王五'</span>)</span></pre></td></tr></table></figure>
  1.insert into 表名(字段1，字段2…) values(值1，值2，….);<br>  2.关键字用 <strong>``</strong> 标识，例如`password`。</li>
</ul>
<ul>
<li>删 关键字 <strong>delete</strong><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">8</span>;</span></pre></td></tr></table></figure>
  1.delete from 表名 where 条件<br>  2.数据删除不可逆，一般不使用物理删除<br>  3.<strong>where</strong>条件，如果不加则删除整个表</li>
</ul>
<ul>
<li>改 关键字 <strong>update</strong><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">users</span> <span class="keyword">SET</span> username=<span class="string">'zhangsan'</span>,<span class="string">`password`</span>=<span class="string">'123'</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">4</span>;</span></pre></td></tr></table></figure>
  1.update 表名 set字段1 = 值1, 字段2 = 值2 where 条件<br>  2.<strong>where</strong>条件，如果不加则更新整个表</li>
</ul>
<ul>
<li><p>查 关键字 <strong>select</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,username,<span class="string">`password`</span> <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>&gt;<span class="number">4</span>;</span></pre></td></tr></table></figure>
<p>  1.select 字段1,字段2 from 表名 where 条件</p>
</li>
<li><p>排序 关键字 <strong>order by</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">DESC</span>;</span></pre></td></tr></table></figure>
<p>  1.select 字段 from 表 order by 字段  排序关键词(desc | asc)<br>  2.desc 降序 asc 升序(默认)<br>  3.多字段排序字段 select 字段 from 表 order by 字段1  desc |asc,…字段n desc| asc;</p>
</li>
<li><p>分组 关键字 <strong>limit</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">10</span>;</span></pre></td></tr></table></figure>
<p>  1.select * from 表名  limit 偏移量,数量<br>  2.偏移量默认为0<br>  3.分页的偏移量计算为 limit (n-1)*数量 ,数量 </p>
</li>
</ul>
<ul>
<li>关键字 <strong>where</strong> 后面跟的条件<ul>
<li>关系：&gt; ， &lt; ， &gt;= ， &lt;= ， != ， =</li>
<li>逻辑：or ， and</li>
<li>区间：id between 4 and 6 （闭区间，包含边界）</li>
<li>匹配：username like ‘%程序员%’（”%%”表示可以出现在任何位置）</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title>pm2基本使用</title>
    <url>/2021/02/09/server/server07/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li>pm2 安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm insrall pm2 -g</span></pre></td></tr></table></figure></li>
<li>版本查看<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pm2 --version</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="pm2-常用命令"><a href="#pm2-常用命令" class="headerlink" title="pm2 常用命令"></a>pm2 常用命令</h3><ul>
<li>启动服务<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pm2 start ...</span></pre></td></tr></table></figure>
<img style="margin-left:0px" src="/images/2021/pm2_01.png">
可以是项目入口文件如 app.js，也可以是pm2配置文件 如pm2.conf.json。</li>
<li>查看列表<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pm2 list</span></pre></td></tr></table></figure>
<img style="margin-left:0px" src="/images/2021/pm2_02.png"></li>
<li>重启服务<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pm2 restart (name &#x2F; id)</span></pre></td></tr></table></figure>
<img style="margin-left:0px" src="/images/2021/pm2_03.png"></li>
<li>停止服务<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pm2 stop (name &#x2F; id)</span></pre></td></tr></table></figure>
<img style="margin-left:0px" src="/images/2021/pm2_04.png"></li>
<li>删除服务<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pm2 delete (name &#x2F; id)</span></pre></td></tr></table></figure>
<img style="margin-left:0px" src="/images/2021/pm2_05.png"></li>
<li>进程日志<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pm2 log (name &#x2F; id)</span></pre></td></tr></table></figure>
<img style="margin-left:0px" src="/images/2021/pm2_07.png"></li>
<li>进程基本信息<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pm2 info (name &#x2F; id)</span></pre></td></tr></table></figure>
<img style="margin-left:0px" src="/images/2021/pm2_06.png"></li>
<li>监听进程cpu内存信息<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pm2 monit (name &#x2F; id)</span></pre></td></tr></table></figure>
<img style="margin-left:0px" src="/images/2021/pm2_08.png">

</li>
</ul>
<h3 id="pm2-功能介绍"><a href="#pm2-功能介绍" class="headerlink" title="pm2 功能介绍"></a>pm2 功能介绍</h3><ul>
<li><p><strong>进程守护</strong></p>
<ul>
<li>由于 NodeJs 是单线程执行的，所以主线程抛出了一个错误就会退出程序。所以线上部署的项目需要进程守护，当程序崩溃时重启服务。</li>
</ul>
</li>
<li><p><strong>日志管理</strong></p>
<ul>
<li>console.log打印的文本默认会输出到 .pm2/logs/app-out.log 中。</li>
<li>console.error 打印的文本默认会输出到 .pm2/logs/app-error.log 中。</li>
</ul>
</li>
<li><p><strong>多进程</strong></p>
<ul>
<li>为了充分利用服务器资源，pm2可以对node服务进行多进程管理</li>
<li>多进程之间，内存无法共享。可以使用访问同一个redis实现数据共享</li>
</ul>
</li>
<li><p><strong>配置项</strong></p>
<ul>
<li>pm2启动配置项 pm2 start pm2.conf.json</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">"apps"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 进程名称</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"name"</span>: <span class="string">"pm2-test-server"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 启动文件的相对路径</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"script"</span>: <span class="string">"app.js"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 文件发生变化是否重启服务</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"watch"</span>: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 忽略因文件变化而重启服务</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"ignore_watch"</span>: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="string">"node_modules"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="string">"logs"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 进程数量，一般为电脑核数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"instances"</span>: <span class="number">4</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 错误日志的相对路径</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"error_file"</span>: <span class="string">"logs/err.log"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 自定义日志文件的相对路径</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"out_file"</span>: <span class="string">"logs/out.log"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 为每行日志添加时间前缀</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"log_date_format"</span>: <span class="string">"YYYY-MM-DD HH:mm:ss"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title>http缓存</title>
    <url>/2023/01/23/server/server09/</url>
    <content><![CDATA[<blockquote>
<p>http缓存可细分为<strong>强制缓存</strong>与<strong>协商缓存</strong>，二者最大区别在于缓存命中时，浏览器是否需要向服务器发送请求，进而判断需要响应的内容是否需要从新请求。</p>
</blockquote>
<h3 id="整体概述"><a href="#整体概述" class="headerlink" title="整体概述"></a>整体概述</h3><ul>
<li><p>简略流程</p>
<img src="/images/2023/http-cache-01.png">
</li>
<li><p>http报文相关字段<br>  <strong>Pragma</strong><br>  该字段只有一个<code>no-cache</code>可选，会通知浏览器不使用缓存，要求向服务器发送请求校验新鲜度。它的优先级较高，当存在时一定不会名字强缓存。</p>
  <div></div>
  <strong>Cache-Control</strong>
<table border="1">
  <tr>
    <th width='160px'>字段</th>
    <th>说明</th>
  </tr>
  <tr>
    <td>private</td>
    <td>表明响应只能被客户端缓存，不能作为共享缓存（即代理服务器不能缓存它）</td>
  </tr>
  <tr>
    <td>public</td>
    <td>表明响应可以被任何对象（包括：发送请求的客户端，代理服务器，等等）缓存</td>
  </tr>
  <tr>
    <td>no-cache</td>
    <td>表示缓存前必需确认其有效性</td>
  </tr>
  <tr>
    <td>no-store</td>
    <td>表示不缓存请求或响应的任何内容</td>
  </tr>
  <tr>
    <td>max-age=[s]</td>
    <td>响应的最大值</td>
  </tr>
</table>



</li>
</ul>
<h3 id="强制缓存"><a href="#强制缓存" class="headerlink" title="强制缓存"></a>强制缓存</h3><p>如果浏览器所请求的目标资源命中，则可直接从强制缓存中返回请求响应，无须与服务器进行任何通讯。</p>
<ul>
<li>Expires<br><code>expires</code>缓存失效日期。由服务器端指定后通过响应头告知浏览器，浏览器在接收到带有该字段的响应体后进行缓存。<br>若之后浏览器再次对该资源发起请求，就会对比<code>expires</code>与本地当前的时间戳。如果当前时间戳小于<code>expires</code>，缓存未过期，直接使用缓存。如果当前时间戳大于<code>expires</code>，缓存已过期，需要向服务器从新请求资源。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const server &#x3D; http.createServer((req, res) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    const &#123; pathname &#125; &#x3D; url.parse(req.url)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    switch (pathname) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        case &#39;&#x2F;img&#x2F;01.png&#39;:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            const img01ReadStream &#x3D; fs.createReadStream(path.resolve(__dirname, &#39;.&#x2F;assets&#x2F;img&#x2F;01.png&#39;))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            res.writeHead(200,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#39;Content-Type&#39;: &#39;image&#x2F;png&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#39;Expires&#39;: new Date(&#39;2023-03-05 13:33:00&#39;).toUTCString()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            )</span></pre></td></tr><tr><td class="code"><pre><span class="line">            img01ReadStream.pipe(res)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
<img src="/images/2023/http-cache-02.png">
可以看出`expires`对客户端时间戳过分依赖，如果客户端与服务端时间不同步，或者客户端主动修改时间，就达不到预期缓存效果。


</li>
</ul>
<ul>
<li>Cache-Control: max-age=[s]<br><code>max-age</code>属性值用来设置响应资源的有效日期，以秒为单位。<br><code>max-age=10</code>就表示10秒内缓存有效，超过5秒后缓存过期。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const server &#x3D; http.createServer((req, res) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    const &#123; pathname &#125; &#x3D; url.parse(req.url)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    switch (pathname) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        case &#39;&#x2F;img&#x2F;02.png&#39;:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            const img02ReadStream &#x3D; fs.createReadStream(path.resolve(__dirname, &#39;.&#x2F;assets&#x2F;img&#x2F;02.png&#39;))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            res.writeHead(200,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#39;Content-Type&#39;: &#39;image&#x2F;png&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#39;Cache-Control&#39;: &#39;max-age&#x3D;10&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            )</span></pre></td></tr><tr><td class="code"><pre><span class="line">            img02ReadStream.pipe(res)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
<img src="/images/2023/http-cache-03.png">

</li>
</ul>
<h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><p>在使用本地缓存之前，需要向服务器发起一次get请求，与之协商当前浏览器保存的本地缓存是否已过期。</p>
<ul>
<li>Last-Modified/If-Modified-Since<br>当第一次请求资源时，服务器会在响应头部添加<code>Last-Modified</code>字段，标识服务器认定的资源作出修改的日期及时间。<br>当再次请求资源时，浏览器会在请求头自动添加<code>If-Modified-Since</code>字段并请求资源，当服务器检查<code>Last-Modified</code>的时间早于或等于<code>If-Modified-Since</code>则会返回一个不带主体的304响应，否则将重新返回资源。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const server &#x3D; http.createServer((req, res) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    const &#123; pathname &#125; &#x3D; url.parse(req.url)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    switch (pathname) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        case &#39;&#x2F;img&#x2F;03.png&#39;:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        const &#123; mtime &#125; &#x3D; fs.statSync(path.resolve(__dirname, &#39;.&#x2F;assets&#x2F;img&#x2F;03.png&#39;))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        const ifModifiedSince &#x3D; req.headers[&#39;if-modified-since&#39;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if(ifModifiedSince &#x3D;&#x3D;&#x3D; mtime.toUTCString())&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            res.statusCode &#x3D; 304</span></pre></td></tr><tr><td class="code"><pre><span class="line">            res.end()</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        const img03ReadStream &#x3D; fs.createReadStream(path.resolve(__dirname, &#39;.&#x2F;assets&#x2F;img&#x2F;03.png&#39;))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        res.writeHead(200,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#39;Content-Type&#39;: &#39;image&#x2F;png&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#39;Cache-Control&#39;: &#39;no-cache&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#39;Last-Modified&#39;: mtime.toUTCString()</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        )</span></pre></td></tr><tr><td class="code"><pre><span class="line">        img03ReadStream.pipe(res)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li>ETag/If-None-Match<br><code>ETag</code>是为了弥补时间戳缓存的不足，其内容主要是服务器为不同资源进行哈希运算生成的一个字符串，改字符串类似文件指纹，只要文件内容编码存在差异对应<code>ETag</code>标签值就会不同，因此使用<code>ETag</code>可以对文件资源进行更精确的变化感知。<br>当第一次请求资源时，服务器会在响应头部添加<code>ETag</code>字段，标识服务器认定的资源的哈希值。<br>当再次请求资源时，浏览器会在请求头自动添加<code>If-None-Match</code>字段并请求资源，当服务器检查<code>ETag</code>不等于<code>If-None-Match</code>则会返回一个不带主体的304响应，否则将重新返回资源。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> &#123; pathname &#125; = url.parse(req.url)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">switch</span> (pathname) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">case</span> <span class="string">'/img/04.png'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> img04File = fs.readFileSync(path.resolve(__dirname, <span class="string">'./assets/img/04.png'</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> etagContent = etag(img04File)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> ifNoneMatch = req.headers[<span class="string">'if-none-match'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(etagContent === ifNoneMatch)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            res.statusCode = <span class="number">304</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            res.end()</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        res.writeHead(<span class="number">200</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">'Content-Type'</span>: <span class="string">'image/png'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">'Cache-Control'</span>: <span class="string">'no-cache'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">'ETag'</span>:etagContent</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        )</span></pre></td></tr><tr><td class="code"><pre><span class="line">        res.end(img04File)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx基本使用</title>
    <url>/2021/01/28/server/server06/</url>
    <content><![CDATA[<h3 id="nginx常用命令"><a href="#nginx常用命令" class="headerlink" title="nginx常用命令"></a>nginx常用命令</h3><ul>
<li>常用命令<ul>
<li>nginx -t （测试配置文件格式是否正确）</li>
<li>nginx （启动）</li>
<li>nginx -c /xxx/**/nginx.conf （指定配置文件启动）</li>
<li>nginx -s reload （重启）</li>
<li>nginx -s stop （停止）</li>
</ul>
</li>
</ul>
<h3 id="nginx配置文件"><a href="#nginx配置文件" class="headerlink" title="nginx配置文件"></a>nginx配置文件</h3><ul>
<li>配置文件结构<img style="margin-left:0px" src="/images/2021/nginx_1.png"></li>
<li>全局块<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#user nobody nobody;  #配置用户或者组。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;   <span class="comment">#启动进程,通常设置成和cpu的数量相等</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attribute">error_log</span> log/error.log <span class="literal">debug</span>;   <span class="comment">#制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址</span></span></pre></td></tr></table></figure></li>
<li>events块<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">events</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">#accept_mutex on;   #设置网路连接序列化，防止惊群现象发生，默认为on</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">#multi_accept on;    #设置一个进程是否同时接受多个网络连接，默认为off</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">#epoll是多路复用IO(I/O Multiplexing)中的一种方式,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">#仅用于linux2.6以上内核,可以大大提高nginx的性能</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">#use   epoll;   #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">worker_connections</span>  <span class="number">1024</span>;   <span class="comment">#单个后台worker process进程的最大并发链接数 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>http块<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">include</span>       mime.types;   <span class="comment">#文件扩展名与文件类型映射表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">default_type</span>  application/octet-stream; <span class="comment">#默认文件类型，默认为text/plain </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">log_format</span> myFormat <span class="string">'<span class="variable">$remote_addr</span>–<span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] <span class="variable">$request</span> <span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> <span class="variable">$http_referer</span> <span class="variable">$http_user_agent</span> <span class="variable">$http_x_forwarded_for</span>'</span>; <span class="comment">#自定义格式</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">access_log</span> log/access.log myFormat;  <span class="comment">#combined为日志格式的默认值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">sendfile</span> <span class="literal">on</span>;   <span class="comment">#允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">error_page</span> <span class="number">404</span> /<span class="number">404</span>.html; <span class="comment">#错误页</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="section">server</span> &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>server块<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">listen</span>       <span class="number">4545</span>;   <span class="comment">#监听端口</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">server_name</span>  <span class="number">127.0.0.1</span>;   <span class="comment">#监听地址    </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">root</span> html;  <span class="comment">#定义服务器的默认网站根目录位置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">location</span>  ~*^.+$ &#123;&#125;  <span class="comment">#请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>location块<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对 "/" 启用反向代理</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">proxy_pass</span> http://localhost:8000;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3>  <img src="/images/2021/nginx_2.png">

<ul>
<li>配置location<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">root</span> /www/server/nginx/app;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">expires</span>      <span class="number">1d</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
1.<strong>root</strong> 静态资源相对于服务器根目录的位置<br>2.<strong>expires</strong> 设置浏览器缓存过期时间。1d 表示1天之内访问这个URL，发送一个请求，对比服务器该文件最后更新时间没有变化，则不会从服务器抓取，返回状态码304，如果有修改则直接从服务器重新下载，返回状态码200。</li>
</ul>
<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3>  <img src="/images/2021/nginx_3.png">

<ul>
<li>配置 server<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">server&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">listen</span> <span class="number">8866</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">server_name</span> localhost;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>配置 location<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> /api/ &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">proxy_pass</span> http://localhost:8000;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
1.<strong>proxy_pass</strong> 代理server地址<br>2.<strong>proxy_set_header</strong> 即允许重新定义或添加字段传递给代理服务器的请求头。该值可以包含文本、变量和它们的组合。在没有定义proxy_set_header时会继承之前定义的值。<ul>
<li><code>proxy_set_header Host $host;</code> 使用<code>$host</code>变量 它的值在原始请求包含Host请求头时为Host字段的值，在请求未携带Host请求头时为nginx代理服务器的地址。</li>
<li><code>proxy_set_header Host $http_host;</code> 原始请求Host请求头的值</li>
</ul>
</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul>
<li>单页应用的常规配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">worker_processes  1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">events &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    worker_connections  1024;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">http &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    include       &#x2F;opt&#x2F;homebrew&#x2F;etc&#x2F;nginx&#x2F;mime.types;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    default_type  application&#x2F;octet-stream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    #log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    #                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    #                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    #access_log  logs&#x2F;access.log  main;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    keepalive_timeout  65;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    gzip on; #开启 gzip 压缩输出 </span></pre></td></tr><tr><td class="code"><pre><span class="line">    gzip_min_length 1k; #最小压缩文件大小</span></pre></td></tr><tr><td class="code"><pre><span class="line">    gzip_buffers 4 16k; #压缩缓冲区</span></pre></td></tr><tr><td class="code"><pre><span class="line">    gzip_http_version 1.1; #压缩版本（默认 1.1，前端如果是 squid2.5 请使用 1.0） </span></pre></td></tr><tr><td class="code"><pre><span class="line">    gzip_comp_level 2; #压缩等级 (1 最小处理最快, 9 处理最慢传输速度最快)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    gzip_types text&#x2F;plain application&#x2F;x-javascript text&#x2F;css application&#x2F;xml; #压缩类型，默认就已经包含 text&#x2F;html</span></pre></td></tr><tr><td class="code"><pre><span class="line">    gzip_vary on; #设置为开启，服务器返回数据时会在头部带上&quot;Vary:Accept-Encoding&quot;的标识, 默认关闭</span></pre></td></tr><tr><td class="code"><pre><span class="line">    server &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        listen       8080;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        server_name  localhost;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         # 静态资源路由</span></pre></td></tr><tr><td class="code"><pre><span class="line">        location &#x2F; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            root &#x2F;Users&#x2F;aaa&#x2F;Desktop&#x2F;FS&#x2F;xxx&#x2F;dist;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try_files $uri $uri&#x2F; &#x2F;index.html;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            index index.html;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        location &#x2F;api &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            proxy_pass https:&#x2F;&#x2F;xxx.com;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<code>try_files</code>：尝试提供请求的文件或回退到 /index.html<br><code>include</code> 和 <code>default_type</code>：include 指令包含了 mime.types 文件，该文件定义了文件扩展名和对应的MIME类型之间的映射关系。default_type 指令设置了文件的默认MIME类型。</li>
</ul>
]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title>附件上传下载</title>
    <url>/2020/09/10/technical/technical01/</url>
    <content><![CDATA[<h3 id="附件上传"><a href="#附件上传" class="headerlink" title="附件上传"></a>附件上传</h3><ol>
<li>通过 type=”file” 类型的input 获取到文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input ref&#x3D;&quot;file&quot; type&#x3D;&quot;file&quot; style&#x3D;&quot;display:none&quot; @change&#x3D;&quot;upload&quot; &#x2F;&gt;</span></pre></td></tr></table></figure></li>
<li>由于原生input的样式不太美观，一般会模拟触发input的事件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 清楚缓存，防止同一个文件，连续两次不触发change事件</span></pre></td></tr><tr><td class="code"><pre><span class="line">this.$refs.file.value &#x3D; &quot;&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 模拟派发点击事件</span></pre></td></tr><tr><td class="code"><pre><span class="line">this.$refs.file.dispatchEvent(new MouseEvent(&quot;click&quot;));</span></pre></td></tr></table></figure></li>
<li>获取到文件，FormData 处理<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 得到文件的数组</span></pre></td></tr><tr><td class="code"><pre><span class="line">this.$refs.file.files;</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span></pre></td></tr><tr><td class="code"><pre><span class="line">注意：new FormData</span></pre></td></tr><tr><td class="code"><pre><span class="line">    1.只能通过 append() 方法对文件进行添加，第一个参数为后台所需要的key值，第二个参数可以为文件也可以为其他值</span></pre></td></tr><tr><td class="code"><pre><span class="line">    2.多个附件只能通过循环 append 方式添加</span></pre></td></tr><tr><td class="code"><pre><span class="line">*&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">var formData &#x3D; new FormData();</span></pre></td></tr><tr><td class="code"><pre><span class="line">var fileList &#x3D; his.$refs.file.files;</span></pre></td></tr><tr><td class="code"><pre><span class="line">for (var i &#x3D; 0; i &lt; fileList.length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  formData.append(&quot;file&quot;, fileList[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>axios 请求处理，一般不指定文件类型（axios默认Form Data）。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">headers: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#39;Content-Type&#39;: false &#x2F;&#x2F; 不要指定请求的数据类型</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="附件下载（后台返回二进制流）"><a href="#附件下载（后台返回二进制流）" class="headerlink" title="附件下载（后台返回二进制流）"></a>附件下载（后台返回二进制流）</h3><ol>
<li>axios 中声明响应数据类型<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">responseType: &#39;blob&#39;</span></pre></td></tr></table></figure></li>
<li>使用 a 链接的download 属性<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a &#x3D; document.createElement(&#39;a&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; content 后台返回的二进制流（blob）</span></pre></td></tr><tr><td class="code"><pre><span class="line">var url &#x3D; window.URL.createObjectURL(content);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 文件名称和文件类型(后缀) 定义</span></pre></td></tr><tr><td class="code"><pre><span class="line">var filename &#x3D; &#39;XXX.zip&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">a.href &#x3D; url;</span></pre></td></tr><tr><td class="code"><pre><span class="line">a.download &#x3D; filename;</span></pre></td></tr><tr><td class="code"><pre><span class="line">a.click();</span></pre></td></tr><tr><td class="code"><pre><span class="line">window.URL.revokeObjectURL(url); &#x2F;&#x2F; 释放</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="附件下载（服务器资源地址）"><a href="#附件下载（服务器资源地址）" class="headerlink" title="附件下载（服务器资源地址）"></a>附件下载（服务器资源地址）</h3>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.location.href &#x3D; url</span></pre></td></tr></table></figure>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;服务器资源url&quot; download&#x3D;&quot;下载时文件名.docx&quot;&gt;点击显示名&lt;&#x2F;a&gt;</span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>require.context 前端工程自动化</title>
    <url>/2021/01/10/technical/technical02/</url>
    <content><![CDATA[<h3 id="require-context-介绍"><a href="#require-context-介绍" class="headerlink" title="require.context 介绍"></a>require.context 介绍</h3><blockquote>
<p>1.require.context 是一个webpack的api<br>2.通过执行require.context 函数获取一个特定的上下文，主要用来实现自动化导入模块</p>
</blockquote>
<h3 id="语法解析"><a href="#语法解析" class="headerlink" title="语法解析"></a>语法解析</h3><blockquote>
<p>语法: require.context(directory, useSubdirectories, regExp);</p>
</blockquote>
<ol>
<li>require.context函数接受三个参数<ul>
<li>directory 读取文件的路径</li>
<li>useSubdirectories 是否遍历文件的子目录</li>
<li>regExp 匹配文件的正则 </li>
</ul>
</li>
</ol>
<ol start="2">
<li><p>require.context函数执行后返回的是一个<strong>函数</strong>，并且这个函数有三个属性</p>
<img src="/images/2020/require_context_1.png" style="margin-left:30px" />

<ul>
<li><strong>id</strong> 属性返回了<strong>匹配</strong>的文件夹相对于工程的相对路径 是否遍历子目录 匹配文件的正则 组成的字符串 </li>
<li><strong>keys</strong> 执行keys方法 返回了匹配文件的文件名组成的数组<img src="/images/2020/require_context_3.png" style="margin-left:0px" />
<img src="/images/2020/require_context_2.png" style="margin-left:0px" /></li>
<li><strong>reslove</strong> 方法接受一个keys方法执行结果的数组中文件名 并返回当前文件相对于整个工程的相对路径<img src="/images/2020/require_context_5.png" style="margin-left:0px" />
<img src="/images/2020/require_context_4.png" style="margin-left:0px" />


</li>
</ul>
</li>
</ol>
<ol start="3">
<li>require.context函数执行后返回的是一个<strong>函数</strong>，这个<strong>函数</strong>执行后会返回一个模块<ul>
<li>这个函数也接受一个参数（匹配的文件名）为参数，函数执行返回的是一个模块，<strong>这个模块和使用import导入的模块是一样的</strong><img src="/images/2020/require_context_6.png" style="margin-left:0px" />
<img src="/images/2020/require_context_7.png" style="margin-left:0px" />


</li>
</ul>
</li>
</ol>
<h3 id="vue-项目中使用场景"><a href="#vue-项目中使用场景" class="headerlink" title="vue 项目中使用场景"></a>vue 项目中使用场景</h3><ul>
<li>自动化引入路由模块<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let routers &#x3D; []</span></pre></td></tr><tr><td class="code"><pre><span class="line">const requireContext &#x3D; require.context(&#39;.&#x2F;modules&#39;, false, &#x2F;\.js$&#x2F;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">requireContext.keys().forEach(fileName &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const routerModule &#x3D; requireContext(fileName)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  routers &#x3D; [...routers, ...(routerModule.default || routerModule)]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">export const asyncRoutes &#x3D; routers || []</span></pre></td></tr></table></figure></li>
<li>自动化引入vuex模块<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import Vuex from &#39;vuex&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const requireContext &#x3D; require.context(&#39;.&#x2F;modules&#39;, false, &#x2F;\.js$&#x2F;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">const modules &#x3D; requireContext.keys().reduce((modules, fileName) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 使用文件名称作为vuex模块名称</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const moduleName &#x3D; fileName.replace(&#x2F;^\.\&#x2F;(.*)\.\w+$&#x2F;, &#39;$1&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const value &#x3D; requireContext(fileName)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  modules[moduleName] &#x3D; value.default</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return modules</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;, &#123;&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Vue.use(Vuex)</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default new Vuex.Store(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  modules</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure></li>
<li>自动化引入svg<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const requireAll &#x3D; requireContext &#x3D;&gt; requireContext.keys().map(requireContext);</span></pre></td></tr><tr><td class="code"><pre><span class="line">const req &#x3D; require.context(&quot;.&#x2F;svg&quot;, false, &#x2F;\.svg$&#x2F;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">requireAll(req);</span></pre></td></tr></table></figure></li>
<li>自动化全局注册组件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const requireContext &#x3D; require.context(&#39;.&#x2F;&#39;, false, &#x2F;\.vue$&#x2F;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">requireContext.keys().forEach(fileName &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const requireModule &#x3D; requireContext(fileName)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const componentModule &#x3D; requireModule.default || requireModule</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 使用文件名称作为组件名称</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const componentName &#x3D; fileName.replace(&#x2F;^\.\&#x2F;(.*)\.\w+$&#x2F;, &#39;$1&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Vue.component(componentName, componentModule)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>使用koa构建基本服务</title>
    <url>/2022/03/10/server/server08/</url>
    <content><![CDATA[<h3 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h3><ol>
<li>创建模板<br><a href="https://xiaoqi0123.gitee.io/2021/02/07/server/server03/" target="_blank" rel="noopener">koa2脚手架构建项目文档</a></li>
</ol>
<ol start="2">
<li>目录结构规划调整<img style="margin:-5px 0 0 -10px;width:220px" src="/images/2022/koa-server-01.png">
- 新增logs 存放日志 <br/>
- 新增src/conf 环境配置 <br/>
- 新增src/controller 控制层 <br/>
- 新增src/db 数据库配置 <br/>
- 新增src/middleware 中间件 <br/>
- 新增src/model 公共模块 <br/>
- 新增src/routes 路由 <br/>
- 新增src/utils 工具

</li>
</ol>
<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ol>
<li>cross-env下载安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev cross-env</span></pre></td></tr></table></figure>


</li>
</ol>
<ol start="2">
<li><p>package.json中调整scripts命令配置</p>
<img style="margin:-22px 0 0 -10px;width:488px" src="/images/2022/koa-server-02.png">
- --inspect=9229项目在chrome://inspect中debugger
<br/>

<p>- <a href="https://xiaoqi0123.gitee.io/2021/02/09/server/server07/" target="_blank" rel="noopener">pm2配置参照文档</a> 根目录添加pm2.conf.json的配置文件</p>
</li>
</ol>
<ol start="3">
<li>src/conf环境配置项<img style="margin:-5px 0 0 -10px;width:220px" src="/images/2022/koa-server-03.png">
- 根据cross-env配置的环境，创建对应的环境配置文件
<img style="margin:-5px 0 0 -10px;width:488px" src="/images/2022/koa-server-04.png">
- 根据运行的环境，读取对应的配置文件

</li>
</ol>
<h3 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h3>]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title>常用设计模式一</title>
    <url>/2021/10/22/technical/technical04/</url>
    <content><![CDATA[<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><blockquote>
<p>单：单一<br>例：实例<br>一个构造函数一生只能有一个实例。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var Store &#x3D; (function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  class Store &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    constructor() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      this.state &#x3D; Object.create(&#123;&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    setState &#x3D; (data) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      this.state &#x3D; &#123; ...this.state, ...data &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    getState &#x3D; () &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      return this.state;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  let instance &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return function (...arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (!instance) instance &#x3D; new Store(...arg);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return instance</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)();</span></pre></td></tr><tr><td class="code"><pre><span class="line">var s1 &#x3D; new Store();</span></pre></td></tr></table></figure>
<p>惰性单例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var getSingle &#x3D; function( fn )&#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">  var result; </span></pre></td></tr><tr><td class="code"><pre><span class="line">  return function()&#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    return result || ( result &#x3D; fn .apply(this, arguments ) ); </span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125; </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">var createLoginLayer &#x3D; function()&#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">  var div &#x3D; document.createElement( &#39;div&#39; ); </span></pre></td></tr><tr><td class="code"><pre><span class="line">  div.innerHTML &#x3D; &#39;我是登录浮窗&#39;; </span></pre></td></tr><tr><td class="code"><pre><span class="line">  div.style.display &#x3D; &#39;none&#39;; </span></pre></td></tr><tr><td class="code"><pre><span class="line">  document.body.appendChild( div ); </span></pre></td></tr><tr><td class="code"><pre><span class="line">  return div; </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;; </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">var createSingleLoginLayer &#x3D; getSingle( createLoginLayer ); </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">document.getElementById( &#39;loginBtn&#39; ).onclick &#x3D; function()&#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">  var loginLayer &#x3D; createSingleLoginLayer(); </span></pre></td></tr><tr><td class="code"><pre><span class="line">  loginLayer.style.display &#x3D; &#39;block&#39;; </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>


<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><blockquote>
<p>观察者：需要具备<strong>自身标识</strong>，与<strong>相应事件</strong><br>被观察者：需要具备<strong>状态</strong>、<strong>修改状态方法</strong>、<strong>观察事件队列</strong>、添加观察者、移除观察者<br><strong>观察者</strong>监控<strong>被观察者</strong>的状态，状态发生变化，触发相应事件。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 观察者构造函数</span></pre></td></tr><tr><td class="code"><pre><span class="line">class Observer &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  constructor(name, fn &#x3D; function () &#123;&#125;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.name &#x3D; name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.fn &#x3D; fn;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建两个观察者</span></pre></td></tr><tr><td class="code"><pre><span class="line">const eat &#x3D; new Observer(&quot;eat&quot;, (state) &#x3D;&gt; &#123; console.log(&#96;$&#123;state&#125;: 吃饭&#96;) &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">const drink &#x3D; new Observer(&quot;drink&quot;, (state) &#x3D;&gt; &#123; console.log(&#96;$&#123;state&#125;: 喝水&#96;) &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 被观察者构造函数</span></pre></td></tr><tr><td class="code"><pre><span class="line">class Subject&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  constructor(state)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 记录状态</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.state &#x3D; state</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 保存观察者</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.observers &#x3D; []</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 修改状态</span></pre></td></tr><tr><td class="code"><pre><span class="line">  setState(val)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.state &#x3D; val</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 触发观察者事件</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.observers.forEach((item) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      item.fn(this.state)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 添加观察者</span></pre></td></tr><tr><td class="code"><pre><span class="line">  addObserver(obs)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.observers &#x3D; this.observers.filter((item) &#x3D;&gt; item !&#x3D;&#x3D; obs)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.observers.push(obs)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 删除观察者</span></pre></td></tr><tr><td class="code"><pre><span class="line">  delObserver(obs)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.observers &#x3D; this.observers.filter((item) &#x3D;&gt; item !&#x3D;&#x3D; obs)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">const p &#x3D; new Subject(&#39;中午&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">p.addObserver(eat)</span></pre></td></tr><tr><td class="code"><pre><span class="line">p.addObserver(drink)</span></pre></td></tr></table></figure>

<h3 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h3><blockquote>
<p>订阅：对事件进行订阅，事件发生时执行订阅<br>发布：触发对应类型事件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Observer &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  constructor() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 消息队列</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.message &#x3D; &#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 添加消息队列</span></pre></td></tr><tr><td class="code"><pre><span class="line">  on(type, fn) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (!this.message[type]) this.message[type] &#x3D; [];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.message[type].push(fn);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 移除消息队列</span></pre></td></tr><tr><td class="code"><pre><span class="line">  off(type, fn) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (!fn) return delete this.message[type];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (!this.message[type]) return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.message[type] &#x3D; this.message[type].filter((item) &#x3D;&gt; item !&#x3D;&#x3D; fn);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 触发消息队列</span></pre></td></tr><tr><td class="code"><pre><span class="line">  emit(type, val) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (!this.message[type]) return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.message[type].forEach((item) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      item(val);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><blockquote>
<p>一个问题有多中方案解决，未来可能还会有新的方案</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var calcPrice &#x3D; (function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 优惠卷</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const coupons &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;100_10&quot;:function(price)&#123; return price - 10 &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;200_25&quot;:function(price)&#123; return price - 20 &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  const calcPrice &#x3D; function (price,type) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 优惠卷不存在</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (!coupons[type]) return false</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    return coupons[type](price)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 添加策略</span></pre></td></tr><tr><td class="code"><pre><span class="line">  calcPrice.add &#x3D; (type,fn&#x3D;function()&#123; &#125;) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 策略已存在</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (coupons[type]) return </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    coupons[type] &#x3D; fn</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  return calcPrice</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 添加优惠卷</span></pre></td></tr><tr><td class="code"><pre><span class="line">calcPrice.add(&#39;200_15&#39;,(price) &#x3D;&gt; &#123; return price - 15 &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(&#39;calcPrice :&gt;&gt; &#39;, calcPrice(320,&#39;200_15&#39;));</span></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>technical</category>
      </categories>
      <tags>
        <tag>technical</tag>
      </tags>
  </entry>
  <entry>
    <title>常用git操作</title>
    <url>/2022/01/28/technical/technical05/</url>
    <content><![CDATA[<ol>
<li>查看分支<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch (查看本地分支)</span></pre></td></tr><tr><td class="code"><pre><span class="line">git branch -r (查看远程分支)</span></pre></td></tr></table></figure></li>
<li>查看日志<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reflog (查看操作日志)</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log</span></pre></td></tr><tr><td class="code"><pre><span class="line">git log --oneline -10 (查看10行单行简洁日志)</span></pre></td></tr><tr><td class="code"><pre><span class="line">git log --oneline --graph -10 (查看10行单行简洁拓扑图日志)</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status</span></pre></td></tr></table></figure></li>
<li>创建分支<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout (切换分支)</span></pre></td></tr><tr><td class="code"><pre><span class="line">git checkout -b new_branch (基于当前命令所在分支创建分支)</span></pre></td></tr><tr><td class="code"><pre><span class="line">git checkout -b new_branch origin&#x2F;master (基于远程master创建新分支)</span></pre></td></tr><tr><td class="code"><pre><span class="line">git push origin branch_name (本地分支推送到远程分支)</span></pre></td></tr></table></figure></li>
<li>删除分支<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch -d branch_name (删除本地分支)</span></pre></td></tr><tr><td class="code"><pre><span class="line">git push origin -d branch_name (删除远程分支)</span></pre></td></tr></table></figure></li>
<li>获取代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone </span></pre></td></tr><tr><td class="code"><pre><span class="line">git fetch (将远程厂库信息更新至本地)</span></pre></td></tr><tr><td class="code"><pre><span class="line">git pull (将远程信息更新至本地并进行代码合并操作 等同于 git fetch + git merge)</span></pre></td></tr></table></figure></li>
<li>提交代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .</span></pre></td></tr><tr><td class="code"><pre><span class="line">git commit -m &#39;备注&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">git fetch</span></pre></td></tr><tr><td class="code"><pre><span class="line">git rebase &#x2F; git merge</span></pre></td></tr><tr><td class="code"><pre><span class="line">git push origin master</span></pre></td></tr></table></figure></li>
<li>追加提交<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .</span></pre></td></tr><tr><td class="code"><pre><span class="line">git commit --amend</span></pre></td></tr><tr><td class="code"><pre><span class="line">git push origin master --force</span></pre></td></tr></table></figure></li>
<li>代码合并<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git merge branch (目标分支合并至当前分支，当前分支再合并到目标分支)</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rebase branch_name (目标分支合并至当前分支)</span></pre></td></tr><tr><td class="code"><pre><span class="line">rebase 冲突解决</span></pre></td></tr><tr><td class="code"><pre><span class="line">  1.解决冲突</span></pre></td></tr><tr><td class="code"><pre><span class="line">  2.git add .</span></pre></td></tr><tr><td class="code"><pre><span class="line">  3.git rebase --continue</span></pre></td></tr><tr><td class="code"><pre><span class="line">rebase 取消</span></pre></td></tr><tr><td class="code"><pre><span class="line">  git rebase --abort</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git cherry-pick log_hash (把对应提交检出合并至当前分支)</span></pre></td></tr><tr><td class="code"><pre><span class="line">cherry-pick 冲突解决</span></pre></td></tr><tr><td class="code"><pre><span class="line">  1.解决冲突</span></pre></td></tr><tr><td class="code"><pre><span class="line">  2.git add .</span></pre></td></tr><tr><td class="code"><pre><span class="line">  3.git cherry-pick --continue</span></pre></td></tr><tr><td class="code"><pre><span class="line">cherry-pick 取消</span></pre></td></tr><tr><td class="code"><pre><span class="line">  git cherry-pick --abort</span></pre></td></tr></table></figure></li>
<li>提交合并<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rebase -i HEAD~3 (合并最近3次提交)</span></pre></td></tr><tr><td class="code"><pre><span class="line">vm 修改操作 (pick正常选中, squash选中将当前commit与上一个commit合并)</span></pre></td></tr><tr><td class="code"><pre><span class="line">vm 编辑commit信息 (删除修改合并信息)</span></pre></td></tr></table></figure></li>
<li>重置代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git fetch origin</span></pre></td></tr><tr><td class="code"><pre><span class="line">git reset --hard origin&#x2F;master</span></pre></td></tr></table></figure></li>
<li>代码暂存<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git stash &#x2F; git stash save stash_name (将所有未提交的修改（工作区和暂存区）保存至堆栈中)</span></pre></td></tr><tr><td class="code"><pre><span class="line">git stash list (查看当前stash中的内容)</span></pre></td></tr><tr><td class="code"><pre><span class="line">git stash pop (将当前stash中的内容取回)</span></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>technical</category>
      </categories>
      <tags>
        <tag>technical</tag>
      </tags>
  </entry>
  <entry>
    <title>常用设计模式二</title>
    <url>/2021/10/25/technical/technical06/</url>
    <content><![CDATA[<h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><blockquote>
<p>主要对单一原则事件进行代理，一般会处理事件的触发条件、触发时机，或者对计算结果的缓存。 </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 图片 loading 加载</span></pre></td></tr><tr><td class="code"><pre><span class="line">var myImage &#x3D; (function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  var imageNode &#x3D; document.createElement(&#39;img&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  document.body.appendChild(imageNode)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    setSrc: function (src) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      imageNode.src &#x3D; src</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">var proxyImage &#x3D; (function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  var img &#x3D; new Image()</span></pre></td></tr><tr><td class="code"><pre><span class="line">  img.onload &#x3D; function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    myImage.setSrc(this.src)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    setSrc: function (src) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      myImage.setSrc(&#39;.&#x2F;loading.png&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      img.src &#x3D; src</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">proxyImage.setSrc(&#39;https:&#x2F;&#x2F;cdn9-banquan.ituchong.com&#x2F;weili&#x2F;l&#x2F;882636893449224308.webp&#39;)</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 计算结果缓存</span></pre></td></tr><tr><td class="code"><pre><span class="line">var mult &#x3D; function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  var a &#x3D; 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">  for (var i &#x3D; 0; i &lt; arguments.length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    a &#x3D; a * arguments[i]</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return a</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">var proxyMult &#x3D; (function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  var cache &#x3D; &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    var args &#x3D; Array.prototype.join.call(arguments, &#39;,&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (cache[args]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      return cache[args]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return (cache[args] &#x3D; mult.apply(this, arguments))</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)()</span></pre></td></tr></table></figure>


<h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><blockquote>
<p>提供一种方法顺序访问的一个方法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 文件切片</span></pre></td></tr><tr><td class="code"><pre><span class="line">var getSingle &#x3D; function (fn) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  var result &#x3D; null</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return result || (result &#x3D; fn.apply(this, arguments))</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">var createFileInput &#x3D; function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  var input &#x3D; document.createElement(&#39;input&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  input.setAttribute(&#39;type&#39;, &#39;file&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  document.body.appendChild(input)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return input</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">var createSingleFileInput &#x3D; getSingle(createFileInput)</span></pre></td></tr><tr><td class="code"><pre><span class="line">var fileInput &#x3D; createSingleFileInput()</span></pre></td></tr><tr><td class="code"><pre><span class="line">var fileIterator  &#x3D; null</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">fileInput.onchange &#x3D; function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  var file &#x3D; this.files[0]</span></pre></td></tr><tr><td class="code"><pre><span class="line">  var chunkSize &#x3D; 1024 * 1024; &#x2F;&#x2F; 分片大小 1M</span></pre></td></tr><tr><td class="code"><pre><span class="line">  fileIterator &#x3D; new FileSliceIterator(file, chunkSize)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">var FileSliceIterator &#x3D; function (file, chunkSize) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  var start &#x3D; 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">  var end &#x3D; chunkSize</span></pre></td></tr><tr><td class="code"><pre><span class="line">  var next &#x3D; function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    start +&#x3D; chunkSize</span></pre></td></tr><tr><td class="code"><pre><span class="line">    end +&#x3D; chunkSize</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  var isDone &#x3D; function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return start &gt;&#x3D; file.size</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  var getCurrItem &#x3D; function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return file.slice(start, end)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: next,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    isDone: isDone,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    getCurrItem: getCurrItem,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">var uploadFile &#x3D; function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  while (!fileIterator.isDone()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(&#39;fileIterator.getCurrItem()&#39;, fileIterator.getCurrItem())</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fileIterator.next()</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>technical</category>
      </categories>
      <tags>
        <tag>technical</tag>
      </tags>
  </entry>
  <entry>
    <title>Monorepo</title>
    <url>/2022/07/13/technical/technical07/</url>
    <content><![CDATA[<blockquote>
<p>Monorepo是一个仓库，分为多个包管理的一直管理模式。<br><a href="https://juejin.cn/post/6944877410827370504" target="_blank" rel="noopener">https://juejin.cn/post/6944877410827370504</a></p>
</blockquote>
<h3 id="pnpm构建"><a href="#pnpm构建" class="headerlink" title="pnpm构建"></a>pnpm构建</h3><ol>
<li>pnpm安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g pnpm</span></pre></td></tr></table></figure></li>
<li>创建workspace<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pnpm init</span></pre></td></tr></table></figure></li>
<li>根目录创建pnpm-workspace.yaml<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">packages:</span></pre></td></tr><tr><td class="code"><pre><span class="line">- &quot;packages&#x2F;**&quot;</span></pre></td></tr></table></figure></li>
<li>构建目录<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├─ packages</span></pre></td></tr><tr><td class="code"><pre><span class="line">│  ├─ project01</span></pre></td></tr><tr><td class="code"><pre><span class="line">│  │  ├─ package.json</span></pre></td></tr><tr><td class="code"><pre><span class="line">│  │  └─src</span></pre></td></tr><tr><td class="code"><pre><span class="line">│  │     └─ index.js</span></pre></td></tr><tr><td class="code"><pre><span class="line">│  └─ utils</span></pre></td></tr><tr><td class="code"><pre><span class="line">│     ├─ index.js</span></pre></td></tr><tr><td class="code"><pre><span class="line">│     └─ package.json</span></pre></td></tr><tr><td class="code"><pre><span class="line">├─ package.json</span></pre></td></tr><tr><td class="code"><pre><span class="line">├─ pnpm-lock.yaml</span></pre></td></tr><tr><td class="code"><pre><span class="line">└─ pnpm-workspace.yaml</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="pnpm常用命令"><a href="#pnpm常用命令" class="headerlink" title="pnpm常用命令"></a>pnpm常用命令</h3><ol>
<li>-F –filter &lt;package_name&gt; <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; utils模块单独安装dayjs</span></pre></td></tr><tr><td class="code"><pre><span class="line">pnpm -F @packages&#x2F;utils add dayjs</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; utils模块单独移除dayjs</span></pre></td></tr><tr><td class="code"><pre><span class="line">pnpm -F @packages&#x2F;utils remove dayjs</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 根据utils下package.json安装所有包</span></pre></td></tr><tr><td class="code"><pre><span class="line">pnpm -F @packages&#x2F;utils install</span></pre></td></tr></table></figure></li>
<li>-w, –workspace-root<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 根目录单独安装webpack</span></pre></td></tr><tr><td class="code"><pre><span class="line">pnpm -w add webpack -D</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="lib之间相互引用"><a href="#lib之间相互引用" class="headerlink" title="lib之间相互引用"></a>lib之间相互引用</h3><ol>
<li>uitls子包模块<br>安装 dayjs<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pnpm -F @package&#x2F;utils add dayjs</span></pre></td></tr></table></figure>
index.js function 导出<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import dayjs from &#39;dayjs&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export function format(time, f &#x3D; &#39;YYYY-MM-DD&#39;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return &#39;日期：&#39; + dayjs(time).format(f)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
package.json<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>project01子包模块<br>安装utils子包模块<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pnpm -F project01 add @package&#x2F;utils</span></pre></td></tr></table></figure>
package.json<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;@packages&#x2F;utils&quot;: &quot;workspace:*&quot;, &#x2F;&#x2F; 默认为&quot;workspace:1.0.0&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
命名空间参照: <a href="https://pnpm.io/zh/workspaces" target="_blank" rel="noopener">workspace</a><br>文件中使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; format &#125; from &#39;@packages&#x2F;utils&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(&#39;format(new Date())&#39;, format(new Date()))</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="changesets配置"><a href="#changesets配置" class="headerlink" title="changesets配置"></a>changesets配置</h3><ol>
<li>@changesets/cli<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pnpm -w add @changesets&#x2F;cli -D</span></pre></td></tr></table></figure></li>
<li>初始化<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pnpm changeset init</span></pre></td></tr></table></figure>
执行完命令后根目录下生成.changeset目录<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├─ .changeset</span></pre></td></tr><tr><td class="code"><pre><span class="line">│  ├─ config.json</span></pre></td></tr><tr><td class="code"><pre><span class="line">│  └─ README.md</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;$schema&quot;: &quot;https:&#x2F;&#x2F;unpkg.com&#x2F;@changesets&#x2F;config@2.0.1&#x2F;schema.json&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;changelog&quot;: &quot;@changesets&#x2F;cli&#x2F;changelog&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 不要让 changeset 在 publish 的时候帮我们做 git add</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;commit&quot;: false,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;fixed&quot;: [],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 配置哪些包要共享版本</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;linked&quot;: [],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; access: 公私有安全设定，内网建议 restricted ，开源使用 public</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;access&quot;: &quot;restricted&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 项目git主分支</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;baseBranch&quot;: &quot;main&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 确保某包依赖的包发生 upgrade，该包也要发生 version upgrade 的衡量单位（量级）</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;updateInternalDependencies&quot;: &quot;patch&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 不需要变动 version 的包</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;ignore&quot;: []</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>根目录package.json script 配置构建<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;build&quot;: &quot;pnpm --filter&#x3D;@packages&#x2F;* run build&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;clear&quot;: &quot;rimraf &#39;packages&#x2F;*&#x2F;&#123;lib,node_modules&#125;&#39; &amp;&amp; rimraf node_modules&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;changeset&quot;: &quot;changeset&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;version-packages&quot;: &quot;changeset version&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;,</span></pre></td></tr></table></figure>
<ul>
<li>build: 打包所有子包模块。运行子包模块package.json中build命令。</li>
<li>clear: 删除所有 node_modules及lib。需安装rimraf。</li>
</ul>
</li>
</ol>
<h3 id="changesets发包"><a href="#changesets发包" class="headerlink" title="changesets发包"></a>changesets发包</h3><ol start="4">
<li>changeset<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pnpm changeset</span></pre></td></tr></table></figure>
<ul>
<li>选择需要发布的包<img src="/images/2022/configuration-monorepo-01.png"></li>
<li>选择版本一共有三种类型，分别是 major、minor、patch。（主版本、次版本、修订版本）</li>
<li>.changeset 下生成文件 stale-swans-xxxx.md</li>
</ul>
</li>
<li>version-packages<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pnpm version-packages</span></pre></td></tr></table></figure>
<ul>
<li>修改子包模块package.json 的version。</li>
<li>生成 CHANGELOG.md 文件</li>
</ul>
</li>
<li>npm login<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm login &#x2F;&#x2F; 登录命令</span></pre></td></tr><tr><td class="code"><pre><span class="line">Username: &#x2F;&#x2F; 输入注册时候的用户名</span></pre></td></tr><tr><td class="code"><pre><span class="line">Password: &#x2F;&#x2F; 密码</span></pre></td></tr><tr><td class="code"><pre><span class="line">Email: (this IS public) &#x2F;&#x2F; 注册时的邮箱</span></pre></td></tr></table></figure></li>
<li>npm publish<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pnpm changeset publish</span></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>TS泛型</title>
    <url>/2021/01/11/typescript/typescript01/</url>
    <content><![CDATA[<h3 id="简单理解"><a href="#简单理解" class="headerlink" title="简单理解"></a>简单理解</h3><blockquote>
<p>泛型其目的是解决 类 接口 方法的复用性、以及对不特定数据类型的支持</p>
</blockquote>
<h3 id="泛型语法"><a href="#泛型语法" class="headerlink" title="泛型语法"></a>泛型语法</h3><ul>
<li>泛型如同传递参数一样，将类型视为一种特殊变量的形式，给参数或返回值动态的指定类型<img src="/images/2021/ts_03.png" style="margin-left:0;width:280px" /></li>
<li>泛型并不是只能定义一个类型变量，可以定义任何数量的类型变量<img src="/images/2021/ts_04.png" style="margin-left:0;width:380px" />

</li>
</ul>
<h3 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h3>  <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>&lt;<span class="title">T</span>&gt;(<span class="params">value: T</span>): <span class="title">T</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> value</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">getData&lt;<span class="built_in">number</span>&gt;(<span class="number">123</span>)</span></pre></td></tr></table></figure>

<h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3>  <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> DataClass&lt;T&gt;&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> list: T[] = []</span></pre></td></tr><tr><td class="code"><pre><span class="line">  setData(value: T): <span class="built_in">void</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.list.push(value)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  getdata(): T[] &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.list</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> d1 = <span class="keyword">new</span> DataClass&lt;<span class="built_in">number</span>&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> d2 = <span class="keyword">new</span> DataClass&lt;<span class="built_in">string</span>&gt;();</span></pre></td></tr></table></figure>

<h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3>  <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> GenericIdentityFn&lt;T&gt; &#123;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    (arg: T): T;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>TS接口（interface）</title>
    <url>/2020/11/08/typescript/typescript03/</url>
    <content><![CDATA[<h3 id="接口interface"><a href="#接口interface" class="headerlink" title="接口interface"></a>接口interface</h3><ol>
<li>为什么需要接口?<ul>
<li>为了定义对象内的各种属性。</li>
</ul>
</li>
<li>什么是接口?<ul>
<li>同 string,number.boolean 一样，接口也是一种类型，目的是为了约束对象内的各个属性。</li>
</ul>
</li>
</ol>
<h3 id="严格约束对象字段及字段类型"><a href="#严格约束对象字段及字段类型" class="headerlink" title="严格约束对象字段及字段类型"></a>严格约束对象字段及字段类型</h3><ol>
<li>声明的对象的字段，及字段对应的类型必须和接口中一致，不可多字段，不可少字段，不可字段类型不一致。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface Person &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  username: string,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  userage: number</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const per: Person &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  username: &#39;xiao qi&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  userage: 18</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>同声明变量一样字段 也可以用 | 指定多种类型<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface Person &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  username: string,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  userage: number | string </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const per: Person &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  username: &#39;lili&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  userage: &#39;18岁&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">per.userage &#x3D; 18</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="属性字段可能不在情况"><a href="#属性字段可能不在情况" class="headerlink" title="属性字段可能不在情况"></a>属性字段可能不在情况</h3><ul>
<li>使用可选属性，在属性名后面添加？实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface Person &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  username: string,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  userage: number,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  address?: string</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const per: Person &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  username: &#39;xiao qi&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  userage: 18</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">per.address &#x3D; &#39;武汉&#39;</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="属性字段可能不够情况"><a href="#属性字段可能不够情况" class="headerlink" title="属性字段可能不够情况"></a>属性字段可能不够情况</h3><ul>
<li>使用索引签名propName，定义对象中的key和value结构，则后续属性只要满足这个结构就可以无限添加字段<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface Person1 &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  [propName: string]: string</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const per1: Person1 &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  username: &#39;xiao qi&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  sex: &#39;男&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  2: &#39;la la&#39; &#x2F;&#x2F; tips：当propName为string无论什么key都会转成字符串，不会报错</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">interface Person2 &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  [propName: number]: number</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const per2: Person2 &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  0: 123</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h3><ul>
<li>同JS的class类一样，TS中的接口也可以继承<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface A &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  a: string</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">interface B &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  b: number</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">interface C extends A, B &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  c: boolean</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const obj: C &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  a: &#39;aaaaa&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  b: 11111,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  c: true</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="对函数约束"><a href="#对函数约束" class="headerlink" title="对函数约束"></a>对函数约束</h3><ul>
<li>函数本身也是对象，也可以用接口来定义<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface Sum &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  (a: number, b: number): number</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const sum: Sum &#x3D; function (x, y) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return x + y</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">sum(1, 3)</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="对类约束"><a href="#对类约束" class="headerlink" title="对类约束"></a>对类约束</h3><ul>
<li>定义完成接口后，类通过implements进行实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface Animal &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name: string,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  eat(name: string): void</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">class Dog implements Animal &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  public name: string;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  constructor(name: string) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.name &#x3D; name</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  eat(food: string): void &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    alert(&#96;$&#123;this.name&#125;: 吃$&#123;food&#125;！&#96;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const d: Dog &#x3D; new Dog(&#39;旺柴&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">d.eat(&#39;狗粮&#39;)</span></pre></td></tr></table></figure></li>
<li>既可以继承父类，也可以实现接口<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface Animal &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  eat(): void</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">interface Person extends Animal &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  work(): void</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">class Programmer &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  public name: string</span></pre></td></tr><tr><td class="code"><pre><span class="line">  constructor(name: string) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.name &#x3D; name</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  work(): void &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    alert(&#96;$&#123;this.name&#125;写代码！&#96;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">class Web extends Programmer implements Person &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  constructor(name: string) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    super(name)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  eat(): void &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    alert(&#96;$&#123;this.name&#125;吃米饭！&#96;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const p: Person &#x3D; new Web(&#39;张三&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">p.work()</span></pre></td></tr><tr><td class="code"><pre><span class="line">p.eat()</span></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>TS函数声明</title>
    <url>/2020/11/21/typescript/typescript02/</url>
    <content><![CDATA[<blockquote>
<p>TS中的函数和js中的大部分相同，不同之处自在于TS会对函数的形参以及返回值进行类型声明。</p>
</blockquote>
<h3 id="TS函数的类型"><a href="#TS函数的类型" class="headerlink" title="TS函数的类型"></a>TS函数的类型</h3><ol>
<li>命名函数<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function test(str: string): void &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(&#39;str :&gt;&gt; &#39;, str);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">test(&#39;Hello World!&#39;)</span></pre></td></tr></table></figure></li>
<li>匿名函数<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const test &#x3D; function (str: string): void &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(&#39;str :&gt;&gt; &#39;, str);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">test(&#39;Hello World!&#39;)</span></pre></td></tr></table></figure></li>
<li>箭头函数<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const test &#x3D; (str: string): void &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(&#39;str :&gt;&gt; &#39;, str);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">test(&#39;Hello World!&#39;)</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="函数声明分离"><a href="#函数声明分离" class="headerlink" title="函数声明分离"></a>函数声明分离</h3><ol>
<li>使用type声明函数<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type Fun &#x3D; (a: string, b: number) &#x3D;&gt; void</span></pre></td></tr><tr><td class="code"><pre><span class="line">const test: Fun &#x3D; function (name, age) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(&#96;名字：$&#123;name&#125;，年龄：$&#123;age&#125;&#96;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">test(&#39;xq&#39;, 18)</span></pre></td></tr></table></figure></li>
<li>使用接口分离函数<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface Fun &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  (a: string, b: number): void</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const test: Fun &#x3D; function (name, age) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(&#96;名字：$&#123;name&#125;，年龄：$&#123;age&#125;&#96;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">test(&#39;xq&#39;, 18)</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><ol>
<li>可选参数<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function test(a: number, b?: number): void &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(&#39;a :&gt;&gt; &#39;, a);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(&#39;b :&gt;&gt; &#39;, b);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">test(1); &#x2F;&#x2F; a :&gt;&gt;  1 b :&gt;&gt;  undefined</span></pre></td></tr><tr><td class="code"><pre><span class="line">test(1, 2); &#x2F;&#x2F; a :&gt;&gt;  1 b :&gt;&gt;  2</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 可选参数可一项或多项</span></pre></td></tr><tr><td class="code"><pre><span class="line">function test(a: number, b?: number, c?: number): number &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return a + (b || 0) + (c || 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 可选参数后面只能是可选参数</span></pre></td></tr><tr><td class="code"><pre><span class="line">function test(a: number, b?: number, c: number): number &#123;  &#x2F;&#x2F; 报错</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return a + (b || 0) + c</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>默认参数<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function test(a: number, b: number &#x3D; 2): number &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return a + b</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(&#39;test(1) :&gt;&gt; &#39;, test(1)); &#x2F;&#x2F; 3</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(&#39;test(1,3) :&gt;&gt; &#39;, test(1, 3));&#x2F;&#x2F; 4</span></pre></td></tr></table></figure></li>
<li>剩余参数<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function test(a: number, ...arg: number[]): number &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(&#39;a :&gt;&gt; &#39;, a);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  let sum &#x3D; arg.reduce((total, cur) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return total &#x3D; cur + total</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;, 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return a + sum</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(&#39;total:&gt;&gt; &#39;, test(1, 2, 3, 4)); &#x2F;&#x2F; a :&gt;&gt;  1 total:&gt;&gt;  10</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><ol>
<li>当两个函数名同名，但他们的参数不一样，这时会出现函数重载情况。ts为了兼容es5 es6 重载的写法和java存在区别。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function test(str: string): string</span></pre></td></tr><tr><td class="code"><pre><span class="line">function test(num: number): number</span></pre></td></tr><tr><td class="code"><pre><span class="line">function test(params: any): any &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  if (typeof params &#x3D;&#x3D;&#x3D; &#39;string&#39;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return params + &#39;Hello&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125; else if (typeof params &#x3D;&#x3D;&#x3D; &#39;number&#39;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return params + 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(test(&#39;你好！&#39;)); &#x2F;&#x2F; 你好！Hello</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(test(2)); &#x2F;&#x2F; 3</span></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>pdfjs</title>
    <url>/2024/03/06/technical/technical08/</url>
    <content><![CDATA[<h3 id="web-viewer"><a href="#web-viewer" class="headerlink" title="web viewer"></a>web viewer</h3><p>1.通过官网 <a href="https://mozilla.github.io/pdf.js/getting_started/#download" target="_blank" rel="noopener">https://mozilla.github.io/pdf.js/getting_started/#download</a> 下载预览工具包。<br><img src="/images/2024/pdfjs-001.png" style="margin-left: 0px;"></p>
<p>2.将下载的文件夹解压到项目中。<br><img src="/images/2024/pdfjs-002.png" style="margin-left: 0px; width: 220px;"></p>
<p>3.项目中可通过 viewer.html 页面后面拼接参数预览，也可与 iframe 嵌套页面上使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;iframe</span></pre></td></tr><tr><td class="code"><pre><span class="line">    :src&#x3D;&quot;&#96;&#x2F;pdfjs-4.0.379-dist&#x2F;web&#x2F;viewer.html?file&#x3D;$&#123;encodeURIComponent(&#39;https:&#x2F;&#x2F;mozilla.github.io&#x2F;pdf.js&#x2F;web&#x2F;compressed.tracemonkey-pldi-09.pdf&#39;)&#125;&#96;&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&lt;&#x2F;iframe&gt;</span></pre></td></tr></table></figure>

<p>4.地址栏上参数配置</p>
<p>地址栏<code>?</code>后面参数</p>
<table border="1">
  <tr>
    <th width='180px'>字段</th>
    <th>描述</th>
    <th>值类型</th>
  </tr>
  <tr>
    <td>file</td>
    <td>需要预览的文件地址</td>
    <td>String（注意附件地址中有特殊符号需要使用encodeURIComponent编码处理）</td>
  </tr>
</table>

<p>地址栏<code>#</code>后面参数</p>
<table border="1">
  <tr>
    <th width='180px'>字段</th>
    <th>描述</th>
    <th>值类型</th>
  </tr>
  <tr>
    <td>zoom</td>
    <td>页面缩放方式</td>
    <td>
        auto: 自动调整以适合视图。<br/>
        page-actual: 显示实际大小的页面。<br/>
        page-fit: 调整页面以适合视图。<br/>
        page-width: 调整页面宽度以适合视图。<br/>
        一个具体的百分比值，例如 150 或 200，表示页面应该放大到指定的百分比大小
    </td>
  </tr>
   <tr>
    <td>page</td>
    <td>初始默认页面</td>
    <td>
        Number
    </td>
  </tr>
  <tr>
    <td>pagemode</td>
    <td>侧边栏状态</td>
    <td>
        none：不显示<br/>
        thumbs：缩率图 <br/>
        bookmarks：<br/> 
        attachments
    </td>
  </tr>
</table>

<p><a href="https://github.com/mozilla/pdf.js/wiki/Viewer-options" target="_blank" rel="noopener">https://github.com/mozilla/pdf.js/wiki/Viewer-options</a></p>
<p>5.注意事项<br>在线pdf地址处理，注释viewer.mjs内代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const HOSTED_VIEWER_ORIGINS &#x3D; [&quot;null&quot;, &quot;http:&#x2F;&#x2F;mozilla.github.io&quot;, &quot;https:&#x2F;&#x2F;mozilla.github.io&quot;];</span></pre></td></tr><tr><td class="code"><pre><span class="line">  var validateFileURL &#x3D; function (file) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (!file) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      const viewerOrigin &#x3D; new URL(window.location.href).origin || &quot;null&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      if (HOSTED_VIEWER_ORIGINS.includes(viewerOrigin)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      const fileOrigin &#x3D; new URL(file, window.location.href).origin;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; 需要注释代码</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; if (fileOrigin !&#x3D;&#x3D; viewerOrigin) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F;   throw new Error(&quot;file origin does not match viewer&#39;s&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; catch (ex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      PDFViewerApplication.l10n.get(&quot;pdfjs-loading-error&quot;).then(msg &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        PDFViewerApplication._documentError(msg, &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          message: ex?.message</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      throw ex;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="pdfjs-dist"><a href="#pdfjs-dist" class="headerlink" title="pdfjs-dist"></a>pdfjs-dist</h3><p>1.安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i pdfjs-dist</span></pre></td></tr></table></figure>

<p>2.设置pdfjsLib.GlobalWorkerOptions.workerSrc的地址<br>涉及到工程打包构建，文件逻辑路径及名称可能会被转换，这里需要使用动态地址。<br>webpack</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pdfjsLib.GlobalWorkerOptions.workerSrc &#x3D; require(&quot;pdfjs-dist&#x2F;build&#x2F;pdf.worker.min.js&quot;);</span></pre></td></tr></table></figure>

<p>vite</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pdfjsLib.GlobalWorkerOptions.workerSrc &#x3D; new URL(&#39;pdfjs-dist&#x2F;build&#x2F;pdf.worker.min.js&#39;, import.meta.url).href;</span></pre></td></tr></table></figure>

<p>3.通过pdfjsLib.getDocument处理pdf数据，返回一个对象pdfDoc</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const pdfLoadingTask &#x3D; pdfjsLib.getDocument(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  url: url,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  cMapUrl: &#39;&#x2F;cmaps&#x2F;&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  cMapPacked: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  rangeChunkSize: 65536</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> pdfLoadingTask.promise.then(pdfDoc &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  renderPdfCanvas(container, pdfDoc, container)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
<p>4.通过pdfDoc.getPage单独获取第1页的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const renderPdfCanvas &#x3D; async (pdfViewerDom, pdfDoc, container) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 清除原来的pdf画布</span></pre></td></tr><tr><td class="code"><pre><span class="line">  pdfViewerDom.innerHTML &#x3D; &#39;&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 获取总页数</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const totalPage &#x3D; pdfDoc.numPages</span></pre></td></tr><tr><td class="code"><pre><span class="line">  for (let i &#x3D; 1; i &lt;&#x3D; totalPage; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 循环处理pdf的每页</span></pre></td></tr><tr><td class="code"><pre><span class="line">    await renderPdfOnePage(pdfViewerDom, pdfDoc, i, container)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">const renderPdfOnePage &#x3D; async (pdfViewerDom, pdfDoc, pageNum, container) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 创建画布</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const canvas &#x3D; document.createElement(&#39;canvas&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  pdfViewerDom.appendChild(canvas)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const dpr &#x3D; window.devicePixelRatio || 1</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  const currentWidth &#x3D; container.clientWidth</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  await pdfDoc.getPage(pageNum).then(page &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    const ratio &#x3D; dpr &lt; 2 ? 2 : dpr</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    const pdfWidth &#x3D; page.getViewport(&#123; scale: 1 &#125;).width</span></pre></td></tr><tr><td class="code"><pre><span class="line">    const scale &#x3D; currentWidth &#x2F; pdfWidth</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 获取当前pdf页内容, 并设置缩放</span></pre></td></tr><tr><td class="code"><pre><span class="line">    const viewport &#x3D; page.getViewport(&#123; scale: scale &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    canvas.width &#x3D; viewport.width * ratio &#x2F;&#x2F; 实际渲染像素</span></pre></td></tr><tr><td class="code"><pre><span class="line">    canvas.height &#x3D; viewport.height * ratio &#x2F;&#x2F; 实际渲染像素</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    canvas.style.width &#x3D; &#96;$&#123;viewport.width&#125;px&#96; &#x2F;&#x2F; 控制显示大小</span></pre></td></tr><tr><td class="code"><pre><span class="line">    canvas.style.height &#x3D; &#96;$&#123;viewport.height&#125;px&#96; &#x2F;&#x2F; 控制显示大小</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    canvas.getContext(&#39;2d&#39;).setTransform(ratio, 0, 0, ratio, 0, 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    const context &#x3D; canvas.getContext(&#39;2d&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 将pdf当前页内容画到2d画板中</span></pre></td></tr><tr><td class="code"><pre><span class="line">    page.render(&#123; canvasContext: context, viewport &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><a href="https://mozilla.github.io/pdf.js/api/draft/module-pdfjsLib.html" target="_blank" rel="noopener">https://mozilla.github.io/pdf.js/api/draft/module-pdfjsLib.html</a></p>
<h3 id="大文件切片预览"><a href="#大文件切片预览" class="headerlink" title="大文件切片预览"></a>大文件切片预览</h3><p>服务端关键逻辑</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const http &#x3D; require(&quot;http&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">const fs &#x3D; require(&quot;fs&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">const server &#x3D; http.createServer((req, res) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const filePath &#x3D; req.url.split(&quot;&#x2F;&quot;)[1] || &quot;1.pdf&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  fs.stat(filePath, (err, stat) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (err) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      res.writeHead(500, &#123; &quot;Content-Type&quot;: &quot;text&#x2F;plain&quot; &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      res.end(&quot;Internal Server Error&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 设置 CORS 头，允许所有域的请求</span></pre></td></tr><tr><td class="code"><pre><span class="line">    res.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    res.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;GET, POST, PUT, DELETE&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    res.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;Content-Type&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    res.setHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    const range &#x3D; req.headers.range;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    const fileSize &#x3D; stat.size;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (fileSize &lt; 1 * 1024 * 1024) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      const file &#x3D; fs.createReadStream(filePath, &#123; start: 0, end: fileSize &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      file.pipe(res);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      return</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (range) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      const parts &#x3D; range.replace(&#x2F;bytes&#x3D;&#x2F;, &quot;&quot;).split(&quot;-&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      const start &#x3D; parseInt(parts[0], 10);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      const end &#x3D; parts[1] ? parseInt(parts[1], 10) : fileSize - 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">      const chunkSize &#x3D; end - start + 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      const file &#x3D; fs.createReadStream(filePath, &#123; start, end &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">      res.writeHead(206, &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;Content-Range&quot;: &#96;bytes $&#123;start&#125;-$&#123;end&#125;&#x2F;$&#123;fileSize&#125;&#96;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;Access-Control-Expose-Headers&quot;: &quot;Accept-Ranges,Content-Range&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;Content-Disposition&quot;: &#96;attachment;filename&#x3D;&quot;yldd.pdf&quot;&#96;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;Accept-Ranges&quot;: &quot;bytes&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;Content-Length&quot;: chunkSize,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;Content-Type&quot;: &quot;application&#x2F;pdf&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">      file.pipe(res);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      res.writeHead(200, &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;Accept-Ranges&quot;: &quot;bytes&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;Access-Control-Expose-Headers&quot;: &quot;Accept-Ranges,Content-Range&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;Content-Disposition&quot;: &#96;inline;filename&#x3D;&quot;yldd.pdf&quot;&#96;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;Content-Length&quot;: fileSize,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;Content-Type&quot;: &quot;application&#x2F;pdf&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      const file &#x3D; fs.createReadStream(filePath, &#123; start: 0, end: 0 &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      file.pipe(res);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">const port &#x3D; 30001;</span></pre></td></tr><tr><td class="code"><pre><span class="line">server.listen(port, () &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(&#96;Server running at http:&#x2F;&#x2F;localhos:$&#123;port&#125;&#x2F;&#96;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>
<p>关键请求头参数<br><code>Range</code></p>
<p>关键响应头参数<br><code>Accept-Ranges</code><br><code>Content-Range</code><br><code>Access-Control-Expose-Headers</code><br><code>Content-Disposition</code><br><code>Content-Length</code><br><code>Content-Type</code></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>TS类型声明</title>
    <url>/2020/11/01/typescript/typescript04/</url>
    <content><![CDATA[<blockquote>
<p><strong>typescript 中的数据类型</strong></p>
<ul>
<li>布尔类型（boolean）</li>
<li>数字类型（number）</li>
<li>字符串类型（string）</li>
<li>数组类型（array）</li>
<li>元组类型（tuple）</li>
<li>枚举类型（enum）</li>
<li>任意类型（any）</li>
<li>null 和 undefined</li>
<li>void类型</li>
<li>never类型</li>
</ul>
</blockquote>
<h3 id="boolean-number-string-简单类型的变量声明"><a href="#boolean-number-string-简单类型的变量声明" class="headerlink" title="boolean number string 简单类型的变量声明"></a>boolean number string 简单类型的变量声明</h3><ul>
<li>布尔类型 boolean<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let bool: boolean &#x3D; true</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; bool &#x3D; &#39;&#39; &#x2F;&#x2F; error : Type &#39;string&#39; is not assignable to type &#39;boolean&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(&#39;bool :&gt;&gt; &#39;, bool);</span></pre></td></tr></table></figure></li>
<li>数字类型 （整数、浮点数）number <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let num: number &#x3D; 1.1</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; num &#x3D; &quot;&quot; &#x2F;&#x2F; error : Type &#39;string&#39; is not assignable to type &#39;number&#39;.</span></pre></td></tr><tr><td class="code"><pre><span class="line">num &#x3D; 2</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(&#39;num :&gt;&gt; &#39;, num);</span></pre></td></tr></table></figure></li>
<li>字符串类型 string<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let str: string &#x3D; &quot;hello&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; str &#x3D; 2 &#x2F;&#x2F; error : Type &#39;number&#39; is not assignable to type &#39;string&#39;.</span></pre></td></tr><tr><td class="code"><pre><span class="line">str &#x3D; &#39;hello world!&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(&#39;str :&gt;&gt; &#39;, str);</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="数组和元组类型的变量声明"><a href="#数组和元组类型的变量声明" class="headerlink" title="数组和元组类型的变量声明"></a>数组和元组类型的变量声明</h3><blockquote>
<p>一 整个数组数据类型一致</p>
</blockquote>
<ul>
<li>:Array&lt; number &gt;<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 纯数字数字</span></pre></td></tr><tr><td class="code"><pre><span class="line">const arr1: Array&lt;number&gt; &#x3D; [1, 2, 3]</span></pre></td></tr></table></figure></li>
<li>:string[]<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 纯字符串数组</span></pre></td></tr><tr><td class="code"><pre><span class="line">const arr2: string[] &#x3D; [&#39;hello&#39;, &#39;world&#39;];</span></pre></td></tr></table></figure>


</li>
</ul>
<blockquote>
<p>二 整个数组数据类型不一致情况</p>
</blockquote>
<ul>
<li>联合类型声明数组(number|string)[]<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 数字或字符串数组</span></pre></td></tr><tr><td class="code"><pre><span class="line">const arr3: (number | string)[] &#x3D; [&#39;1&#39;, &#39;1&#39;, 2, 1]</span></pre></td></tr></table></figure>


</li>
</ul>
<blockquote>
<p>三 自由任意类型元素的数组</p>
</blockquote>
<ul>
<li>any[]<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 任意类型</span></pre></td></tr><tr><td class="code"><pre><span class="line">const arr4: any[] &#x3D; [&#39;1&#39;, 2, false, undefined]</span></pre></td></tr></table></figure>


</li>
</ul>
<blockquote>
<p>四 严格限定类型和长度的元组</p>
</blockquote>
<ul>
<li>:[string,number,boolean]<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 限定每项类型 与 长度</span></pre></td></tr><tr><td class="code"><pre><span class="line">const arr5: [string, number, boolean] &#x3D; [&#39;1&#39;, 2, false]</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="enum枚举类型"><a href="#enum枚举类型" class="headerlink" title="enum枚举类型"></a>enum枚举类型</h3><blockquote>
<p>枚举用于表示固定的几个取值，如 性别 男女。</p>
</blockquote>
<ul>
<li>定义运用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum Gender &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Male &#x3D; 0,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Femal &#x3D; 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">let sex: Gender &#x3D; Gender.Femal</span></pre></td></tr></table></figure></li>
<li>默认值<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; TS中的枚举类型的取值, 默认是从上至下从0开始递增的</span></pre></td></tr><tr><td class="code"><pre><span class="line">enum Gender &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Male, &#x2F;&#x2F; 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Femal  &#x2F;&#x2F; 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(&#39;Gender :&gt;&gt; &#39;, Gender); &#x2F;&#x2F; &#123;0: &quot;Male&quot;, 1: &quot;Femal&quot;, Male: 0, Femal: 1&#125;</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum Gender &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Male&#x3D;3, &#x2F;&#x2F; 3</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Femal  &#x2F;&#x2F; 4</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(&#39;Gender :&gt;&gt; &#39;, Gender); &#x2F;&#x2F; &#123;3: &quot;Male&quot;, 4: &quot;Femal&quot;, Male: 3, Femal: 4&#125;</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="用-指定多种类型"><a href="#用-指定多种类型" class="headerlink" title="用 | 指定多种类型"></a>用 | 指定多种类型</h3><ul>
<li>当一个变量可能存在多个类型值时，可以使用 | 指定多个类型<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let temp: number | string | boolean &#x3D; 123</span></pre></td></tr><tr><td class="code"><pre><span class="line">temp &#x3D; &#39;xiao qi&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">temp &#x3D; true</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="any-任意类型"><a href="#any-任意类型" class="headerlink" title="any 任意类型"></a>any 任意类型</h3><ul>
<li>当不清楚值得类型时，可以使用any，任何数据类型的值都可以赋值给any<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let val: any;</span></pre></td></tr><tr><td class="code"><pre><span class="line">val &#x3D; true</span></pre></td></tr><tr><td class="code"><pre><span class="line">val &#x3D; 123</span></pre></td></tr><tr><td class="code"><pre><span class="line">val &#x3D; &#39;hello world&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">val &#x3D; [1, &#39;2&#39;, 3]</span></pre></td></tr><tr><td class="code"><pre><span class="line">val &#x3D; null</span></pre></td></tr><tr><td class="code"><pre><span class="line">val &#x3D; undefined</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="null-和-undefined"><a href="#null-和-undefined" class="headerlink" title="null 和 undefined"></a>null 和 undefined</h3><ul>
<li>undefined和null各自的类型分别为undefined和null<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let u: undefined &#x3D; undefined;</span></pre></td></tr><tr><td class="code"><pre><span class="line">let n: null &#x3D; null;</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="void-类型"><a href="#void-类型" class="headerlink" title="void 类型"></a>void 类型</h3><ul>
<li>void与any相反，表示没有任何类型，一般用于函数返回值。在TS中只有undefined可以赋值给void类型。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function test(): void &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(&#39;hello world!&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">let val: void &#x3D; test()</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(&#39;val :&gt;&gt; &#39;, val); &#x2F;&#x2F; undefined</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="never-类型"><a href="#never-类型" class="headerlink" title="never 类型"></a>never 类型</h3><ul>
<li>表示永远不存在的值类型，一般用于抛出异常或者根本不可能有返回值的函数。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function test():never &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    throw new Error(&#39;报错了&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">test();</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="接口-interface-类型"><a href="#接口-interface-类型" class="headerlink" title="接口 interface 类型"></a>接口 interface 类型</h3><ul>
<li>定义应用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface Person &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name: String,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  age: number</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const per: Person &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name: &#39;xiao qi&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  age: 18,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>TS Class 类</title>
    <url>/2020/12/06/typescript/typescript06/</url>
    <content><![CDATA[<h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><ul>
<li>TS 通过class关键字声明类，其内constructor为构造函数（实例化时触发的方法），this 指向当前实例<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.name = name</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  say(): <span class="built_in">void</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    alert(<span class="keyword">this</span>.name)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p: Person = <span class="keyword">new</span> Person(<span class="string">'xiao qi'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'p :&gt;&gt; '</span>, p);</span></pre></td></tr></table></figure></li>
<li>实例化对象为<img src="/images/2020/ts_class_1.png" style="margin-left:0" /></li>
<li>相当于ES5<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">this</span>.name = name</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  alert(<span class="keyword">this</span>.name)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person(<span class="string">'xiao qi'</span>)</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><ul>
<li>TS 通过extends关键字实现继承，通过super()触发父类的构造函数，父类的this也同样指向当前实例<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.name = name</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  sayName(): <span class="built_in">void</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this.name :&gt;&gt; '</span>, <span class="keyword">this</span>.name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Son <span class="keyword">extends</span> Person &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> age: <span class="built_in">number</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">super</span>(name)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.age = age</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  sayAge() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this.age :&gt;&gt; '</span>, <span class="keyword">this</span>.age);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p: Son = <span class="keyword">new</span> Son(<span class="string">'xiao qi'</span>, <span class="number">18</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">p.sayName()</span></pre></td></tr><tr><td class="code"><pre><span class="line">p.sayAge()</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'p :&gt;&gt; '</span>, p);</span></pre></td></tr></table></figure></li>
<li>实例化对象为<img src="/images/2020/ts_class_2.png" style="margin-left:0" /></li>
<li>相当于ES5<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.name = name</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'this.name :&gt;&gt; '</span>, <span class="keyword">this</span>.name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name, age</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Person.call(<span class="keyword">this</span>, name)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">this</span>.age = age</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Son.prototype.__proto__ = Person.prototype</span></pre></td></tr><tr><td class="code"><pre><span class="line">Son.prototype.sayAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'this.age :&gt;&gt; '</span>, <span class="keyword">this</span>.age);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Son(<span class="string">'xiao qi'</span>, <span class="number">18</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'p :&gt;&gt; '</span>, p);</span></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="类的修饰符"><a href="#类的修饰符" class="headerlink" title="类的修饰符"></a>类的修饰符</h3><ol>
<li>public: 公有<ul>
<li>在类里面、子类、类外面 都可以访问到</li>
</ul>
</li>
<li>protected: 保护类型<ul>
<li>在类里面、子类里面可以访问到，在类外面不能访问到</li>
</ul>
</li>
<li>private: 私有<ul>
<li>在类里面可以访问，子类、类外面不能访问到</li>
</ul>
</li>
</ol>
<h3 id="静态属性静态方法"><a href="#静态属性静态方法" class="headerlink" title="静态属性静态方法"></a>静态属性静态方法</h3><ul>
<li>在类里面用 static 关键字声明 无法通过this访问到<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">static</span> sex: <span class="built_in">string</span> = <span class="string">'男'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">static</span> say(): <span class="built_in">void</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    alert(<span class="string">`性别：<span class="subst">$&#123;Person.sex&#125;</span>`</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Person.say()</span></pre></td></tr></table></figure></li>
<li>相当于ES5<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Person.sex = <span class="string">'男'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Person.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  alert(<span class="string">`性别：<span class="subst">$&#123;Person.sex&#125;</span>`</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Person.say()</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ol>
<li><p>typescript中的抽象类：它是提供其他类的基类，不能直接被实例化</p>
</li>
<li><p>用 abstract 关键字定义抽象类和抽象方法，抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。</p>
</li>
<li><p>abstract 抽象类中 可以放抽象方法 也可以放非抽象方法</p>
</li>
<li><p>abstract 抽象方法只能放在抽象类里面</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Person &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.name = name</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">abstract</span> eat(): <span class="built_in">any</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Son1 <span class="keyword">extends</span> Person &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">super</span>(name)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Son1 必须实现 Person 中的抽象类中的抽象方法 eat</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  eat(): <span class="built_in">void</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    alert(<span class="string">'Son1 吃水果'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Son2 <span class="keyword">extends</span> Person &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">super</span>(name)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Son2 必须实现 Person 中的抽象类中的抽象方法 eat</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  eat(): <span class="built_in">void</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    alert(<span class="string">'Son2 吃米饭'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>Typescript环境搭建</title>
    <url>/2020/11/01/typescript/typescript07/</url>
    <content><![CDATA[<h3 id="安装编译"><a href="#安装编译" class="headerlink" title="安装编译"></a>安装编译</h3><ol>
<li>安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g typescript</span></pre></td></tr></table></figure></li>
<li>运行<blockquote>
<p>将ts编译成js，并输出js文件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tsc helloworld.ts</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="ts-node"><a href="#ts-node" class="headerlink" title="ts-node"></a>ts-node</h3><ol>
<li>安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g ts-node</span></pre></td></tr></table></figure></li>
<li>运行<blockquote>
<p>同node 运行js 一样，ts-node 同样可以将 ts 在终端中执行并输出</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ts-node helloworld.ts</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="vscode-自动编译"><a href="#vscode-自动编译" class="headerlink" title="vscode 自动编译"></a>vscode 自动编译</h3><ol>
<li><p>直接使用 tsc –watch 对单个文件自动编辑</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tsc --watch helloworld.ts</span></pre></td></tr></table></figure>
</li>
<li><p>使用 tsconfig.json 对多文件自动编译</p>
<ul>
<li>当前项目根目录下 tsc –init 生成配置文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tsc --init</span></pre></td></tr></table></figure>
<img src="/images/2020/ts_01.png" style="width:480px;margin-left:0" /></li>
<li>找到 vscode <strong>终端</strong> =&gt; <strong>运行任务</strong> =&gt; <strong>typescript</strong>  =&gt; <strong>tsc:监视-xxx/tsconfig.json</strong> <img src="/images/2020/ts_02.png" style="width:480px;margin-left:0" /></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 路由守卫</title>
    <url>/2020/06/19/vue/vue01/</url>
    <content><![CDATA[<h3 id="beforeEach-全局前置守卫钩子"><a href="#beforeEach-全局前置守卫钩子" class="headerlink" title="beforeEach 全局前置守卫钩子"></a>beforeEach 全局前置守卫钩子</h3><blockquote>
<p>router.beforeEach<br>  to 即将要进入的目标 路由对象<br>  from 当前导航正要离开的路由<br>  next 路由拦截器</p>
</blockquote>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">router.beforeEach((to, from, next) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>

<h3 id="afterEach-全局后置守卫钩子"><a href="#afterEach-全局后置守卫钩子" class="headerlink" title="afterEach 全局后置守卫钩子"></a>afterEach 全局后置守卫钩子</h3><blockquote>
<p>router.afterEach<br>  afterEach 不会接受 next 函数也不会改变导航本身</p>
</blockquote>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">router.afterEach((to, from) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>

<h3 id="beforeRouteEnter-进入组件时路由守卫"><a href="#beforeRouteEnter-进入组件时路由守卫" class="headerlink" title="beforeRouteEnter 进入组件时路由守卫"></a>beforeRouteEnter 进入组件时路由守卫</h3><blockquote>
<p>beforeRouteEnter(to,from,next){}<br>   to 进入到哪个路由(默认当前)<br>   from 从哪个路由进入<br>   进入之前获取不到 this<br>   next 路由拦截器 第一个参数 等价于this</p>
</blockquote>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    data()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            name:&quot;Arya&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    beforeRouteEnter(to, from, next) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; 不能获取组件实例 &#96;this&#96; 因为当钩子执行前，组件实例还没被创建</span></pre></td></tr><tr><td class="code"><pre><span class="line">      console.log(&quot;this :&gt;&gt; &quot;, this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      next(vm &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        alert(&quot;hello&quot; + vm.name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;</span></pre></td></tr></table></figure>

<h3 id="beforeRouteLeave-离开组件时路由守卫"><a href="#beforeRouteLeave-离开组件时路由守卫" class="headerlink" title="beforeRouteLeave 离开组件时路由守卫"></a>beforeRouteLeave 离开组件时路由守卫</h3><blockquote>
<p>beforeRouteLeave(to,from,next){}<br>   from 从哪个路由离开 (默认当前)<br>   to 离开到哪个路由<br>   注意 直接为函数的写法 才可以获取到 <code>this</code><br>   next 路由拦截器 第一个参数 等价于 <code>this</code></p>
</blockquote>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">beforeRouteLeave(to, from, next) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 导航离开该组件的对应路由时调用 可以访问组件实例 &#96;this&#96;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 注意 直接为函数的写法 才可以获取到 &#96;this&#96;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  if (confirm(&quot;确定离开此页面吗？&quot;) &#x3D;&#x3D;&#x3D; true) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next(false);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="路由守卫的应用"><a href="#路由守卫的应用" class="headerlink" title="路由守卫的应用"></a>路由守卫的应用</h3><ol>
<li><p>vue路由守卫实际上为我们提供了一个类似生命周期的函数事件，让我们可以在进入路由前，离开路由时，可以写一下逻辑代码。</p>
</li>
<li><p>to和form，是路由守卫回调函数提供的，进入/离开的两个路由信息对象。它包含了路由所在的所有信息，包含 meta、query、params、path … 这些我们常用的信息</p>
</li>
</ol>
]]></content>
      <categories>
        <category>vue 2.0</category>
      </categories>
      <tags>
        <tag>vue 2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>Typescript 操作符</title>
    <url>/2022/10/30/typescript/typescript08/</url>
    <content><![CDATA[<h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><ul>
<li><p>extends接口继承</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface A &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name: string</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">interface B extends A &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  age: number</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>相当于</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface B &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name: string</span></pre></td></tr><tr><td class="code"><pre><span class="line">  age: number</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<br>
</li>
<li><p>extends类型约束</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type A&lt;T extends string | number&gt; &#x3D; T</span></pre></td></tr><tr><td class="code"><pre><span class="line">const a:A&lt;boolean&gt; &#x3D; true</span></pre></td></tr></table></figure>
<img src="/images/2022/ts-operator-001.png" style="width:480px;margin-left:0" />
<br>
</li>
<li><p>extends条件判断</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type A&lt;T&gt; &#x3D; T extends string ? true : false</span></pre></td></tr><tr><td class="code"><pre><span class="line">const a: A&lt;string&gt; &#x3D; true</span></pre></td></tr></table></figure>
<hr>

</li>
</ul>
<h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><ul>
<li>typeof对静态的js变量推到为ts类型<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const test &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name: &#39;xiou&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  hobby: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    run: () &#x3D;&gt; &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  info: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    age: 18,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    male: true</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">type TestType &#x3D; typeof test</span></pre></td></tr></table></figure>
<img src="/images/2022/ts-operator-002.png" style="width:480px;margin-left:0" />
<hr>

</li>
</ul>
<h3 id="keyof"><a href="#keyof" class="headerlink" title="keyof"></a>keyof</h3><blockquote>
<p>将对象类型的接口中所有的键取出，并返回一个联合声明类型。</p>
</blockquote>
<ul>
<li><p>提取对象接口的键</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const test &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name: &#39;xiou&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  hobby: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    run: () &#x3D;&gt; &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">type TestType &#x3D; typeof test</span></pre></td></tr><tr><td class="code"><pre><span class="line">type TestTypeKey &#x3D; keyof TestType</span></pre></td></tr></table></figure>
<img src="/images/2022/ts-operator-003.png" style="width:480px;margin-left:0" />
<br>
</li>
<li><p>提取数组接口的键</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type ArrType &#x3D; [number, string, boolean]</span></pre></td></tr><tr><td class="code"><pre><span class="line">type ArrTypeKey &#x3D; keyof ArrType</span></pre></td></tr></table></figure>
<p>由于ts不能直接提示数组，这里借助一个工具类型展开显示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type Extend&lt;T&gt; &#x3D; T extends infer O ? O : never</span></pre></td></tr><tr><td class="code"><pre><span class="line">type ArrTypeKeyExtend &#x3D; Extend&lt;ArrTypeKey&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; ArrTypeKey &#x3D;&#x3D;&#x3D; ArrTypeKeyExtend</span></pre></td></tr></table></figure>
<img src="/images/2022/ts-operator-004.png" style="width:580px;margin-left:0" />
可以看出是将数组对象上的属性展示。
<br>
如果是想单独取出数组的项呢?
<img src="/images/2022/ty-operator-009.png" style="width:480px;margin-left:0" />
可以通过number可以取出。
<br>
<br>
</li>
<li><p>提取枚举类型的键</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum TestEnum &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  A &#x3D; 1,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  B &#x3D; 2</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">type TestEnumKey &#x3D; keyof TestEnum</span></pre></td></tr></table></figure>
<img src="/images/2022/ts-operator-005.png" style="width:580px;margin-left:0" />
可以看出同样是枚举对象上的属性展示。
<br>
如果是想单独取出枚举的键呢?
<img src="/images/2022/ts-operator-006.png" style="width:580px;margin-left:0" />
可以看出通过keyof可以取出。
<hr>

</li>
</ul>
<h3 id="in"><a href="#in" class="headerlink" title="in"></a>in</h3><blockquote>
<p>对联合声明类型进行循环</p>
</blockquote>
<ul>
<li><p>对象接口循环</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface A &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name: string</span></pre></td></tr><tr><td class="code"><pre><span class="line">  age: number</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">type AType &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  [Key in keyof A]: boolean</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<img src="/images/2022/ts-operator-007.png" style="width:480px;margin-left:0" />
通过keyof将对象类型的键转换为联合类型，然后通过in进行循环
<br>
<br>
</li>
<li><p>对数组接口循环</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type ArrType &#x3D; [&#39;1&#39;, 2, &#39;hello&#39;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">type A &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  [Key in ArrType[number]]: boolean</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<img src="/images/2022/ts-operator-008.png" style="width:480px;margin-left:0" />
<br>
<br>
</li>
<li><p>对枚举类型循环</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum TestEnum &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  A &#x3D; 1,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  B &#x3D; 2</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">type A &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  [Key in keyof typeof TestEnum]: boolean</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<img src="/images/2022/ts-operator-010.png" style="width:480px;margin-left:0" />
<hr>


</li>
</ul>
<h3 id="infer"><a href="#infer" class="headerlink" title="infer"></a>infer</h3><blockquote>
<p>infer用于extends后面，可以理解为一个变量</p>
</blockquote>
<ul>
<li>对类型进行推导<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type ArrType &#x3D; [number, string, boolean]</span></pre></td></tr><tr><td class="code"><pre><span class="line">type First&lt;T&gt; &#x3D; T extends [infer F, ...infer _Rest] ? F : never</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">type A &#x3D; First&lt;ArrType&gt;</span></pre></td></tr></table></figure>
<img src="/images/2022/ts-operator-011.png" style="width:480px;margin-left:0" />

</li>
</ul>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>模块(组件)上的 v-model 实现</title>
    <url>/2020/06/19/vue/vue02/</url>
    <content><![CDATA[<h3 id="实现理论"><a href="#实现理论" class="headerlink" title="实现理论"></a>实现理论</h3><ol>
<li>v-model 实际上是 @input + :value 的语法糖</li>
<li>vue 中的 model 允许自定义里面 prop(组件 v-mode 值) event(事件类型)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">model: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 自定义 v-model 的props 变量名</span></pre></td></tr><tr><td class="code"><pre><span class="line">    prop: &#39;uname&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 自定义 v-model $emit事件命名</span></pre></td></tr><tr><td class="code"><pre><span class="line">    event: &#39;changeXXX&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>两个方向数据双向绑定<br>父向同过 v-model 向组件传值<br>组件通过 this.$emit(“input”, value) 向父传值</li>
</ol>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><blockquote>
<p>页面通过 自定义属性的方式组件传值 涉及到异步数据 要对数据进行监听!!!</p>
</blockquote>
<h3 id="常用两种实现方式"><a href="#常用两种实现方式" class="headerlink" title="常用两种实现方式"></a>常用两种实现方式</h3><ol>
<li><p>watch监听 和 过渡属性 immediate: true</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;modelValue&quot; &gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  props: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    value: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      type: String,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      default: &quot;&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  data () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      modelValue: &quot;&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  watch: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    value: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      immediate: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      handler (newVal) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.modelValue &#x3D; newVal;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    modelValue (newVal) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      this.$emit(&quot;input&quot;, newVal);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;</span></pre></td></tr></table></figure>
</li>
<li><p>计算属性 setter getter(建议使用)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;modelValue&quot; &gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  props: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    value: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      type: String,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      default: &quot;&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  computed: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    modelValue: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      get () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      set (newVal) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.$emit(&quot;input&quot;, newVal);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;</span></pre></td></tr></table></figure>


</li>
</ol>
]]></content>
      <categories>
        <category>vue 2.0</category>
      </categories>
      <tags>
        <tag>vue 2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>.sync修饰符使用详解</title>
    <url>/2020/08/20/vue/vue03/</url>
    <content><![CDATA[<h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><blockquote>
<ol>
<li>.sync 与 v-model 类似，也是用来解决数据的双向绑定。</li>
<li>.sync 本质上也是语法糖。用自定义属性，与自定义事件，配合使用实现数据双向绑定。</li>
</ol>
</blockquote>
<h3 id="语法糖实现"><a href="#语法糖实现" class="headerlink" title="语法糖实现"></a>语法糖实现</h3><blockquote>
<ol>
<li>子组件部分：子组件通过props接收到数据，再通过自定义事件把修改后数据传出去</li>
<li>父组件部分：父组价通过自定义属性把数据传递出去，再监听自定义事件，根据自定义事件传递的数据修改属性值</li>
</ol>
</blockquote>
<ol>
<li><p>子组件部分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;div class&#x3D;&quot;child&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;p&gt;我是子组件&lt;&#x2F;p&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;p&gt;-------------&lt;&#x2F;p&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;input class&#x3D;&quot;inp&quot; @input&#x3D;&quot;onInput&quot; :value&#x3D;&quot;text&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  props: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    text: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      type: String</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  methods: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    onInput(e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      this.$emit(&quot;child-event&quot;, e.target.value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>
</li>
<li><p>父组件部分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;div class&#x3D;&quot;parent&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;p&gt;我是一个父组件&lt;&#x2F;p&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;br &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;h1&gt;&#123;&#123;text&#125;&#125;&lt;&#x2F;h1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;br &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;Child :text&#x3D;&quot;text&quot; @child-event&#x3D;&quot;(val)&#x3D;&gt;&#123; text&#x3D;val &#125;&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import Child from &quot;.&#x2F;Child&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  components: &#123; Child &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  data() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      text: &quot;父组件上默认文本&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="语法糖解析"><a href="#语法糖解析" class="headerlink" title="语法糖解析"></a>语法糖解析</h3><blockquote>
<p>通过以上的实现方式，结合vue官网，我们就可以清楚的知道，当我们使用 :text.sync 实际完成了一下几个事情</p>
<ol>
<li>将自定义属性text通过props传递给子组件</li>
<li>监听v-on:update:text 事件触发</li>
<li>v-on:update:text事件触发会传递过来的数据复制给当前text</li>
</ol>
</blockquote>
<h3 id="sync修饰符实现数据双向绑定"><a href="#sync修饰符实现数据双向绑定" class="headerlink" title=".sync修饰符实现数据双向绑定"></a>.sync修饰符实现数据双向绑定</h3><blockquote>
<p>和v-model实现原理一样，.sync也是通过 watch 与 computed 实现数据双向绑定，我本人推荐第二种使用方式</p>
</blockquote>
<ol>
<li><p>watch监听 和 过渡属性 immediate: true</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;modelText&quot; &gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  props: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    text: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      type: String,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      default: &quot;&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  data () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      modelText: &quot;&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  watch: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    text: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      immediate: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      handler (newVal) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.modelText &#x3D; newVal;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    modelText (newVal) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      this.$emit(&quot;update:text&quot;, newVal);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;</span></pre></td></tr></table></figure>
</li>
<li><p>计算属性 setter getter</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;modelText&quot; &gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  props: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    text: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      type: String,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      default: &quot;&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  computed: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    modelText: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      get () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.text;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      set (newVal) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.$emit(&quot;update:text&quot;, newVal);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="具体"><a href="#具体" class="headerlink" title="具体"></a>具体</h3><ul>
<li><a href="https://github.com/wangxiaoqi0123/vue-cli3-vant/tree/ae/src/views/learn/sync" target="_blank" rel="noopener">https://github.com/wangxiaoqi0123/vue-cli3-vant/tree/ae/src/views/learn/sync</a></li>
</ul>
]]></content>
      <categories>
        <category>vue 2.0</category>
      </categories>
      <tags>
        <tag>vue 2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>Typescript常用工具</title>
    <url>/2022/11/05/typescript/typescript09/</url>
    <content><![CDATA[<h4 id="Exclude"><a href="#Exclude" class="headerlink" title="Exclude"></a>Exclude</h4><blockquote>
<p>移除联合类型中的指定类型</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type TestType &#x3D; Exclude&lt;&#39;name&#39;|&#39;age&#39;|&#39;sex&#39;,&#39;sex&#39;&gt;</span></pre></td></tr></table></figure>
<img src="/images/2023/ts_utils_006.png" style="width:600px;margin-left:0" />
<hr>

<h4 id="Extract"><a href="#Extract" class="headerlink" title="Extract"></a>Extract</h4><blockquote>
<p>挑选联合类型中的指定类型（交集）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type TestType &#x3D; Extract&lt;&#39;name&#39;|&#39;age&#39;|&#39;sex&#39;,&#39;sex&#39;&gt;</span></pre></td></tr></table></figure>
<img src="/images/2023/ts_utils_007.png" style="width:600px;margin-left:0" />
<hr>

<h4 id="Omit"><a href="#Omit" class="headerlink" title="Omit"></a>Omit</h4><blockquote>
<p>移除对象类型中的指定类型</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface User &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name: string</span></pre></td></tr><tr><td class="code"><pre><span class="line">  age: number,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  sex: &#39;male&#39;|&#39;female&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">type TestType &#x3D; Omit&lt;User,&#39;name&#39;|&#39;sex&#39;&gt;</span></pre></td></tr></table></figure>
<img src="/images/2023/ts_utils_004.png" style="width:600px;margin-left:0" />
<hr>

<h4 id="Pick"><a href="#Pick" class="headerlink" title="Pick"></a>Pick</h4><blockquote>
<p>挑选对象类型中的指定类型</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface User &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name: string</span></pre></td></tr><tr><td class="code"><pre><span class="line">  age: number,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  sex: &#39;male&#39;|&#39;female&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">type TestType &#x3D; Pick&lt;User,&#39;name&#39;|&#39;sex&#39;&gt;</span></pre></td></tr></table></figure>
<img src="/images/2023/ts_utils_005.png" style="width:600px;margin-left:0" />
<hr>

<h4 id="Record"><a href="#Record" class="headerlink" title="Record"></a>Record</h4><blockquote>
<p>定义一个对象类型<br>第一个参数为联合类型，循环联合类型作为对象的键。第二个参数为每个键的数据类型。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type TestType &#x3D; Record&lt;&#39;a&#39;|&#39;b&#39;|&#39;c&#39;,string&gt;</span></pre></td></tr></table></figure>
<img src="/images/2023/ts_utils_001.png" style="width:600px;margin-left:0" />
<hr>

<h4 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a>Partial</h4><blockquote>
<p>将对象中的键变为可选对象<br>只会将对象的第一层有效果</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface User &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name: string</span></pre></td></tr><tr><td class="code"><pre><span class="line">  hobby: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    run: boolean</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">type TestType &#x3D; Partial&lt;User&gt;</span></pre></td></tr></table></figure>
<img src="/images/2023/ts_utils_002.png" style="width:600px;margin-left:0" />
<hr>

<h4 id="Required"><a href="#Required" class="headerlink" title="Required"></a>Required</h4><blockquote>
<p>将对象中的可选项，变为必填项<br>只会将对象的第一层有效果</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface User &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name?: string</span></pre></td></tr><tr><td class="code"><pre><span class="line">  hobby: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    run?: boolean</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">type TestType &#x3D; Required&lt;User&gt;</span></pre></td></tr></table></figure>
<img src="/images/2023/ts_utils_003.png" style="width:600px;margin-left:0" />
<hr>








]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 单文件组件</title>
    <url>/2020/06/19/vue/vue05/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;!-- 书写html区域 --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  export default &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    components: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; 挂载小组件</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    props: [], &#x2F;&#x2F; 接受父组件传递的值</span></pre></td></tr><tr><td class="code"><pre><span class="line">    data() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      return &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 声明全局</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    computed: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; 计算属性</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    watch: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; 监听数据值的变化</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    created() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; vue 被实例化 完成</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    mounted() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; vue 页面节点渲染完毕</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    methods: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; 书写 vue 函数</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;* 书写css区域 *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;style&gt;</span></pre></td></tr></table></figure>

<ol>
<li><p>template 默认只能有一个根节点 可书写 指令 事件 差值表达式 filter 等等</p>
</li>
<li><p>components 注册引入该模板文件 的局部组件</p>
</li>
<li><p>props 接受父组件 传递的数据</p>
</li>
<li><p>data 作为主要数据源</p>
</li>
<li><p>computed 依赖其他数据源的值 计算出新值</p>
</li>
<li><p>watch 监听数据发生变化</p>
</li>
<li><p>created 组件 被实例化 完成</p>
</li>
<li><p>created 页面节点渲染完毕</p>
</li>
<li><p>methods 书写 function</p>
</li>
<li><p>scoped 针对当前文件样式锁定</p>
</li>
</ol>
]]></content>
      <categories>
        <category>vue 2.0</category>
      </categories>
      <tags>
        <tag>vue 2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 父子组件通讯</title>
    <url>/2020/06/19/vue/vue06/</url>
    <content><![CDATA[<h3 id="子组件向父组件传递消息"><a href="#子组件向父组件传递消息" class="headerlink" title="子组件向父组件传递消息"></a>子组件向父组件传递消息</h3><ol>
<li><p>使用 ref 的方式<br>(1) 父组件下 子组件标签 上标识 ref=”” 标识<br>(2) 父组件 通过 this.$refs.标识 === 子组件Vue实例</p>
</li>
<li><p>父组件通过 $children 的方式获取子组件消息<br>(1) 父组件 通过 this.$children === [子组件Vue实例 ,…] 子组件Vue实例的数组</p>
</li>
<li><p>子组件使用 $emit 的方法 发布订阅向父组件 传递消息<br>(1) 子组件 发布 this.$emit(“订阅事件” , “要传递给父元素的数据”)<br>(2) 父组件下 子组件标签 上添加监听事件 @订阅事件 = callback<br>(3) 要接受的参数 在callback 中实现传递</p>
</li>
</ol>
<h3 id="父组件向子组件传递消息"><a href="#父组件向子组件传递消息" class="headerlink" title="父组件向子组件传递消息"></a>父组件向子组件传递消息</h3><ol>
<li>使用 props 方式<br>(1) 父组件下 子组件标签 通过数据属性向子组件传递数据 :数据名=”数据”<br>(2) 子组件 同过 props:[“数据名”] 的方式接受数据</li>
<li>使用 $parent 的方式获取父元素上的信息<br>(1) 子组件 通过 this.$parent == 父组件Vue实例 (父组件唯一所以不是数组)</li>
</ol>
<h3 id="兄弟组件之间传递消息-非父子组件"><a href="#兄弟组件之间传递消息-非父子组件" class="headerlink" title="兄弟组件之间传递消息(非父子组件)"></a>兄弟组件之间传递消息(非父子组件)</h3><ol>
<li>只有通过 Vue实例 实现通讯的一种方式<br>(1) 创建一个 Vue实例 专门用于实现兄弟元素之间的通讯 var bus = new Vue()<br>(2) 发送消息的兄弟 在 methods 中 使用 bus.$emit(“名称” , 数据)<br>(3) 接受消息的兄弟 在 mounted (生命周期回调函数) 使用 bus.$on(“名称”,callback) 回调函数中接受消息</li>
</ol>
]]></content>
      <categories>
        <category>vue 2.0</category>
      </categories>
      <tags>
        <tag>vue 2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 路由跳转 router</title>
    <url>/2020/06/19/vue/vue07/</url>
    <content><![CDATA[<h2 id="Vue-页面中实现跳转"><a href="#Vue-页面中实现跳转" class="headerlink" title="Vue 页面中实现跳转"></a>Vue 页面中实现跳转</h2><ol>
<li>this.$router.push() <ul>
<li>this.$router.push(‘路由路径’)</li>
<li>this.$router.push({name:’组件名称’,path:’路由路径’})</li>
<li>push 方式跳转 导航到不同的 url，向 history 栈添加一个新的记录</li>
</ul>
</li>
<li>this.$router.replace()<ul>
<li>this.$router.replace(‘路由路径’)</li>
<li>this.$router.replace({name:’组件名称’,path:’路由路径’})</li>
<li>replace 方式跳转 导航到不同 url，替换 history 栈中当前记录</li>
</ul>
</li>
<li>this.$router.go()<ul>
<li>router.go(n)：指定前进/回退的步数。n 为正数的时候是前进；负数的时候是后退；0的时候是刷新当前页面。（===window.history.go）</li>
</ul>
</li>
<li>router.back()<ul>
<li>回退一步</li>
</ul>
</li>
<li>router-link <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;router-link to&#x3D;&#39;路由路径&#39;&gt; &lt;&#x2F;router-link&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">直接在样式中设置 .router-link-exact-active</span></pre></td></tr><tr><td class="code"><pre><span class="line">a.router-link-exact-active &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      color: #d7a51e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;router-link to&#x3D;&#39;&#123;name:&#39;组件名称&#39;&#125;&#39;&gt; &lt;&#x2F;router-link&gt;</span></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>页面的路由信息对象<br>  this.$route</p>
</blockquote>
<h2 id="Vue-页面中跳转（push-replace）-带参数"><a href="#Vue-页面中跳转（push-replace）-带参数" class="headerlink" title="Vue 页面中跳转（push/replace） 带参数"></a>Vue 页面中跳转（push/replace） 带参数</h2><ol>
<li>跳转传参 </li>
</ol>
<ul>
<li>方式一  使用params 传递参数<br>this.$router.push({path:’组件路径/‘,params:{变量名:值}})<br>this.$router.push({name:’组件名称’,params:{变量名:值}})</li>
<li>方式二  使用query 传递参数<br>this.$router.push({path:’组件路径/‘,query:{变量名:值}})<br>this.$router.push({name:’组件名称’,query:{变量名:值}})</li>
</ul>
<ol start="2">
<li>接受参数 </li>
</ol>
<ul>
<li>this.$route.params.变量名  (一般在 mounted 中接受参数) 页面路由看不见 页面刷新参数消失</li>
<li>this.$route.query.变量名  (一般在 mounted 中接受参数) 页面路由显示 页面刷新参数不消失</li>
</ul>
]]></content>
      <categories>
        <category>vue 2.0</category>
      </categories>
      <tags>
        <tag>vue 2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue $attrs与$listeners</title>
    <url>/2020/07/22/vue/vue04/</url>
    <content><![CDATA[<blockquote>
<p>简单讲</p>
<ol>
<li>$attrs 将父组件上的自定义属性，传递到指定的子属性的内部</li>
<li>$listeners 子组件上触发的事件，在父组件上也可以监听到</li>
</ol>
</blockquote>
<h3 id="attrs"><a href="#attrs" class="headerlink" title="$attrs"></a>$attrs</h3><blockquote>
<ol>
<li>将父组件上的自定义属性，通过<code>v-bind=&#39;$attrs&#39;</code>，传递到绑定的子组件内部</li>
<li>不包含所有父作用域的绑定 class 和 style </li>
<li>inheritAttrs默认为true，通过设置 <code>inheritAttrs: false</code> 取消组件的根元素也同样继承属性</li>
</ol>
</blockquote>
<ol>
<li><p>父组件在页面上使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Parent title&#x3D;&quot;hello world&quot;&#x2F;&gt;</span></pre></td></tr></table></figure>
</li>
<li><p>父组件内给子组件设置 <code>v-bind:&#39;$attrs&#39;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;p&gt;我是父组件&lt;&#x2F;p&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;Child v-bind&#x3D;&quot;$attrs&quot; name&#x3D;&quot;我是子组件&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import Child from &quot;.&#x2F;Child&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  props: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    text: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      type: String,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      default: &quot;&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  components: &#123; Child &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;</span></pre></td></tr></table></figure>
</li>
<li><p>子组件内部接受数据 (props/$atters)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;p&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;p&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;p&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;p&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  props: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    title: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      type: String,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      default: &quot;&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    name: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      type: String,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      default: &quot;&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="listeners"><a href="#listeners" class="headerlink" title="$listeners"></a>$listeners</h3><blockquote>
<ol>
<li>将子组件内触发的事件，传递到父组件上</li>
<li>通过在父组件内部 给子组件 设置 <code>v-on=&quot;$listeners&quot;</code>，父组件标签上就可以自定义子组件内触发的事件</li>
</ol>
</blockquote>
<ol>
<li><p>父组件在页面上使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Parent @child-event&#x3D;&quot;handleChild&quot; @parent-event&#x3D;&quot;handleParent&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import Parent from &quot;.&#x2F;modules&#x2F;Parent&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  components: &#123; Parent &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  methods: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    handleChild(val) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      alert(val);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    handleParent(val) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      alert(val);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;</span></pre></td></tr></table></figure>
</li>
<li><p>父组件内给子组件设置 <code>v-on=&quot;$listeners&quot;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;van-button type&#x3D;&quot;info&quot; @click&#x3D;&quot;$emit(&#39;parent-event&#39;,&#39;父事件&#39;)&quot;&gt;父事件&lt;&#x2F;van-button&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;Child v-on&#x3D;&quot;$listeners&quot; v-bind&#x3D;&quot;$attrs&quot; name&#x3D;&quot;我是子组件&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import Child from &quot;.&#x2F;Child&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  components: &#123; Child &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;</span></pre></td></tr></table></figure>
</li>
<li><p>子组件内发布是事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;van-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;$emit(&#39;child-event&#39;,&#39;子事件&#39;)&quot;&gt;子事件&lt;&#x2F;van-button&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;template&gt;</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>  具体请查看 <a href="https://github.com/wangxiaoqi0123/vue-cli3-vant/tree/master/src/views/learn/al" target="_blank" rel="noopener">https://github.com/wangxiaoqi0123/vue-cli3-vant/tree/master/src/views/learn/al</a></p>
]]></content>
      <categories>
        <category>vue 2.0</category>
      </categories>
      <tags>
        <tag>vue 2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 生命周期钩子</title>
    <url>/2020/07/11/vue/vue08/</url>
    <content><![CDATA[<img src="/images/2020/lifecycle.png" />

<ol>
<li><p>beforeCreate()<br> 可以获取this(组件 实例)，但无法获取真实的数据和节点</p>
</li>
<li><p>created()<br> 可以获取this(组件 实例)和真实的数据，但无法获取真实的节点</p>
</li>
<li><p>beforeMount()<br> 这个阶段，它渲染出了虚拟DOM</p>
</li>
<li><p>mounted()<br> 这个阶段，它渲染出了真实DOM</p>
</li>
<li><p>beforeUpdate()<br> 发生更新，可以获取更新后的数据，但是节点还未更新完</p>
</li>
<li><p>updated()<br> 更新完成，数据和节点都是最新的</p>
</li>
<li><p>beforeDestroy()<br> 组件销毁之前的一瞬间</p>
</li>
<li><p>destroyed()<br> 组件被销毁</p>
</li>
<li><p>activated()<br> 组件被激活</p>
</li>
<li><p>deactivated()<br>组件未激活</p>
</li>
</ol>
]]></content>
      <categories>
        <category>vue 2.0</category>
      </categories>
      <tags>
        <tag>vue 2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 数据双向绑定底层实现</title>
    <url>/2020/06/19/vue/vue10/</url>
    <content><![CDATA[<p>  Vue 2.0 主要通过 Object.defineProperty 实现 vm（改变数据更新视图）<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;head&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;head&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;body&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;ipt&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;span id&#x3D;&quot;text&quot;&gt;&lt;&#x2F;span&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;body&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F;先获取节点</span></pre></td></tr><tr><td class="code"><pre><span class="line">    var ipt &#x3D; document.querySelector(&quot;#ipt&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    var text &#x3D; document.querySelector(&quot;#text&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F;定义一个数据</span></pre></td></tr><tr><td class="code"><pre><span class="line">    var data &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        content: &quot;123456&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F;实现能够更新数据的函数</span></pre></td></tr><tr><td class="code"><pre><span class="line">    var fn &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        content: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">            function (val) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ipt.value &#x3D; val</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            function (val) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                text.innerHTML &#x3D; val</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    for (let attr in data) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F;得到 data里面的数据 content</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F;获取到data里原本的值</span></pre></td></tr><tr><td class="code"><pre><span class="line">        var oldVal &#x3D; data[attr]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F;通过监听模式来双向监听数据</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F;                  目标对象 目标属性</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Object.defineProperty(data, attr, &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F;在读取属性时执行 get() 方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">            get() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return oldVal;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F;在调用属性时执行 set() 方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">            set(newVal) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (newVal &#x3D;&#x3D; oldVal) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F;对页面上的两个节点的值进行替换</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    fn[attr].forEach(e &#x3D;&gt; e(newVal));</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F;初始化视图 , 节点添加数据</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (let attr in data) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            fn.content.forEach(e &#x3D;&gt; e(data[attr]))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F;改变属性值触发事件</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ipt.oninput &#x3D; function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            data.content &#x3D; this.value</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;html&gt;</span></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>vue 2.0</category>
      </categories>
      <tags>
        <tag>vue 2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>事件总线 bus</title>
    <url>/2020/06/19/vue/vue09/</url>
    <content><![CDATA[<h2 id="main-js-创建实例化新的vue实例-作为bus"><a href="#main-js-创建实例化新的vue实例-作为bus" class="headerlink" title="main.js 创建实例化新的vue实例 作为bus"></a>main.js 创建实例化新的vue实例 作为bus</h2>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 使用全局bus 跨组件传递数据</span></pre></td></tr><tr><td class="code"><pre><span class="line">Vue.prototype.bus &#x3D; new Vue();</span></pre></td></tr></table></figure>

<h2 id="数据之间传递"><a href="#数据之间传递" class="headerlink" title="数据之间传递"></a>数据之间传递</h2><ol>
<li>父组件通过 on   监听动作与接受数据</li>
<li>子组件通过 emit 传递动作与数据<blockquote>
<p>注意: </p>
<ol>
<li>数据传向由子组件传递出数据, 父组件接受数据</li>
<li>子组件emit出数据, 父组件立即响应到数据(不要试图把数据存在this中,打开页面使用)</li>
</ol>
</blockquote>
</li>
</ol>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="全局loading"><a href="#全局loading" class="headerlink" title="全局loading"></a>全局loading</h3><p>创建loading组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;div class&#x3D;&quot;markbox&quot; v-show&#x3D;&quot;loading&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;div class&#x3D;&quot;sun-loading&quot;&gt;&lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name: &quot;loading&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  data () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      loading: false</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  created () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.bus.$on(&quot;loading&quot;, data &#x3D;&gt; &#123; this.loading &#x3D; !!data; &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;</span></pre></td></tr></table></figure>

<p>页面使用组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 开启loading</span></pre></td></tr><tr><td class="code"><pre><span class="line">this.bus.$emit(&quot;loading&quot;, true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 关闭loading</span></pre></td></tr><tr><td class="code"><pre><span class="line">this.bus.$emit(&quot;loading&quot;, false);</span></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue 2.0</category>
      </categories>
      <tags>
        <tag>vue 2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 小知识</title>
    <url>/2020/06/19/vue/vue11/</url>
    <content><![CDATA[<ol>
<li><p>对象合并的方式 Object.assign(obj ,{}) 在vue中对象的合并 必须是 Object.assign({},obj,{}) 的方式,改变引用地址,从而使数据的视图更新</p>
</li>
<li><p>computed 计算属性 watch 监听属性 形式上是函数 实际上是变量 , 且computed 计算的属性不能在data中存在</p>
</li>
<li><p>Vue 模板中的this指向 window</p>
</li>
<li><p>模板中有且仅有一个顶层标签</p>
</li>
<li><p>所有的数据都是从外向内传递</p>
</li>
<li><p>component 的第一个参数组件名称 可以短横线 可以是驼峰 (不能使用关键字和标签名), 使用组件时 只能使用短横线的形式</p>
</li>
<li><p>给父组件下 子组件 绑定(原生)事件 使用事件修饰符 .native 就可以从父组件上直接监听到子组件</p>
</li>
<li><p>computed 默认get() 方法 手动修改数据 使用set(修改的值)方法</p>
</li>
<li><p><template></template> 标签是一个虚拟的标签,包裹原生标签,将vue语法写在template,使原生标签与逻辑分离</p>
</li>
<li><p>Vue 中不要使用 function , 尽量使用箭头函数 避免 this 的指向发生问题</p>
</li>
<li><p><router-view/> 页面上是哪个路由组件 就显示哪个组件<br>a.router-link-exact-active 在对应的路由页面 显示对应 router-link 样式</p>
</li>
<li><p>组件切换</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;keep-alive include&#x3D;&quot;froms&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;!-- component 站位符用来站位符 --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;!-- v-once组件缓存在内存中 --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;component :is&#x3D;&#39;temp&#39; v-once&gt;&lt;&#x2F;component&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;keep-alive&gt;</span></pre></td></tr></table></figure>
</li>
<li><p>Vue.nextTick(callback) 数据和视图更新完成后，触发回调函数</p>
</li>
<li><p>mounted阶段 可通过<code>this.$el</code>获取到元素节点，把其挂载到页面已存在的元素节点上（大多数用于弹出框的挂挂载到根节点上）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mounted() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  document.body.appendChild(this.$el)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>vue 2.0</category>
      </categories>
      <tags>
        <tag>vue 2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 页面缓存 keep-alive</title>
    <url>/2020/06/19/vue/vue12/</url>
    <content><![CDATA[<h3 id="配置页面缓存"><a href="#配置页面缓存" class="headerlink" title="配置页面缓存"></a>配置页面缓存</h3><p>  app.vue 使用keep-alive进行缓存<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;keep-alive&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;router-view v-if&#x3D;&quot;$route.meta.keepAlive&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;keep-alive&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;router-view v-if&#x3D;&quot;!$route.meta.keepAlive&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;template&gt;</span></pre></td></tr></table></figure></p>
<p>  自定义router中meta字段条件缓存页面<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  path: &quot;&#x2F;announcement&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name: &quot;announcement&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  meta: &#123; keepAlive: true &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  component: () &#x3D;&gt; import(&quot;@&#x2F;views&#x2F;announcement&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></p>
<h3 id="路由守卫-监听路由-进入-离开"><a href="#路由守卫-监听路由-进入-离开" class="headerlink" title="路由守卫 监听路由 进入/离开"></a>路由守卫 监听路由 进入/离开</h3>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 给页面做缓存，动态初始化</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 注意路由要写成function的形式, 否则无法获取this</span></pre></td></tr><tr><td class="code"><pre><span class="line">beforeRouteLeave: function (to, from, next) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  if (to.name !&#x3D;&#x3D; &quot;announcementContent&quot;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 一些逻辑操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="组件激活生命周期钩子-activated"><a href="#组件激活生命周期钩子-activated" class="headerlink" title="组件激活生命周期钩子 activated"></a>组件激活生命周期钩子 activated</h3><ul>
<li>使用keep-alive 之后页面被缓存</li>
<li>再次打开页面 触发activated 生命周期钩子函数</li>
</ul>
]]></content>
      <categories>
        <category>vue 2.0</category>
      </categories>
      <tags>
        <tag>vue 2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>vue自定义指令directive</title>
    <url>/2020/09/05/vue/vue14/</url>
    <content><![CDATA[<h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><blockquote>
<ol>
<li>vue官方介绍：对普通 DOM 元素进行底层操作，这时候就会用到自定义指令。</li>
<li>所以我认为 directive 的绝大多数用于处理，静态的UI交互逻辑的封装。</li>
</ol>
</blockquote>
<h3 id="注册使用"><a href="#注册使用" class="headerlink" title="注册使用"></a>注册使用</h3><blockquote>
<p>与 filter component mixin 注册使用方式类似，directive 也是使用 install function 在这种方式注册</p>
</blockquote>
<ol>
<li><p>局部注册</p>
<ul>
<li>书写指令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  bind(el, binding, vnode) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 第一次绑定</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  update(el, binding, vnode) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 当视图发生变化</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure></li>
<li>引入组件局部注册<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import test from &quot;.&#x2F;test.js&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  directives: &#123; test &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>全局注册</p>
<ul>
<li>书写指令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  install: function (Vue) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Vue.directive(&quot;demo&quot;, &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      bind(el, binding, vnode) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 第一次绑定</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      update(el, binding, vnode) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 当视图发生变化</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure></li>
<li>Vue.use 全局注册<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &quot;vue&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import demo from &quot;.&#x2F;demo&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Vue.use(demo);</span></pre></td></tr></table></figure></li>
<li>main.js 导入<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &quot;@&#x2F;directive&quot;;</span></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h3 id="常用钩子函数介绍"><a href="#常用钩子函数介绍" class="headerlink" title="常用钩子函数介绍"></a>常用钩子函数介绍</h3><blockquote>
<p>指令的钩子函数 一共5个 bind inserted update componentUpdated unbind 具体详细解释看官网，这里只介绍常用的两个，以及常用的钩子函数参数。</p>
</blockquote>
<h5 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h5><ol>
<li><code>bind</code><ul>
<li>只调用一次，指令第一次绑定到元素时调用</li>
</ul>
</li>
</ol>
<ol start="2">
<li><code>update</code><ul>
<li>官方：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。</li>
<li>简单理解：当指令节点下的视图发生变化时，触发update。</li>
</ul>
</li>
</ol>
<h5 id="钩子函数参数"><a href="#钩子函数参数" class="headerlink" title="钩子函数参数"></a>钩子函数参数</h5><ol>
<li><code>el</code> 指令所绑定的元素，可以用来直接操作 DOM。</li>
</ol>
<ol start="2">
<li><code>binding</code> 一个对象，包含以下常用 property<ul>
<li><code>value</code>: 指令传入的绑定值。</li>
<li><code>oldValue</code>: 指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>vue 2.0</category>
      </categories>
      <tags>
        <tag>vue 2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 指令事件样式</title>
    <url>/2020/06/19/vue/vue13/</url>
    <content><![CDATA[<h3 id="1-数据-变量"><a href="#1-数据-变量" class="headerlink" title="1. 数据 变量"></a>1. 数据 变量</h3><ul>
<li><p>插值表达式<br>放置 死值<br>放置 变量<br>可以支持运算符 &gt; &lt; ? : ( 三元运算符 ) + -</p>
</li>
<li><p>:属性<br>:属性= 后面都支持 运算符 &gt; &lt; ? : ( 三元运算符 ) + - * /</p>
</li>
<li><p>data-xxx 自定义属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"onGoToDetail"</span> <span class="attr">:data-id</span>=<span class="string">"postId"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">onGoToDetail(event) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(event.srcElement.dataset.id)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>通过<code>data-</code>形式自定义的属性可以在event.srcElement.dataset中获取到。<br>1.自定义的属性在dataset中data-会被省略。例如 data-id =&gt; id<br>2.当自定义属性中存在大写字母会被转换成小写。例如 data-postId =&gt; postid<br>3.当自定义属性中存在多个-会被转换成驼峰。例如 data-post-id =&gt; postId</p>
</li>
<li><p>:style 运算符写法<br>:style=”{color:num == 3 ? ‘red’ :’green’}”<br>:style=”[{color:num == 3 ? ‘red’ :’green’}]”</p>
</li>
<li><p>:class 运算符写法<br>:class=”[isShow(变量) ? ‘icon-quanxuan1’(选择器一) : ‘icon-quanxuan’(选择器二)]”</p>
</li>
</ul>
<h3 id="2-修改数据更新视图"><a href="#2-修改数据更新视图" class="headerlink" title="2. 修改数据更新视图"></a>2. 修改数据更新视图</h3><ul>
<li>修改数组 对象中的值来改变页面的渲染<br>(数组)通过数组变异方法(可以改变原数组的方法)操作的方法来操作 pop push shift unshift splice sort reserve<br>(数组, 对象)通过改变引用值的方式 , 将整个数组或对象都替换掉<br>(数组, 对象) Vue.set(对象/数组,属性/下标,值) 实例上也可以引用到 set 方法 , this.$set(对象/数组,属性/下标,值)<br>(对象) 原生对象的的合并 Object.assign({},obj,obj) 一定要加{} 改变原来对象值的引用</li>
</ul>
<h3 id="3-Vue-样式的绑定"><a href="#3-Vue-样式的绑定" class="headerlink" title="3. Vue 样式的绑定"></a>3. Vue 样式的绑定</h3><ol>
<li>:style=”{}” json 格式的对象</li>
<li>:style=”[{},{}]” 数组的形式</li>
<li>:class=”{class 选择器:true}”</li>
<li>:class=”[{class 选择器:true},obj,’calss 选择器’]”</li>
</ol>
<h3 id="4-修饰符"><a href="#4-修饰符" class="headerlink" title="4. 修饰符"></a>4. 修饰符</h3><ul>
<li><p>事件修饰符<br>stop 阻止事件的冒泡 相当于原生的 e.stopPropagation() e.cancelBubble=true<br>prevent 阻止默认事件 相当于原生的 return false e.returnValue=false e.preventDefault()<br>captrue 事件的捕获<br>self 只有点击时 target 为目标元素 事件才可以生效</p>
</li>
<li><p>v-model 数据修饰符<br>number 自动把绑定的数据类型转化为 number 类型<br>lazy 数据在双向绑定时 只会触发@change 函数 数据修改完成失去焦点时 页面才会重新渲染<br>trim 修剪首尾空格</p>
</li>
</ul>
<h3 id="5-列表渲染"><a href="#5-列表渲染" class="headerlink" title="5. 列表渲染"></a>5. 列表渲染</h3><ol>
<li>通过 v-for:”item in/of list” 实现对数组 对象的循环渲染</li>
<li>key 的描述<br>如果不加 key 或者 key 为 index vue 在更新视图的时候, 采用就地更新策略, 每个元素只是一个容器,不会改变现有元素的排列顺序, 只是依次改变容器的内容<br>如果加了 key 并且 key 是唯一标识, vue 在更新列表的时候, 直接复用这些元素, 就会改变现有元素的排列顺序</li>
</ol>
]]></content>
      <categories>
        <category>vue 2.0</category>
      </categories>
      <tags>
        <tag>vue 2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue slot 插槽</title>
    <url>/2020/07/12/vue/vue16/</url>
    <content><![CDATA[<h3 id="1-默认插槽"><a href="#1-默认插槽" class="headerlink" title="1. 默认插槽"></a>1. 默认插槽</h3><blockquote>
<p>默认插槽 只有一个 添加后 组件标签对里面直接写入类容</p>
</blockquote>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;h1&gt;header&lt;&#x2F;h1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;slot&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;!-- 添加一个默认插槽，可以在外部随意定义内容 --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;slot&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;template&gt;</span></pre></td></tr></table></figure>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;Content&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;!-- Content组件 添加的slot 内容 --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;div&gt;hello world&lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;Content&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;template&gt;</span></pre></td></tr></table></figure>

<h3 id="2-具名插槽"><a href="#2-具名插槽" class="headerlink" title="2. 具名插槽"></a>2. 具名插槽</h3><blockquote>
<p>通过name 指定名称 添加后 组件标签对里 指定对应名称的slot 书写类容</p>
</blockquote>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;h1&gt;header&lt;&#x2F;h1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;slot&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;!-- 添加一个默认插槽，可以在外部随意定义内容 --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;slot&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;slot name&#x3D;&quot;footer&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;!-- 添加 name 名称 外部可指定footer名称来定义内容 --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;slot&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;template&gt;</span></pre></td></tr></table></figure>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;Content&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;div&gt;hello world&lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;!-- v-slot:footer 指定 &lt;solt name&#x3D;&quot;footer&quot;&gt;&lt;&#x2F;solt&gt; 的插槽 --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;template v-slot:footer&gt;footer&lt;&#x2F;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;Content&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;template&gt;</span></pre></td></tr></table></figure>

<h3 id="3-作用域插槽"><a href="#3-作用域插槽" class="headerlink" title="3. 作用域插槽"></a>3. 作用域插槽</h3><blockquote>
<p>通过 v-bind 传递出 数据 添加后 通过 v-slot:main=”scope” 下就可以接受组件传递出的数据</p>
</blockquote>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;h1&gt;header&lt;&#x2F;h1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;!-- 通过 v-bind 传递出 数据 --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;slot name&#x3D;&quot;main&quot; v-bind&#x3D;&quot;&#123;text:&#39;hello world&#39;&#125;&quot;&gt;&lt;&#x2F;slot&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;template&gt;</span></pre></td></tr></table></figure>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;Content&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;!-- v-slot:main&#x3D;&quot;scope&quot; 接受到slot传递出的数据 --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;template v-slot:main&#x3D;&quot;scope&quot;&gt;&#123;&#123;scope.text&#125;&#125;&lt;&#x2F;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;Content&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;template&gt;</span></pre></td></tr></table></figure>

<h3 id="4-默认值插槽"><a href="#4-默认值插槽" class="headerlink" title="4. 默认值插槽"></a>4. 默认值插槽</h3><blockquote>
<p>顾名思义 插槽内添加默认值<br>  使用插槽时，插槽内部<code>不添加</code>任意值 就使用插槽 内默认的值</p>
</blockquote>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;h1&gt;header&lt;&#x2F;h1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;slot name&#x3D;&quot;main&quot; v-bind&#x3D;&quot;&#123;text:&#39;hello world&#39;&#125;&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;p&gt;这是mian插槽的默认值标签 当使用插槽时 插槽里不添加任意内容 就使用当前默认值&lt;&#x2F;p&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;slot&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;template&gt;</span></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue 2.0</category>
      </categories>
      <tags>
        <tag>vue 2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue install use 全局挂载</title>
    <url>/2020/06/19/vue/vue15/</url>
    <content><![CDATA[<h3 id="Vue-use-plugin"><a href="#Vue-use-plugin" class="headerlink" title="Vue.use( plugin )"></a>Vue.use( plugin )</h3><ol>
<li>参数 {Object | Function} plugin</li>
<li>安装 Vue.js 插件。如果插件是一个对象，必须提供 install 方法。如果插件是一个函数，它会被作为 install 方法。install 方法调用时，会将 Vue 作为参数传入。该方法需要在调用 new Vue() 之前被调用。</li>
</ol>
<h3 id="全局-components-挂载"><a href="#全局-components-挂载" class="headerlink" title="全局 components 挂载"></a>全局 components 挂载</h3><ol>
<li>准备一个封装完成组件</li>
<li>引入组件,install<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import FormDate from &quot;.&#x2F;FormDate.vue&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 定义 Form 对象</span></pre></td></tr><tr><td class="code"><pre><span class="line">const From &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; install 是默认的方法。当外界在 use 这个组件的时候，就会调用本身的 install 方法，同时传一个 Vue 这个类的参数。</span></pre></td></tr><tr><td class="code"><pre><span class="line">  install: function(Vue) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Vue.component(&quot;FormDate&quot;, FormDate);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 导出</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default From;</span></pre></td></tr></table></figure></li>
<li>引入mian.js use 挂载全局<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import From from &#39;.&#x2F;components&#x2F;form&#x2F;index.js&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Vue.use(Form)</span></pre></td></tr></table></figure></li>
<li>项目全局直接使用组件</li>
</ol>
<h3 id="全局-filters-挂载"><a href="#全局-filters-挂载" class="headerlink" title="全局 filters 挂载"></a>全局 filters 挂载</h3><ol>
<li>书写全局 filters <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const filter &#x3D; &#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">filter.install &#x3D; function (Vue) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; val 默认要过滤的值</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; list 过滤器使用时传入的值，不传则没有</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Vue.filter(&quot;TextMap&quot;, (val, list) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    let obj &#x3D; list &amp;&amp; list.find(item &#x3D;&gt; item.value &#x3D;&#x3D;&#x3D; val);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (obj) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      return obj.text;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      return &quot;&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default filter;</span></pre></td></tr></table></figure></li>
<li>引入mian.js use 挂载全局<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import filter from &quot;.&#x2F;libs&#x2F;filter.js&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Vue.use(filter);</span></pre></td></tr></table></figure></li>
<li>项目全局直接使用过滤器<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123;value|TextMap(list)&#125;&#125;&lt;&#x2F;div&gt;</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="全局-directive-挂载"><a href="#全局-directive-挂载" class="headerlink" title="全局 directive 挂载"></a>全局 directive 挂载</h3><ol>
<li>书写全局 directive<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const directive &#x3D; &#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">directive.install &#x3D; function (Vue) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Vue.directive(&quot;mydirective&quot;, &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    bind: function () &#123; &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    inserted: function () &#123; &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    update: function () &#123; &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    componentUpdated: function () &#123; &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    unbind: function () &#123; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default directive;</span></pre></td></tr></table></figure></li>
<li>引入mian.js use 挂载全局<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import directive from &quot;.&#x2F;libs&#x2F;directive.js&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Vue.use(directive);</span></pre></td></tr></table></figure></li>
<li>项目全局直接使用自定义指令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div v-mydirective&gt;&lt;&#x2F;div&gt;</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="全局方法挂载"><a href="#全局方法挂载" class="headerlink" title="全局方法挂载"></a>全局方法挂载</h3><ol>
<li>书写全局 方法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  install(Vue, options) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Vue.prototype.$utils &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; 获取连接参数值</span></pre></td></tr><tr><td class="code"><pre><span class="line">      getUrlParams(name) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        var reg &#x3D; new RegExp(&quot;(^|&amp;)&quot; + name + &quot;&#x3D;([^&amp;]*)(&amp;|$)&quot;, &quot;i&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        var r &#x3D; window.location.search.substr(1).match(reg);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (r !&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          return unescape(r[2]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure></li>
<li>引入mian.js use 挂载全局<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import utils from &quot;@&#x2F;libs&#x2F;utils.js&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Vue.use(utils);</span></pre></td></tr></table></figure></li>
<li>全局中使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$utils.getUrlParams(name)</span></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>vue 2.0</category>
      </categories>
      <tags>
        <tag>vue 2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>vuex 使用</title>
    <url>/2020/06/19/vue/vue19/</url>
    <content><![CDATA[<h3 id="vuex-模块化分类"><a href="#vuex-模块化分类" class="headerlink" title="vuex 模块化分类"></a>vuex 模块化分类</h3><h4 id="主模块"><a href="#主模块" class="headerlink" title="主模块"></a>主模块</h4>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &quot;vue&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import Vuex from &quot;vuex&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import VuexPersistence from &quot;vuex-persist&quot;; &#x2F;&#x2F; vuex 数据持久化</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import user from &quot;.&#x2F;module&#x2F;user&quot;; &#x2F;&#x2F; 需要引入的小模块</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">const vuexLocal &#x3D; new VuexPersistence(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  storage: window.sessionStorage, &#x2F;&#x2F; 配置浏览器存储位置</span></pre></td></tr><tr><td class="code"><pre><span class="line">  modules: [&quot;user&quot;] &#x2F;&#x2F; 需要持久化的模块</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Vue.use(Vuex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">const store &#x3D; new Vuex.Store(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  modules: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    user &#x2F;&#x2F; 模块合并</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  plugins: [vuexLocal.plugin]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default store;</span></pre></td></tr></table></figure>
<p>  vuex-persist 数据持久化插件</p>
<blockquote>
<p>npm install –save vuex-persist</p>
</blockquote>
<h4 id="子模块"><a href="#子模块" class="headerlink" title="子模块"></a>子模块</h4>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const user &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  namespaced: true, &#x2F;&#x2F; 添加模块名称</span></pre></td></tr><tr><td class="code"><pre><span class="line">  state: &#123; &#x2F;&#x2F; 声明全局变量 &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  getters:&#123; &#x2F;&#x2F; 计算属性 &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  mutations: &#123; &#x2F;&#x2F; 使用 commit(&quot;state 变量名&quot;, value) 提交变量 &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  actions: &#123; &#x2F;&#x2F; 使用 dispatch(&#123;执行上下文对象&#125;,value) 提交 进而提交mutations 修改state中的值 &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default user;</span></pre></td></tr></table></figure>

<h3 id="vuex-使用介绍"><a href="#vuex-使用介绍" class="headerlink" title="vuex 使用介绍"></a>vuex 使用介绍</h3><h4 id="namespaced"><a href="#namespaced" class="headerlink" title="namespaced"></a>namespaced</h4><blockquote>
<p>vuex中的store分模块管理，需要在store的index.js中引入各个模块，为了解决不同模块命名冲突的问题，将不同模块的namespaced:true，之后在不同页面中引入getter、actions、mutations时，需要加上所属的模块名</p>
</blockquote>
<h4 id="state"><a href="#state" class="headerlink" title="state"></a>state</h4><ol>
<li>vuex 模块中使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">state: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  num: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>页面使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; mapState &#125; from &quot;vuex&quot;;</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ...mapState(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    num: state &#x3D;&gt; state.user.num</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<blockquote>
<p>当映射的属性的名称与 state 的 子节点(一级节点) 名称相同时，我们也可以给 mapState 传一个字符串数组。</p>
</blockquote>
</li>
</ol>
<h4 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h4><ol>
<li>vuex 模块中使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getters: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  num1: state &#x3D;&gt; &#123; &#x2F;&#x2F; 通过方法访问</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return state.num + 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  num2: (state, getters) &#x3D;&gt; &#123; &#x2F;&#x2F; 通过属性访问</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return getters.num1 + 10;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>页面使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; mapGetters &#125; from &quot;vuex&quot;;</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ...mapGetters(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    num1: &quot;user&#x2F;num1&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    num2: &quot;user&#x2F;num2&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;,</span></pre></td></tr></table></figure>
<blockquote>
<p>当映射的属性的名称与 getters 的 子节点(一级节点) 名称相同时，我们也可以给 mapGetters 传一个字符串数组。</p>
</blockquote>
</li>
</ol>
<h4 id="mutations"><a href="#mutations" class="headerlink" title="mutations"></a>mutations</h4><blockquote>
<p>主要用来改变 state 中的数据 不可以书写异步</p>
</blockquote>
<ol>
<li>vuex 模块中使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mutations: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SET_NUM: (state, num) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    state.num &#x3D; num;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>页面使用</li>
</ol>
<ul>
<li>$store.commit<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; namespaced 设置为true 需要设置模块路径</span></pre></td></tr><tr><td class="code"><pre><span class="line">this.$store.commit(&#39;user&#x2F;SET_NUM&#39;,value)</span></pre></td></tr></table></figure></li>
<li>mapMutations<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; mapMutations &#125; from &quot;vuex&quot;;</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; this.setNum(value) 相当于 this.$store.commit(&#39;user&#x2F;SET_NUM&#39;,value)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ...mapMutations(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    setNum: &quot;user&#x2F;SET_NUM&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<blockquote>
<p>当映射mutation的名称与 mutation 的 子节点(一级节点) 名称相同时，我们也可以给 mapMutations 传一个字符串数组。</p>
</blockquote>
</li>
</ul>
<h4 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h4><blockquote>
<p>主要用于处理异步动作</p>
</blockquote>
<ol>
<li>vuex 模块中使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">actions: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 第一个参数为执行上下文对象 &#123; commit, dispatch, getters &#125; 等等</span></pre></td></tr><tr><td class="code"><pre><span class="line">  async Num(&#123; commit &#125;, num) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; 等待异步结果返回后 返回 Promise</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; await ...</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">      return new Promise((resolve, reject) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (num &gt; 5) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#x2F;&#x2F; 模块内部 不管namespaced是否设置为true 不写模块前缀</span></pre></td></tr><tr><td class="code"><pre><span class="line">          commit(&quot;SET_NUM&quot;, num);</span></pre></td></tr><tr><td class="code"><pre><span class="line">          resolve(num);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          reject(num);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; catch (e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      await Promise.reject(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>页面使用</li>
</ol>
<ul>
<li>$store.dispatch<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; namespaced 设置为true 需要设置模块路径</span></pre></td></tr><tr><td class="code"><pre><span class="line">this.$store.dispatch(&#39;user&#x2F;Num&#39;,value)</span></pre></td></tr></table></figure></li>
<li>mapActions<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; mapActions &#125; from &quot;vuex&quot;;</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; this.Num(value) 相当于 this.$store.dispatch(&#39;user&#x2F;Num&#39;,value)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ...mapActions(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Num: &quot;user&#x2F;Num&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<blockquote>
<p>当映射action的名称与 action 的 子节点(一级节点) 名称相同时，我们也可以给 mapActions 传一个字符串数组。</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>vue 2.0</category>
      </categories>
      <tags>
        <tag>vue 2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuex 底层实现原理</title>
    <url>/2020/07/22/vue/vue18/</url>
    <content><![CDATA[<h3 id="1-创建store挂载到根节点上"><a href="#1-创建store挂载到根节点上" class="headerlink" title="1. 创建store挂载到根节点上"></a>1. 创建store挂载到根节点上</h3><ol>
<li>创建Store<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Store &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  constructor(options) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>实例Store对象<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vuex from &#39;.&#x2F;vuex&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default new Vuex.Store(&#123;&#125;)</span></pre></td></tr></table></figure></li>
<li>将Store的实例挂载Vue根节点<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import store from &#39;.&#x2F;store&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">new Vue(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  store,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  router,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  render: h &#x3D;&gt; h(App)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;).$mount(&#39;#app&#39;)</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="2-挂载全局mixin-子节点在渲染时，添加根节点的store"><a href="#2-挂载全局mixin-子节点在渲染时，添加根节点的store" class="headerlink" title="2. 挂载全局mixin (子节点在渲染时，添加根节点的store)"></a>2. 挂载全局mixin (子节点在渲染时，添加根节点的store)</h3><ol>
<li>创建全局mixin，子节点挂载根节点store<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const install &#x3D; (Vue) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Vue.mixin(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    beforeCreate() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; 备注：组件渲染是从根节点向子节点渲染</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; 使每个组件上都存在根节点的store</span></pre></td></tr><tr><td class="code"><pre><span class="line">      if (this.$options &amp;&amp; this.$options.store) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 从根节点上拿到store</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.$store &#x3D; this.$options.store</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 从父组件上查找</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.$store &#x3D; this.$parent &amp;&amp; this.$parent.$store</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  install,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>全局挂载mixin<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import Vuex from &#39;.&#x2F;vuex&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Vue.use(Vuex)</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="3-state-getters-mutations-actions-方法实现"><a href="#3-state-getters-mutations-actions-方法实现" class="headerlink" title="3. state getters mutations actions 方法实现"></a>3. state getters mutations actions 方法实现</h3><ol>
<li>state 实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">class Store &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  constructor(options) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.vm &#x3D; new Vue(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; 实现数据双向绑定</span></pre></td></tr><tr><td class="code"><pre><span class="line">      data: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        state: options.state</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 创建并暴露state引用</span></pre></td></tr><tr><td class="code"><pre><span class="line">  get state() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return this.vm.state</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>getters 实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">class Store &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  constructor(options) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    let getters &#x3D; options.getters || &#123;&#125; &#x2F;&#x2F; 传入的getters</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.getters &#x3D; &#123;&#125; &#x2F;&#x2F; 当前实例getters</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 传入的getters复制到实例上</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Object.keys(getters).forEach(getterName &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      Object.defineProperty(this.getters, getterName, &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        get: () &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          return getters[getterName](this.state)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>mutations 实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">class Store &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  constructor(options) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    let mutations &#x3D; options.mutations || &#123;&#125; &#x2F;&#x2F; 传入的mutations</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.mutations &#x3D; &#123;&#125; &#x2F;&#x2F; 当前实例mutations</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 传入的mutations复制到实例上</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Object.keys(mutations).forEach(mutationName &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      this.mutations[mutationName] &#x3D; payload &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        mutations[mutationName](this.state, payload)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 创建调用mutations内方法的函数</span></pre></td></tr><tr><td class="code"><pre><span class="line">  commit &#x3D; (method, payload) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 注意：使用箭头函数，避免dispatch 嵌套使用时 this 指向问题</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.mutations[method](payload)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>actions 实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">class Store &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  constructor(options) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; actions</span></pre></td></tr><tr><td class="code"><pre><span class="line">    let actions &#x3D; options.actions || &#123;&#125; &#x2F;&#x2F; 传入的actions</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.actions &#x3D; &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 传入的actions复制到实例上</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Object.keys(actions).forEach(actionName &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      this.actions[actionName] &#x3D; payload &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        actions[actionName](this, payload)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 创建调用actions内方法的函数</span></pre></td></tr><tr><td class="code"><pre><span class="line">  dispatch &#x3D; (method, payload) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 注意：使用箭头函数，避免dispatch 嵌套使用时 this 指向问题</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.actions[method](payload)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>完整实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">class Store &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  constructor(options) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; state</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.vm &#x3D; new Vue(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; 实现数据双向绑定</span></pre></td></tr><tr><td class="code"><pre><span class="line">      data: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        state: options.state</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; getters</span></pre></td></tr><tr><td class="code"><pre><span class="line">    let getters &#x3D; options.getters || &#123;&#125; &#x2F;&#x2F; 传入的getters</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.getters &#x3D; &#123;&#125; &#x2F;&#x2F; 当前实例getters</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 传入的getters复制到实例上</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Object.keys(getters).forEach(getterName &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      Object.defineProperty(this.getters, getterName, &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        get: () &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          return getters[getterName](this.state)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; mutations</span></pre></td></tr><tr><td class="code"><pre><span class="line">    let mutations &#x3D; options.mutations || &#123;&#125; &#x2F;&#x2F; 传入的mutations</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.mutations &#x3D; &#123;&#125; &#x2F;&#x2F; 当前实例mutations</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 传入的mutations复制到实例上</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Object.keys(mutations).forEach(mutationName &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      this.mutations[mutationName] &#x3D; payload &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        mutations[mutationName](this.state, payload)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; actions</span></pre></td></tr><tr><td class="code"><pre><span class="line">    let actions &#x3D; options.actions || &#123;&#125; &#x2F;&#x2F; 传入的actions</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.actions &#x3D; &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 传入的actions复制到实例上</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Object.keys(actions).forEach(actionName &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      this.actions[actionName] &#x3D; payload &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        actions[actionName](this, payload)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 创建调用mutations内方法的函数</span></pre></td></tr><tr><td class="code"><pre><span class="line">  commit &#x3D; (method, payload) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 注意：使用箭头函数，避免dispatch 嵌套使用时 this 指向问题</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.mutations[method](payload)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 创建调用actions内方法的函数</span></pre></td></tr><tr><td class="code"><pre><span class="line">  dispatch &#x3D; (method, payload) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 注意：使用箭头函数，避免dispatch 嵌套使用时 this 指向问题</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.actions[method](payload)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 创建并暴露state引用</span></pre></td></tr><tr><td class="code"><pre><span class="line">  get state() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return this.vm.state</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const install &#x3D; (Vue) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Vue.mixin(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    beforeCreate() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; 备注：组件渲染是从根节点向子节点渲染</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; 使每个组件上都存在根节点的store</span></pre></td></tr><tr><td class="code"><pre><span class="line">      if (this.$options &amp;&amp; this.$options.store) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 从根节点上拿到store</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.$store &#x3D; this.$options.store</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 从父组件上查找</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.$store &#x3D; this.$parent &amp;&amp; this.$parent.$store</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  install,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Store</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="4-最后"><a href="#4-最后" class="headerlink" title="4. 最后"></a>4. 最后</h3><ul>
<li>具体请查看 <a href="https://github.com/wangxiaoqi0123/vue-vuex-hand" target="_blank" rel="noopener">https://github.com/wangxiaoqi0123/vue-vuex-hand</a></li>
</ul>
]]></content>
      <categories>
        <category>vue 2.0</category>
      </categories>
      <tags>
        <tag>vue 2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux文件及目录</title>
    <url>/2024/04/26/linux/01/</url>
    <content><![CDATA[<h3 id="目录文件操作"><a href="#目录文件操作" class="headerlink" title="目录文件操作"></a>目录文件操作</h3><p>1.查看当前路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwd</span></pre></td></tr></table></figure>
<p>2.查看当前目录下所有文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls</span></pre></td></tr><tr><td class="code"><pre><span class="line">ls -a 列出目录所有文件，包含以.开始的隐藏文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">ls -l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来</span></pre></td></tr><tr><td class="code"><pre><span class="line">ls -t 以文件修改时间排序</span></pre></td></tr><tr><td class="code"><pre><span class="line">ls -h 以易读大小显示</span></pre></td></tr></table></figure>
<p>3.查找目录和文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find [查找目录] -name&quot;[文件名]&quot; -print</span></pre></td></tr></table></figure>
<p>4.正则匹配</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 模糊匹配一个或多个字符</span></pre></td></tr><tr><td class="code"><pre><span class="line">? 匹配一个字符</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 示例：</span></pre></td></tr><tr><td class="code"><pre><span class="line">find . -name &quot;*.h&quot; -print</span></pre></td></tr><tr><td class="code"><pre><span class="line">grep &#39;99$&#39; file2.txt</span></pre></td></tr></table></figure>
<p>5.切换目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd [相对路径|绝对路径]</span></pre></td></tr></table></figure>
<p>6.创建目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir [相对路径|绝对路径]</span></pre></td></tr></table></figure>
<p>7.创建文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">touch [文件名]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[任意可以屏幕输出内容的命令] &gt; [文件名] 文件不存在时创建，文件存在时内容覆盖</span></pre></td></tr><tr><td class="code"><pre><span class="line">[任意可以屏幕输出内容的命令] &gt;&gt; [文件名] 文件不存在时创建，文件存在时内容追加</span></pre></td></tr></table></figure>
<p>8.删除目录和文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm 删除文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">rm -r 删除目录文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">rm -f 强制删除，不需要确认</span></pre></td></tr></table></figure>
<p>9.复制目录和文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp [旧文件路径] [新文件路径]</span></pre></td></tr><tr><td class="code"><pre><span class="line">cp -r [旧目录或文件路径] [新目录或文件路径]</span></pre></td></tr></table></figure>
<p>10.移动目录或文件/重命名目录或文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv [旧目录或文件路径] [新目录或文件路径] 第二个参数不存在移动该位置，存在移动到该目录下</span></pre></td></tr></table></figure>

<h3 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h3><p>1.vim</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi [文件名] 打开一个文件，如果文件不存在，就创建它。</span></pre></td></tr></table></figure>
<p>vi 有两种模式，命令模式和编辑模式，在命令模式下，键盘输入是命令，在编辑模式下，键盘输入的才是字符。<br>vi的常用命令</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>k</td>
<td>类似方向键上。</td>
</tr>
<tr>
<td>j</td>
<td>类似方向键下。</td>
</tr>
<tr>
<td>h</td>
<td>类似方向键左。</td>
</tr>
<tr>
<td>l</td>
<td>类是方向键右。</td>
</tr>
<tr>
<td>i</td>
<td>在光标所在位置前面开始插入。</td>
</tr>
<tr>
<td>a</td>
<td>在光标所在的位置后面开始插入。</td>
</tr>
<tr>
<td>o</td>
<td>在光标所在位置的下面插入空白行。</td>
</tr>
<tr>
<td>O</td>
<td>在光标所在位置的上面插入空白行。</td>
</tr>
<tr>
<td>I</td>
<td>在光标所在位置的行首开始插入。</td>
</tr>
<tr>
<td>A</td>
<td>在光标所在位置的行末开始插入。</td>
</tr>
<tr>
<td>Ctrl+u</td>
<td>上翻半页。</td>
</tr>
<tr>
<td>Ctrl+d</td>
<td>下翻半页。</td>
</tr>
<tr>
<td>Esc</td>
<td>从编辑模式切换到命令模式。</td>
</tr>
<tr>
<td>:w回车</td>
<td>存盘。</td>
</tr>
<tr>
<td>:w!回车</td>
<td>强制存盘。</td>
</tr>
<tr>
<td>:wq回车</td>
<td>存盘退出。</td>
</tr>
<tr>
<td>:w 文件名</td>
<td>把当前文件另存为……</td>
</tr>
<tr>
<td>:x回车</td>
<td>存盘退出。</td>
</tr>
<tr>
<td>:q回车</td>
<td>不存盘退出。</td>
</tr>
<tr>
<td>:q!回车</td>
<td>不存盘强制退出。</td>
</tr>
</tbody></table>
<p>2.查看文件内容cat</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat [文件名]</span></pre></td></tr></table></figure>
<p style="margin-top: -8px;">一次显示文件全部的内容，适用于内容很少的文本文件。</p>
3.查看文件的内容less
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">less [文件名]</span></pre></td></tr></table></figure>
<p style="margin-top: -8px;">按space（空格键）继续显示；Ctrl+u上翻页；Ctrl+d下翻页；j下一行；k上一行；q退出。</p>
4.查看文件的内容more
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">more [文件名]</span></pre></td></tr></table></figure>
<p style="margin-top: -8px;">按space（空格键）显示下一页；按b显示上一页；q退出。</p>
5.统计文件的行数wc
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wc [文件名可多个]</span></pre></td></tr></table></figure>
6.查找文件中的内容grep
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep &quot;[搜索内容]&quot; [文件名可多个]</span></pre></td></tr></table></figure>
7.显示文件头部的内容head
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">head -[行数] [文件名]</span></pre></td></tr></table></figure>
8.显示文件尾部的内容tail
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tail -[行数] [文件名]</span></pre></td></tr></table></figure>
9.跟踪文件尾部的内容tail -f
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tail -f [文件名] 文件变化打印变化内容</span></pre></td></tr></table></figure>
10.管道
管道就是将一个命令输出的内容重定向为另一个命令的输入。
管道操作符是|，用它将命令连起来就行了。
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 示例</span></pre></td></tr><tr><td class="code"><pre><span class="line">ls -l|more</span></pre></td></tr><tr><td class="code"><pre><span class="line">grep &quot;90&quot; file.txt|wc</span></pre></td></tr></table></figure>

<h3 id="目录文件相关"><a href="#目录文件相关" class="headerlink" title="目录文件相关"></a>目录文件相关</h3><p>1.相对路径和绝对路径<br><code>绝对路径</code>是从根（/）算起。<br><code>相对路径</code>是从当前目录算起，如果当前目录是/usr/include，stdio.h等同于/usr/include/stdio.h。</p>
<p>2.链接<br>Linux链接分硬链接和软链接（符号链接）。<br>硬链接可以简单的理解为文件的别名，只能为文件创建硬链接，不能为目录创建硬链接。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln [文件名] [链接名]</span></pre></td></tr></table></figure>
<p>硬链接不能跨文件系统。<br>硬链接允许一个文件拥有多个有效文件名，如果为重要文件建立硬链接，可以防止“误删除”，只有当删除最后一个链接的时候，文件才会被真正的删除。<br>软链接类似Windows的快捷方式，可以为目录和文件创建软链接。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -s [目录或文件名] [链接名]</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>watch监听属性 computed计算属性</title>
    <url>/2020/06/19/vue/vue17/</url>
    <content><![CDATA[<blockquote>
<p>computed<br>  是计算值 有get set 两个方法 默认是 get<br>  应用：就是简化tempalte里面计算和处理props或$emit的传值<br>  具有缓存性，页面重新渲染值不变化,计算属性会立即返回之前的计算结果，而不必再次执行函数</p>
</blockquote>
<blockquote>
<p>watch<br>  是观察的动作，<br>  应用：监听props，$emit或本组件的值执行异步操作<br>  无缓存性，页面重新渲染时值不变化也会执行</p>
</blockquote>
<h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><ul>
<li><p>相同</p>
<ol>
<li>computed 与 watch 里面计算/监听的函数 形式上是函数 实际上是变量</li>
</ol>
</li>
<li><p>区别一</p>
<ol>
<li>copmuted 计算的是一个自定义的变量 变量不可以在 data 中存在</li>
<li>watch    监听的是一个必须 已经存在的变量 (data , computed, props …)</li>
</ol>
</li>
<li><p>区别二</p>
<ol>
<li>computed 必须依赖一个或者多个数据项,然后对数据进行操作计算, 从而返回一个计算值 ,有get set 两个方法 默认是get方法, set方法  手动添加 可以接受一个修改后的值 val 形参</li>
<li>watch    监听的是一个存在的变量, 且 函数可以接受 newVal, oldVal 两个形参 </li>
</ol>
</li>
<li><p>区别三</p>
<ol>
<li>computed 不能够实现异步操作</li>
<li>watch    允许异步操作</li>
</ol>
</li>
</ul>
<h4 id="computed-使用"><a href="#computed-使用" class="headerlink" title="computed 使用"></a>computed 使用</h4><ol>
<li><p>默认get方法 直接依赖data props computed 等等 中数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  sum() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return this.num1 + this.num2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
</li>
<li><p>get set 写法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  sum: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    get() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      return this.num1 + this.num2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    set(val) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      console.log(&quot;val :&gt;&gt; &quot;, val);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


</li>
</ol>
<h4 id="watch-使用"><a href="#watch-使用" class="headerlink" title="watch 使用"></a>watch 使用</h4><ol>
<li>默认写法 直接监听data中数据的变化<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  num(newV, oldV) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(&quot;newV :&gt;&gt; &quot;, newV);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(&quot;oldV :&gt;&gt; &quot;, oldV);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>对象深度监听<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;obj.num&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    deep: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    handler(newV, oldV) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      console.log(&quot;newV :&gt;&gt; &quot;, newV);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      console.log(&quot;oldV :&gt;&gt; &quot;, oldV);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>immediate 数据首次绑定watch立即执行<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;obj.num&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    deep: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    immediate: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    handler(newV, oldV) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      console.log(&quot;newV :&gt;&gt; &quot;, newV);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      console.log(&quot;oldV :&gt;&gt; &quot;, oldV);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><h5 id="computed-return-依赖值计算的结果"><a href="#computed-return-依赖值计算的结果" class="headerlink" title="computed return 依赖值计算的结果"></a>computed return 依赖值计算的结果</h5><h5 id="watch-监听的变量-发生变化时执行函数内部的语句"><a href="#watch-监听的变量-发生变化时执行函数内部的语句" class="headerlink" title="watch 监听的变量 发生变化时执行函数内部的语句"></a>watch 监听的变量 发生变化时执行函数内部的语句</h5>]]></content>
      <categories>
        <category>vue 2.0</category>
      </categories>
      <tags>
        <tag>vue 2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux主机防火墙</title>
    <url>/2024/05/12/linux/03/</url>
    <content><![CDATA[<h3 id="防火墙的基本概念"><a href="#防火墙的基本概念" class="headerlink" title="防火墙的基本概念"></a>防火墙的基本概念</h3><p>防火墙技术是用于安全管理的软件和硬件设备，在计算机内/外网之间构建一道相对隔绝的保护屏障，以保护数据和信息安全性的一种技术。<br>防火墙分网络防火墙和主机防火墙。<br>网络防火墙由硬件加软件组成，可以保护整个网络，价格也很贵，从几万到几十万的都有，功能非常强大，主要包括入侵检测、网络地址转换、网络操作的审计监控、强化网络安全服务等功能。<br>主机防火墙只有软件部分（操作系统和杀毒软件自带），用于保护本操作系统，功能比较简单，只能防范简单的攻击。</p>
<h3 id="查看防火墙的命令"><a href="#查看防火墙的命令" class="headerlink" title="查看防火墙的命令"></a>查看防火墙的命令</h3><p>1.查看防火墙服务状态（普通用户可执行），CentOS默认启用防火墙。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl status firewalld</span></pre></td></tr></table></figure>
<p>2.查看防火墙已开通的端口，CentOS默认不开通任何端口。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-port</span></pre></td></tr></table></figure>
<p>3.查看防火墙已开通的服务（CentOS默认开通ssh和dhcpv6-client服务）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-service</span></pre></td></tr></table></figure>
<p>4.查看防火墙全部的信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-all</span></pre></td></tr></table></figure>
<p>5.查看防火墙支持的服务的列表（普通用户可执行）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --get-services</span></pre></td></tr></table></figure>
<p>6.查看防火墙服务是否开机启动。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl is-enabled firewalld</span></pre></td></tr></table></figure>
<p>7.查看防火墙的状态。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --state</span></pre></td></tr></table></figure>
<p>8.查看防火墙的版本。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --version</span></pre></td></tr></table></figure>

<h3 id="配置防火墙的命令"><a href="#配置防火墙的命令" class="headerlink" title="配置防火墙的命令"></a>配置防火墙的命令</h3><p>1.启动、重启、关闭防火墙服务。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 启动</span></pre></td></tr><tr><td class="code"><pre><span class="line">systemctl start firewalld</span></pre></td></tr><tr><td class="code"><pre><span class="line"># 重启</span></pre></td></tr><tr><td class="code"><pre><span class="line">systemctl restart firewalld</span></pre></td></tr><tr><td class="code"><pre><span class="line"># 关闭</span></pre></td></tr><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span></pre></td></tr></table></figure>
<p>2.开通、移去端口。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 开通80端口</span></pre></td></tr><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;80&#x2F;tcp --permanent</span></pre></td></tr><tr><td class="code"><pre><span class="line"># 移去80端口</span></pre></td></tr><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --remove-port&#x3D;80&#x2F;tcp --permanent</span></pre></td></tr></table></figure>
<p>3.开通、移除服务。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 开通ftp服务</span></pre></td></tr><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-service&#x3D;ftp --permanent</span></pre></td></tr><tr><td class="code"><pre><span class="line"># 移去http服务</span></pre></td></tr><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --remove-service&#x3D;http --permanent</span></pre></td></tr><tr><td class="code"><pre><span class="line"># 常用服务的端口：ssh(22）、HTTP(80、8080)、MySQL(3306)、Oracle(1521) 、ftp(21）、</span></pre></td></tr><tr><td class="code"><pre><span class="line">telnet(23）。</span></pre></td></tr></table></figure>
<p>4.开通、移去范围端口。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 开通5000-5500之间的端口</span></pre></td></tr><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;5000-5500&#x2F;tcp --permanent</span></pre></td></tr><tr><td class="code"><pre><span class="line"># 移去5000-5500之间的端口</span></pre></td></tr><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --remove-port&#x3D;5000-5500&#x2F;tcp --permanent</span></pre></td></tr></table></figure>
<p>5.重新加载防火墙配置参数（修改配置后要重新加载防火墙配置或重启防火墙服务.。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span></pre></td></tr></table></figure>
<p>6.设置开机时启用、禁用防火墙服务。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 启用服务</span></pre></td></tr><tr><td class="code"><pre><span class="line">systemctl enable firewalld</span></pre></td></tr><tr><td class="code"><pre><span class="line"># 禁用服务</span></pre></td></tr><tr><td class="code"><pre><span class="line">systemctl disable firewalld</span></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux相关操作</title>
    <url>/2024/04/29/linux/04/</url>
    <content><![CDATA[<h3 id="软件包安装"><a href="#软件包安装" class="headerlink" title="软件包安装"></a>软件包安装</h3><p>1、安装软件包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install [软件包名]</span></pre></td></tr></table></figure>
<p>2、删除软件包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y remove [软件包名]</span></pre></td></tr></table></figure>
<p>3、升级软件包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum update [软件包名]</span></pre></td></tr></table></figure>
<p>4、如何知道需要安装的软件包名<br>百度<br>5、yum仓库<br>互联网上有很多yum仓库，不需要任何配置就可以使用<br>不允许访问互联网的企业用户可能自建yum仓库<br>6、查找软件包。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum search [软件包名]</span></pre></td></tr></table></figure>
<p>7、列出所有可更新的软件包清单</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum check-update</span></pre></td></tr></table></figure>
<p>8、更新所有软件包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum update</span></pre></td></tr></table></figure>
<p>9、列出所有可安装软件包的清单</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum list</span></pre></td></tr></table></figure>

<h3 id="附件上传下载"><a href="#附件上传下载" class="headerlink" title="附件上传下载"></a>附件上传下载</h3><p>建立SFTP链接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sftp [用户名]@[服务器地址]</span></pre></td></tr></table></figure>
<p>1.显示本地当前目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lpwd</span></pre></td></tr></table></figure>
<p>2.显示服务器当前目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwd</span></pre></td></tr></table></figure>
<p>3.列出本地目录中的内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lls -l [目录名]</span></pre></td></tr></table></figure>
<p>4.列出服务器目录中的内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -l [目录名]</span></pre></td></tr></table></figure>
<p>5.切换本地当前目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lcd [目录名]</span></pre></td></tr></table></figure>
<p>6.切换服务器当前目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd [目录名]</span></pre></td></tr></table></figure>
<p>7.上传文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">put [文件名] &#x2F;&#x2F; 可以用\*匹配文件名。</span></pre></td></tr><tr><td class="code"><pre><span class="line">put -r [文件目录] &#x2F;&#x2F; 递归上传目录及其子目录中的所有文件。</span></pre></td></tr></table></figure>
<p>8.下载文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">get [文件名] &#x2F;&#x2F; 可以用\*匹配文件名。</span></pre></td></tr><tr><td class="code"><pre><span class="line">get -r [文件目录] &#x2F;&#x2F; 递归下载目录及其子目录中的所有文件。</span></pre></td></tr></table></figure>
<p>9.退出SFTP</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit</span></pre></td></tr></table></figure>

<h3 id="压缩与解压"><a href="#压缩与解压" class="headerlink" title="压缩与解压"></a>压缩与解压</h3><p>1.查看压缩文件目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zip -sf [压缩包名]</span></pre></td></tr><tr><td class="code"><pre><span class="line">unzip -l [压缩包名]</span></pre></td></tr></table></figure>
<p>2.压缩文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zip -r [设置压缩包名] [目录和文件名列表可多选可正则]</span></pre></td></tr></table></figure>
<p>3.压缩包追加文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zip -u [压缩包名] [目录和文件名列表可多选可正则]</span></pre></td></tr></table></figure>
<p>4.压缩包中删除指定的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zip -d [压缩包名] [目录和文件名列表可多选可正则]</span></pre></td></tr></table></figure>
<p>5.解压（压缩包所用文件到当前目录下）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unzip [压缩包名]</span></pre></td></tr></table></figure>
<p>6.解压指定目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unzip -d [目录名] [压缩包名]</span></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux用户及权限管理</title>
    <url>/2024/05/11/linux/02/</url>
    <content><![CDATA[<h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p>1、组管理<br>Linux的用户属于组（角色），系统可以对一个组中的全部用户进行集中管理（权限）。<br>创建组：groupadd 组名<br>删除组：groupdel 组名<br>组的信息保存在文件<code>/etc/group</code>中。</p>
<p>2、用户管理<br>创建用户：useradd -n 用户名 -g 组名 -d 用户的主目录<br>删除用户：userdel 用户名<br>用户的信息保存在文件<code>/etc/passwd</code>中。</p>
<p>3、修改用户的密码<br>创建用户后，必须设置它的密码，否则无法登录。<br>root用户可以修改任何用户的密码：passwd 用户名<br>普通用户只能修改自己的密码：passwd<br>用户的密码保存在 文件<code>/etc/shadow</code>中。</p>
<p>4、切换用户<br>root用户可以免密码切换到任何用户：su - 用户名<br>普通用户切换到其它用户：su - 或su - 用户名，然后输入目标用户的密码。</p>
<p>5、修改目录和文件的拥有者<br>用root用户执行：<br>chown -R 用户:组 目录和文件列表<br>-R选项表示连同各子目录一起修改。</p>
<h3 id="目录文件权限"><a href="#目录文件权限" class="headerlink" title="目录文件权限"></a>目录文件权限</h3><p>1.目录和文件的详细信息<br>ls -l 命令可以列出目录和文件权限、大小、用户和组等信息。<br><img src="/images/2024/linux_document_001.png" style="margin-left: 0px; width: 480px;"><br><img src="/images/2024/linux_document_002.png" style="margin-left: 0px; width: 280px;"></p>
<p style="margin: -8px 0 0;">第1列权限的标志位。<br/>第1个字符为文件类型：d是目录；-是普通文件；l是链接；p是管道文件；b是块设备文件（硬盘）；c是字符设备文件（终端、打印机）；s是套接字文件；<br/>第2-10个字符为文件权限（r-读权限；w-写权限；x-可执行权限，-表示无权限）</p>
第2列是文件硬链接数或目录的子目录数<br/>
第3列是文件拥有者用户<br/>
第4列是文件拥有者用户所在组<br/>
第5列是目录或文件的大小<br/>
第6、7、8列是目录或文件最后一次被修改的时间<br/>
第9列是目录或文件名<br/><br/>

<p>2.文件的权限<br>r：表示具有读取文件内容的权限。<br>w：表示具有修改文件内容的权限，同时需要有r权限。注意，如果要删除文件，需要有目录的w权限。<br>x：表示具有执行文件的权限，同时需要有r权限。注意，文件是否能真的执行，还要由文件本身决定。</p>
<p>3.目录的权限<br>x：表示可以进入目录。<br>r：表示可以浏览目录中有哪些子目录和文件，同时需要有x权限。<br>w：表示可以在目录中新增、删除、移动子目录和文件，同时需要有x权限。</p>
<p>4.设置权限（八进制语法）<br>权限也可以用八进制的数字表示：r的值为4，w的值为2，x的值为1。<br>7 rwx &nbsp;&nbsp; 6 rw- &nbsp;&nbsp; 5 r-x &nbsp;&nbsp; 4 r-- &nbsp;&nbsp; 3 -wx &nbsp;&nbsp; 2 -w-  &nbsp;&nbsp; 1 --x  &nbsp;&nbsp; 0 ---<br><img src="/images/2024/linux_document_003.png" style="margin-left: 0px; width: 280px;"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod [三位的八进制权限] [目录和文件列表]</span></pre></td></tr><tr><td class="code"><pre><span class="line">chmod -R [三位的八进制权限] [目录和文件列表] 所有目录各子目录一起设置权限</span></pre></td></tr></table></figure>
<p>5.设置权限（符号模式）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod [who][operator][permission] [目录和文件列表]</span></pre></td></tr><tr><td class="code"><pre><span class="line">chmod -R [who][operator][permission] [目录和文件列表] 所有目录各子目录一起设置权限</span></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>who</th>
<th>用户类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>u</td>
<td>user</td>
<td>文件的所有者</td>
</tr>
<tr>
<td>g</td>
<td>group</td>
<td>文件所有者的组</td>
</tr>
<tr>
<td>o</td>
<td>others</td>
<td>其它用户</td>
</tr>
<tr>
<td>a</td>
<td>all</td>
<td>全部用户，相当于ugo</td>
</tr>
</tbody></table>
<table border="1">
  <tr>
    <th width='123px'>operator</th>
    <th >说明</th>
  </tr>
  <tr>
    <td>+</td>
    <td>增加权限</td>
  </tr>
  <tr>
    <td>-</td>
    <td>取消权限</td>
  </tr>
  <tr>
    <td>=</td>
    <td>重新设置权限</td>
  </tr>
</table>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统服务管理</title>
    <url>/2024/05/13/linux/05/</url>
    <content><![CDATA[<p>服务的配置文件存放在/usr/lib/systemd/system目录中。<br>重点关注的服务有防火墙（firewalld.service）、远程登录（sshd.service，SSH协议）、文件传输（vsftpd.service，FTP协议）。</p>
<h3 id="systemctl常用命令"><a href="#systemctl常用命令" class="headerlink" title="systemctl常用命令"></a>systemctl常用命令</h3><p>systemctl命令的形式是：<br><code>systemctl [操作] [服务名]</code> 或者 <code>systemctl [操作] [服务名.service]</code></p>
<p>1.启动服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start [服务名]</span></pre></td></tr></table></figure>
<p>2.停止服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl stop [服务名]</span></pre></td></tr></table></figure>
<p>3.重启服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart [服务名]</span></pre></td></tr></table></figure>
<p>4.查看服务是否已启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl is-active [服务名]</span></pre></td></tr></table></figure>
<p>5.查看服务的状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl status [服务名]</span></pre></td></tr></table></figure>
<p>6.启用开机自启动服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable [服务名]</span></pre></td></tr></table></figure>
<p>7.禁用开机自启动服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl disable [服务名]</span></pre></td></tr></table></figure>
<p>8.查看服务是否为开机自启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl is-enabled [服务名]</span></pre></td></tr></table></figure>
<p>9.查看所有服务的状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl list-unit-files --type service</span></pre></td></tr></table></figure>
<p>10.查看启动成功的服务列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl list-unit-files|grep enabled</span></pre></td></tr></table></figure>
<p>11.查看启动失败的服务列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl --failed</span></pre></td></tr></table></figure>
<p>12.列出在指定服务之前启动的服务（依赖）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl list-dependencies --after [服务名]</span></pre></td></tr></table></figure>
<p>13.列出在指定服务之后启动的服务（被依赖）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl list-dependencies --before [服务名]</span></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack 常用插件</title>
    <url>/2022/07/01/webpack/webpack02/</url>
    <content><![CDATA[<h3 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h3><blockquote>
<p>css<br>yarn add style-loader css-loader postcss-loader -D<br>yarn add sass sass-loader -D<br>yarn add less less-loader -D<br>处理css文件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  test: &#x2F;\.(css|scss)$&#x2F;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  use: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;style-loader&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      loader: &#39;css-loader&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      options: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        importLoaders: 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      loader: &#39;postcss-loader&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      options: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        postcssOptions: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#x2F;&#x2F; postcss-preset-env插件：帮postcss找到package.json中的browserslist配置，根据配置加载指定的兼容性样式</span></pre></td></tr><tr><td class="code"><pre><span class="line">          plugins: [require(&#39;postcss-preset-env&#39;)()]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;sass-loader&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; .browserslistrc</span></pre></td></tr><tr><td class="code"><pre><span class="line">last 1 version</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt; 1%</span></pre></td></tr><tr><td class="code"><pre><span class="line">maintained node versions</span></pre></td></tr><tr><td class="code"><pre><span class="line">not dead</span></pre></td></tr></table></figure>

<blockquote>
<p>html<br>yarn add html-loader extract-loader ejs-loader -D</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test: &#x2F;\.html$&#x2F;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">use: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    loader: &#39;ejs-loader&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    options: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      esModule: false,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#39;extract-loader&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#39;html-loader&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">]</span></pre></td></tr></table></figure>


<h3 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h3><p><a href="https://webpack.docschina.org/plugins/" target="_blank" rel="noopener">https://webpack.docschina.org/plugins/</a></p>
<blockquote>
<p>html-webpack-plugin<br>处理html模板</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="code"><pre><span class="line">new HtmlWebpackPlugin(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  template: &#39;.&#x2F;public&#x2F;index.html&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  filename: &#39;index.html&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
<br>

<blockquote>
<p>progress-bar-webpack-plugin<br>构建进度条</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const ProgressBarPlugin &#x3D; require(&#39;progress-bar-webpack-plugin&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="code"><pre><span class="line">new ProgressBarPlugin(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  format: &#96;  :msg [:bar] :percent (:elapsed s)&#96;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
<br>

<blockquote>
<p>speed-measure-webpack-plugin<br>查看各个 loader、plugin 的构建时长</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const SpeedMeasurePlugin &#x3D; require(&quot;speed-measure-webpack-plugin&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">const smp &#x3D; new SpeedMeasurePlugin();</span></pre></td></tr><tr><td class="code"><pre><span class="line">module.exports &#x3D; smp.wrap(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; ...webpack config...</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
<br>

<blockquote>
<p>copy-webpack-plugin<br>复制静态资源</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const CopyWebpackPlugin &#x3D; require(&#39;copy-webpack-plugin&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="code"><pre><span class="line">new CopyWebpackPlugin(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  patterns: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      from: resolve(__dirname, &#39;..&#x2F;pubilc&#x2F;favicon.ico&#39;),</span></pre></td></tr><tr><td class="code"><pre><span class="line">      to: &#39;&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
<br>

<blockquote>
<p>webpack.DefinePlugin<br>定义赋值全局公共变量</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const webpack &#x3D; require(&#39;webpack&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="code"><pre><span class="line">new webpack.DefinePlugin(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  BASE_URL: JSON.stringify(process.env.BASE_URL || &#39;&#x2F;&#39;),</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#39;process.env&#39;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    BASE_URL: JSON.stringify(process.env.BASE_URL || &#39;&#x2F;&#39;),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    NODE_ENV: JSON.stringify(process.env.NODE_ENV || &#39;&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
<br>

<blockquote>
<p>compression-webpack-plugin<br>gzip 压缩</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const CompressionWebpackPlugin &#x3D; require(&#39;compression-webpack-plugin&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">···</span></pre></td></tr><tr><td class="code"><pre><span class="line">new CompressionWebpackPlugin(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  filename: &#39;[path][base].gz&#39;, &#x2F;&#x2F; 目标资源名称。[file] 会被替换成原资源。[path] 会被替换成原资源路径，[query] 替换成原查询字符串</span></pre></td></tr><tr><td class="code"><pre><span class="line">  algorithm: &#39;gzip&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  test: &#x2F;.(js|css)$&#x2F;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  threshold: 10240, &#x2F;&#x2F; 只处理比这个值大的资源。按字节计算, 默认为0</span></pre></td></tr><tr><td class="code"><pre><span class="line">  minRatio: 0.8, &#x2F;&#x2F; 只有压缩率比这个值小的资源才会被处理, 默认为0.8</span></pre></td></tr><tr><td class="code"><pre><span class="line">  deleteOriginalAssets: false &#x2F;&#x2F;是否删除原始文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
<br>

<h3 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h3><blockquote>
<p>yarn add vue-template-compiler vue-loader vue-style-loader -D<br>yarn add vue vue-router -S</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const &#123; VueLoaderPlugin &#125; &#x3D; require(&#39;vue-loader&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="code"><pre><span class="line">module: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  rules: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; vue-loader 要放在匹配规则的第一个，否则会报错</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      test: &#x2F;.vue$&#x2F;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      loader: &#39;vue-loader&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      include: [resolve(__dirname, &#39;..&#x2F;src&#39;)],</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">plugins: [new VueLoaderPlugin()]</span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack 核心配置</title>
    <url>/2022/06/30/webpack/webpack01/</url>
    <content><![CDATA[<h3 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h3><blockquote>
<p>npm init -y<br>npm install webpack webpack-cli webpack-dev-server –save-dev<br>touch webpack.config.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &quot;start&quot;: &quot;webpack-dev-server --config webpack.config.js&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &quot;build&quot;: &quot;webpack --config webpack.config.js&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
</blockquote>
<h3 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h3><blockquote>
<p>入口（entry）：webpack以哪个文件为入口起点开始打包，分析构建内部依赖图</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; string方式：单入口</span></pre></td></tr><tr><td class="code"><pre><span class="line">entry: &#39;.&#x2F;src&#x2F;index.js&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; array方式：多入口</span></pre></td></tr><tr><td class="code"><pre><span class="line">entry: [&#39;.&#x2F;src&#x2F;index.js&#39;, &#39;.&#x2F;src&#x2F;test.js&#39;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; object方式：多入口</span></pre></td></tr><tr><td class="code"><pre><span class="line">entry: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  index: &#39;.&#x2F;src&#x2F;index.js&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  test: &#39;.&#x2F;src&#x2F;test.js&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>string方式、array方式打包只会形成一个chunk，输出一个文件。object方式打包，有几个入口文件就输出几个文件，文件的名称为对象的key。</p>
<h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><blockquote>
<p>输出（output）：webpack打包后文件输出到哪里，以及如何命名</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 指定输出位置 目录</span></pre></td></tr><tr><td class="code"><pre><span class="line">path: resolve(__dirname, &#39;dist&#39;),</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; name根据entry判断生成，默认main.js</span></pre></td></tr><tr><td class="code"><pre><span class="line">filename: &#39;[name].js&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 所有资源引入公共路径前缀</span></pre></td></tr><tr><td class="code"><pre><span class="line">publicPath: &#39;&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; import动态导入形成的chunk</span></pre></td></tr><tr><td class="code"><pre><span class="line">chunkFilename: &#39;[contenthash:10].chunk.js&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">clean: true, &#x2F;&#x2F; 打包前清空输出目录，相当于clean-webpack-plugin插件的作用,webpack5新增。</span></pre></td></tr><tr><td class="code"><pre><span class="line">library: &#39;library&#39;, &#x2F;&#x2F; 导出库名称</span></pre></td></tr><tr><td class="code"><pre><span class="line">libraryTarget: &#39;umd&#39; &#x2F;&#x2F; 导出库类型</span></pre></td></tr></table></figure>
<p>library 对指定输出的文件，打包成库的形式，根据libraryTarget的类型，支持 es6、commonjs、AMD、script… 使用方式。</p>
<h3 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h3><blockquote>
<p>文件处理（loader）<br>Loader 让 webpack 能够去处理那些非 javascript 文件(webpack 自身只理解javascript)<br>Loader 作为翻译官 将 css img … 这些webpack 不能识别的文件,翻译成webpack 可以识别的文件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rules: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 匹配文件正则</span></pre></td></tr><tr><td class="code"><pre><span class="line">    test: &#x2F;\.less$&#x2F;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 指定检查的文件路径</span></pre></td></tr><tr><td class="code"><pre><span class="line">    include: [resolve(__dirname, &#39;src&#39;)],</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 排除不需要检查的文件路径</span></pre></td></tr><tr><td class="code"><pre><span class="line">    exclude: [resolve(__dirname, &#39;node_modules&#39;)],</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 使用loader 处理文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; use数组中loader执行顺序：从右到左，从下到上，一次执行</span></pre></td></tr><tr><td class="code"><pre><span class="line">    use: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; 创建style标签，将js中的样式资源插入进入，添加到head中生效</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#39;style-loader&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; 将css文件变成 commonjs模块，加载js中，里面类容是样式字符串</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#39;css-loader&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; css 兼容处理 postcss，注意需要在package.json配置browserslist</span></pre></td></tr><tr><td class="code"><pre><span class="line">        loader: &quot;postcss-loader&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; options 属性为字符串或对象。值可以传递到 loader 中，将其理解为 loader 选项。</span></pre></td></tr><tr><td class="code"><pre><span class="line">        options: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            postcssOptions: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#x2F;&#x2F; postcss-preset-env插件：帮postcss找到package.json中的browserslist配置，根据配置加载指定的兼容性样式      </span></pre></td></tr><tr><td class="code"><pre><span class="line">                plugins: [require(&quot;postcss-preset-env&quot;)()],</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; 将less 编译成 css文件 (需要下载 less-loader 和 less)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#39;less-loader&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">]</span></pre></td></tr></table></figure>
<p>use数组中loader执行顺序：从右到左，从下到上，一次执行。<br>options 属性为字符串或对象。值可以传递到 loader 中，将其理解为 loader 选项。</p>
<h3 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h3><blockquote>
<p>插件（plugins）：可以执行范围更广泛的任务, 插件的范围包括, 从打包优化和压缩,一直到从新定义环境中的变量等。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">const MiniCssExtractPlugin &#x3D; require(&#39;mini-css-extract-plugin&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  output: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    path: resolve(__dirname, &#39;dist&#39;),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    filename: &#39;[name].js&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  module: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    rules: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        test: &#x2F;\.less$&#x2F;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        use: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">          MiniCssExtractPlugin.loader,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#39;css-loader&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#39;less-loader&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  plugins: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    new HtmlWebpackPlugin(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      templete: &#39;.&#x2F;public&#x2F;index.html&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    new MiniCssExtractPlugin(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      filename:&#39;css&#x2F;box.css&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h3 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h3><blockquote>
<p>模式（mode）：webpack 使用相应模式的配置</p>
</blockquote>
<table>
    <tr>
        <th width='120px'>选项</th>
        <th>描述</th>
    </tr>
    <tr>
        <td>development</td>
        <td>
         会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 development. 为模块和 chunk 启用有效的名。
        </td>
    </tr>
    <tr>
        <td>production</td>
        <td>
          会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 production。为模块和 chunk 启用确定性的混淆名称，FlagDependencyUsagePlugin，FlagIncludedChunksPlugin，ModuleConcatenationPlugin，NoEmitOnErrorsPlugin 和 TerserPlugin 。
        </td>
    </tr>
</table>
DefinePlugin：定义全局变量process.env.NODE_ENV，区分程序运行状态。<br>
FlagDependencyUsagePlugin：标记没有用到的依赖。<br>
FlagIncludedChunksPlugin：标记chunks，防止chunks多次加载。<br>
ModuleConcatenationPlugin：作用域提升(scope hosting)，预编译功能，提升或者预编译所有模块到一个闭包中，提升代码在浏览器中的执行速度。<br>
NoEmitOnErrorsPlugin：防止程序报错，就算有错误也继续编译。<br>
TerserPlugin：压缩js代码。


<h3 id="其他常用配置"><a href="#其他常用配置" class="headerlink" title="其他常用配置"></a>其他常用配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">devServer: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 运行服务的目录 (webpack4 使用 contentBase)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  static: resolve(__dirname, &#39;dist&#39;),</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 开启gzip压缩</span></pre></td></tr><tr><td class="code"><pre><span class="line">  compress: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  host: &#39;localhost&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  port: 8080,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 开启热更新</span></pre></td></tr><tr><td class="code"><pre><span class="line">  hot: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 启动自动打开浏览器</span></pre></td></tr><tr><td class="code"><pre><span class="line">  open: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 设置代理</span></pre></td></tr><tr><td class="code"><pre><span class="line">  proxy: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 匹配到&#x2F;api&#x2F;xxx的请求，就会用devServer起的服务把请求转发到另外一个服务器（3000）</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 以此来解决开发中的跨域问题</span></pre></td></tr><tr><td class="code"><pre><span class="line">    api: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      target: &#39;https:&#x2F;&#x2F;localhost:3000&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; 发送请求时，请求路径重写：将&#x2F;api&#x2F;xxx  --&gt; &#x2F;xxx （去掉&#x2F;api）</span></pre></td></tr><tr><td class="code"><pre><span class="line">      pathRewrite: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#39;^api&#39;: &#39;&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">resolve: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 设置别名</span></pre></td></tr><tr><td class="code"><pre><span class="line">  alias: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;@&#39;: resolve(__dirname, &#39;src&#39;),</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  extensions: [&#39;.js&#39;, &#39;.json&#39;, &#39;.vue&#39;], &#x2F;&#x2F; 省略文件后缀</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 指定引用包的位置 默认node_modules</span></pre></td></tr><tr><td class="code"><pre><span class="line">  modules: [resolve(__dirname, &#39;modules&#39;), &#39;node_modules&#39;],</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;,</span></pre></td></tr></table></figure>
在项目中对模块 import 或者 require 时，如果引用后缀没有 './' 之类的开头，则会从当前项目package的node_modules（默认）中查找，没查找到则会想上一级的package对应项目中查找，一直到全局。<br>
包引用访问时，modules:[]前面的位置会先访问。<br>
查找是根据引用的”名称“找到对应”文件夹“，然后检查文件夹内是否有package.json，如果有则访问到package中main指定的文件，如果没有则默认访问改目录下index.js。

<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">optimization: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 提取公共代码</span></pre></td></tr><tr><td class="code"><pre><span class="line">    splitChunks: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        chunks: &quot;all&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    minimizer: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 配置生产环境的压缩方案：js和css</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new TerserWebpackPlugin(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 多进程打包</span></pre></td></tr><tr><td class="code"><pre><span class="line">            parallel: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            terserOptions: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#x2F;&#x2F; 启动source-map</span></pre></td></tr><tr><td class="code"><pre><span class="line">                sourceMap: true</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux进程</title>
    <url>/2024/05/16/linux/07/</url>
    <content><![CDATA[<p>进程就是系统中正在运行的程序（linux 的命令也是程序）。</p>
<h3 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h3><p>用<code>ps</code>命令可以查看进程。<br>方法一：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef|less</span></pre></td></tr><tr><td class="code"><pre><span class="line">ps -ef|grep [关键字]</span></pre></td></tr></table></figure>
<img src="/images/2024/linux_ps_001.png">

<table>
<thead>
<tr>
<th>字段名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>UID</td>
<td>启动进程的用户名。</td>
</tr>
<tr>
<td>PID</td>
<td>进程编号。</td>
</tr>
<tr>
<td>PPID</td>
<td>父进程编号。</td>
</tr>
<tr>
<td>C</td>
<td>进程当前占用 CPU 的百分比，如果该值过高，需要重点关注。</td>
</tr>
<tr>
<td>STIME</td>
<td>进程启动的时间。</td>
</tr>
<tr>
<td>TTY</td>
<td>运行进程的终端：tty1 是图形化终端；tty2-tty6 是本地字符界面终端；pts/0-255 是虚拟终端；?是与终端无关的后台进程。</td>
</tr>
<tr>
<td>TIME</td>
<td>进程使用的 CPU 时间（合计）。</td>
</tr>
<tr>
<td>CMD</td>
<td>产生此进程的程序或命令。</td>
</tr>
</tbody></table>
<p>方法二：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps aux|less</span></pre></td></tr><tr><td class="code"><pre><span class="line">ps aux|grep [关键字]</span></pre></td></tr></table></figure>
<img src="/images/2024/linux_ps_002.png">

<table>
<thead>
<tr>
<th>字段名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>USER</td>
<td>启动进程的用户名。</td>
</tr>
<tr>
<td>PID</td>
<td>进程编号。</td>
</tr>
<tr>
<td>%CPU</td>
<td>进程占用的CPU百分比。</td>
</tr>
<tr>
<td>%MEM</td>
<td>占用内存的百分比。</td>
</tr>
<tr>
<td>VSZ</td>
<td>该进程使用的虚拟內存量（KB）。</td>
</tr>
<tr>
<td>RSS</td>
<td>该进程使用的物理內存量（KB）。</td>
</tr>
<tr>
<td>TTY</td>
<td>运行进程的终端：tty1是图形化终端；tty2-tty6是本地字符界面终端；pts/0-255是虚拟终端；?是与终端无关的后台进程。</td>
</tr>
<tr>
<td>STAT</td>
<td>进程的状态。</td>
</tr>
<tr>
<td>START</td>
<td>进程启动的时间。</td>
</tr>
<tr>
<td>TIME</td>
<td>进程使用的CPU时间（合计）。</td>
</tr>
<tr>
<td>COMMAND</td>
<td>产生此进程的程序或命令。</td>
</tr>
</tbody></table>
<p>其中STAT常见的状态有：</p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>说明 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
</tr>
</thead>
<tbody><tr>
<td>R</td>
<td>运行状态</td>
</tr>
<tr>
<td>S</td>
<td>休眠状态</td>
</tr>
<tr>
<td>T</td>
<td>暂停状态</td>
</tr>
<tr>
<td>Z</td>
<td>僵尸状态</td>
</tr>
<tr>
<td>&lt;</td>
<td>优先级高的进程</td>
</tr>
<tr>
<td>N</td>
<td>优先级低的进程</td>
</tr>
<tr>
<td>s</td>
<td>进程的领导者（在它之下有子进程）</td>
</tr>
<tr>
<td>l</td>
<td>多线程</td>
</tr>
<tr>
<td>+</td>
<td>前台显示的进程</td>
</tr>
</tbody></table>
<h3 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kill 进程编号</span></pre></td></tr><tr><td class="code"><pre><span class="line">killall 程序名</span></pre></td></tr></table></figure>
<p>加-9的选项表示强行终止进程。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux环境变量</title>
    <url>/2024/05/15/linux/06/</url>
    <content><![CDATA[<h3 id="查看环境变量"><a href="#查看环境变量" class="headerlink" title="查看环境变量"></a>查看环境变量</h3><p>1.env命令<br>在shell下，用env命令查看当前用户全部的环境变量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">env</span></pre></td></tr><tr><td class="code"><pre><span class="line">env|less</span></pre></td></tr><tr><td class="code"><pre><span class="line">env|grep LANG</span></pre></td></tr></table></figure>
<p>2.echo命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo $环境变量名</span></pre></td></tr></table></figure>

<h3 id="常用环境变量"><a href="#常用环境变量" class="headerlink" title="常用环境变量"></a>常用环境变量</h3><p>1.LANG<br>Linux系统的语言和字符集，默认的中文字符zh_CN.UTF-8。<br>2.SHELL<br>用户当前使用的shell 的路径，如 bash 或 zsh。<br>3.HOSTNAME<br>服务器的主机名。<br>4.HISTSIZE<br>保存历史命令的数目。<br>5.USER<br>当前登录用户的用户名。<br>6.HOME<br>当前登录用户的主目录。<br>7.PWD<br>当前工作目录。<br>8.PATH<br>可执行程序的搜索目录，决定了 shell 将到哪些目录中寻找命令或程序。</p>
<h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><p>1.基本语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export 变量名&#x3D;&#39;值&#39;</span></pre></td></tr></table></figure>
<p>=前后不能有空格。<br>如果环境变量的值没有空格等特殊符号，值可以不用单引号包含。<br><u>这种方法定义的变量只存储在当前会话,环境变量会在退出shell后就会失效，下次登录时需要重新设置。如果希望环境变量永久生效，需要在脚本文件中配置。</u></p>
<p>2.设置PATH环境变量注意<br>export PATH=$PATH:新增的目录1:新增的目录2:新增的目录n:.<br>1）<code>$PATH</code>表示包含原有PATH的值；<br>2）目录之间用<code>:</code>分隔；<br>3）<code>.</code>表示当前目录。</p>
<h3 id="设置系统环境变量"><a href="#设置系统环境变量" class="headerlink" title="设置系统环境变量"></a>设置系统环境变量</h3><p><u>系统环境变量对全部的用户生效，设置系统环境变量有三种方法。</u></p>
<p>1.在<code>/etc/profile.d</code>目录中增加设置环境变量脚本文件（Linux推荐）。<br>进入/etc/profile.d目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;profile.d</span></pre></td></tr></table></figure>
<p>自定义创建脚本文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi test.sh</span></pre></td></tr></table></figure>
<p>设置环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TEST_ENV&#x3D;&#39;hello world!&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export TEST_ENV</span></pre></td></tr></table></figure>
<p>刷新环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source &#x2F;etc&#x2F;profile</span></pre></td></tr></table></figure>
<p>查看环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo $TEST_ENV</span></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">env | grep TEST_ENV</span></pre></td></tr></table></figure>

<p>2.在<code>/etc/profile</code>文件中设置环境变量（Linux不建议）。<br>用户登录时执行/etc/profile文件中设置系统的环境变量。但是，Linux不建议在/etc/profile文件中设置系统环境变量。<br>/etc/profile在每次启动时会执行 /etc/profile.d下全部的脚本文件。<br>/etc/profile.d比/etc/profile好维护，不想要什么变量直接删除 /etc/profile.d下对应的 shell 脚本即可。</p>
<p>3.在<code>/etc/bashrc</code>文件中设置环境变量（Linux不建议）。</p>
<h3 id="设置用户环境变量"><a href="#设置用户环境变量" class="headerlink" title="设置用户环境变量"></a>设置用户环境变量</h3><p><u>用户环境变量只对当前用户生效</u></p>
<p>1.<code>~/.bash_profile</code>（推荐首选）<br>当用户登录时执行，每个用户都可以使用该文件来配置专属于自己的环境变量。<br>打开文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi ~&#x2F;.bash_profile</span></pre></td></tr></table></figure>
<p>添加环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export TEST_USER_ENV&#x3D;&#39;a boy!&#39;</span></pre></td></tr></table></figure>
<p>刷新环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source ~&#x2F;.bash_profile</span></pre></td></tr></table></figure>

<p>2.<code>~/.bashrc</code><br>当用户登录时以及每次打开新的shell时该文件都将被读取，不推荐在里面配置用户专用的环境变量，因为每开一个shell，该文件都会被读取一次，效率肯定受影响。<br>打开文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi ~&#x2F;.bashrc</span></pre></td></tr></table></figure>
<p>添加环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export TEST_USER_ENV&#x3D;&#39;a girl!&#39;</span></pre></td></tr></table></figure>
<p>刷新环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source ~&#x2F;.bashrc</span></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Babel</title>
    <url>/2022/08/03/webpack/webpack04/</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote>
<p>Babel 是一个工具链，主要用于将采用 ECMAScript 2015+ 语法编写的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中。<br>官方文档：<a href="https://www.babeljs.cn/" target="_blank" rel="noopener">https://www.babeljs.cn/</a></p>
</blockquote>
<p><strong>1. babel 可以完成的事情</strong></p>
<ul>
<li>语法转换</li>
<li>通过 Polyfill 方式在目标环境中添加缺失的特性 （通过引入第三方 polyfill 模块，例如 core-js）</li>
</ul>
<p><strong>2. babel 的编译流程</strong><br>&emsp;&ensp;babel 是 source to source 的转换，整体编译流程分为三步：</p>
<ul>
<li>parse：通过 parser 把源码转成抽象语法树（AST）</li>
<li>transform：遍历 AST，调用各种 transform 插件对 AST 进行增删改</li>
<li>generate：把转换后的 AST 打印成目标代码，并生成 sourcemap<img src="/images/2022/babel-01.png">

</li>
</ul>
<p><strong>3. babel 库</strong></p>
<ul>
<li><p>@babel/core</p>
<ul>
<li>babel核心库，包括了整个babel工作流。</li>
</ul>
</li>
<li><p>@babel/parser</p>
<ul>
<li>将源代码解析成 AST ，方便各个插件分析语法进行相应的处理。</li>
</ul>
</li>
<li><p>@babel/generator</p>
<ul>
<li>将修正后的AST解码生成js代码。</li>
</ul>
</li>
<li><p>@babel/preset-env</p>
<ul>
<li>是一个智能预设，可让你使用最新的JavaScript，转化最新语法如箭头函数, class, 扩展运算符，想要转换最新的api还需引入@babel/polyfill</li>
</ul>
</li>
<li><p>@babel/polyfill</p>
<ul>
<li>模拟ES2015+ 环境。在低版本浏览器上实现一些对象、方法，比如 Promise、WeakMap、Array.from、Object.assign、Array.prototype.includes 等。</li>
</ul>
</li>
</ul>
<h3 id="babel代码编译"><a href="#babel代码编译" class="headerlink" title="babel代码编译"></a>babel代码编译</h3><h4 id="使用插件将对应语法转换"><a href="#使用插件将对应语法转换" class="headerlink" title="使用插件将对应语法转换"></a>使用插件将对应语法转换</h4><p><strong>1. 创建项目结构</strong></p>
<ul>
<li>新建<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir babel-test </span></pre></td></tr><tr><td class="code"><pre><span class="line">cd babel-test</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm init -y</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm install webpack webpack-cli --save-dev</span></pre></td></tr></table></figure></li>
<li>新建src/index.js<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const add &#x3D; (x, y) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return x + y</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(add, add(1, 2))</span></pre></td></tr></table></figure></li>
<li>新建webpack.config.js<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const path &#x3D; require(&#39;path&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  entry: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    index: &#39;.&#x2F;src&#x2F;index.js&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  output: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    path: path.resolve(__dirname, &#39;dist&#39;),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    clean: true</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  module: &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>package.json 配置命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;build&quot;: &quot;webpack --config webpack.config.js&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>npm run build<br>输出<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(()&#x3D;&gt;&#123;const o&#x3D;(o,c)&#x3D;&gt;o+c;console.log(o,o(1,2))&#125;)();</span></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>2. 将箭头函数语法转译</strong></p>
<ul>
<li>安装babel<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install @babel&#x2F;core @babel&#x2F;plugin-transform-arrow-functions babel-loader --save-dev</span></pre></td></tr></table></figure></li>
<li>webpack.config.js配置babel-loader<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  rules: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      test: &#x2F;\.jsx?$&#x2F;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      use: [&#39;babel-loader&#39;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>创建babel.config.json 并配置插件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;plugins&quot;: [&quot;@babel&#x2F;plugin-transform-arrow-functions&quot;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>npm run build<br>输出<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(()&#x3D;&gt;&#123;const n&#x3D;function(n,o)&#123;return n+o&#125;;console.log(n,n(1,2))&#125;)();</span></pre></td></tr></table></figure>
完成对箭头函数语法转译</li>
</ul>
<h4 id="使用预设对语法进行转译"><a href="#使用预设对语法进行转译" class="headerlink" title="使用预设对语法进行转译"></a>使用预设对语法进行转译</h4><blockquote>
<p>通过上述方式，引入对应的插件可以对对应的语法进行转译。但是在开发中完全使用这种方式语法转译，就意味着每使用一种新的语法就需要添加一款对应的插件来转译。<br>官方提供@babel/preset-env来将插件自动引入。@babel/preset-env会匹配当前环境，自动添加当前环境中不能识别的语法对应的插件进行转译。</p>
</blockquote>
<ul>
<li><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install @babel&#x2F;preset-env --save-dev</span></pre></td></tr></table></figure></li>
<li><p>babel.config.json 配置预设</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;presets&quot;: [&quot;@babel&#x2F;preset-env&quot;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li><p>配置需要转译的环境<br>可以直接在babel.config.json中配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;presets&quot;: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    [</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;@babel&#x2F;preset-env&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;targets&quot;: &#123; &quot;chrome&quot;: &quot;30&quot; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>npm run build<br>输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(()&#x3D;&gt;&#123;var n&#x3D;function(n,o)&#123;return n+o&#125;;console.log(n,n())&#125;)();</span></pre></td></tr></table></figure>

<p>也可以使用.browserslistrc文件配置，官方推荐<br>项目根目录创建.browserslistrc文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chrome 30</span></pre></td></tr></table></figure>
<p>.browserslistrc默认值是 &gt; 0.5%, last 2 versions, Firefox ESR, not dead<br>npm run build<br>输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">!function()&#123;var n&#x3D;function(n,o)&#123;return n+o&#125;;console.log(n,n())&#125;();</span></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="使用polyfill对低版本浏览器进行ES2015-环境语法兼容"><a href="#使用polyfill对低版本浏览器进行ES2015-环境语法兼容" class="headerlink" title="使用polyfill对低版本浏览器进行ES2015+环境语法兼容"></a>使用polyfill对低版本浏览器进行ES2015+环境语法兼容</h4><blockquote>
<p>当我们开发时，要求兼容的浏览器不满足ES2015+环境中的功能，此时就需要通过引入polyfill来模拟ES2015+环境已经存在的功能。</p>
</blockquote>
<p><strong>1. 全部引入</strong></p>
<ul>
<li>安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install @babel&#x2F;polyfill --save-dev</span></pre></td></tr></table></figure></li>
<li>index.js中引入<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &quot;@babel&#x2F;polyfill&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const add &#x3D; (x, y) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return new Promise((resolve) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    resolve(x + y)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(add, add())</span></pre></td></tr></table></figure></li>
<li>npm run build<br>输出<br>整个polyfill全部打包，文件90k左右。<img src="/images/2022/babel-02.png">

</li>
</ul>
<p><strong>2. 手动按需引入</strong></p>
<ul>
<li>安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install babel-runtime --save-dev</span></pre></td></tr></table></figure></li>
<li>index.js中引入<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Promise from &#39;babel-runtime&#x2F;core-js&#x2F;promise&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const add &#x3D; (x, y) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return new Promise((resolve) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    resolve(x + y)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(add, add())</span></pre></td></tr></table></figure></li>
<li>npm run build<br>输出<br>只打包Promise方法，文件18k左右。<img src="/images/2022/babel-03.png">

</li>
</ul>
<p><strong>3. 使用预设按需引入</strong></p>
<ul>
<li>安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install @babel&#x2F;plugin-transform-runtime core-js@3 --save-dev</span></pre></td></tr></table></figure></li>
<li>babel.config.json配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;presets&quot;: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    [</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;@babel&#x2F;preset-env&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;useBuiltIns&quot;: &quot;usage&quot;, &#x2F;&#x2F; 默认false时只进行语法转译，不对api等处理</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;corejs&quot;: &quot;3&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;plugins&quot;: [&quot;@babel&#x2F;plugin-transform-runtime&quot;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>.browserslistrc 指定环境<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chrome 30</span></pre></td></tr></table></figure>
index.js<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const add &#x3D; (x, y) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return new Promise((resolve) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    resolve(x + y)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(add, add())</span></pre></td></tr></table></figure></li>
<li>npm run build<br>输出<img src="/images/2022/babel-04.png">

</li>
</ul>
<h4 id="总结语法自动转译与polyfill的自动引入"><a href="#总结语法自动转译与polyfill的自动引入" class="headerlink" title="总结语法自动转译与polyfill的自动引入"></a>总结语法自动转译与polyfill的自动引入</h4><ol>
<li><p>方式一</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i @babel&#x2F;core @babel&#x2F;preset-env @babel&#x2F;plugin-transform-runtime core-js@3 babel-loader</span></pre></td></tr></table></figure>
<p>babel.config.json配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;presets&quot;: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    [</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;@babel&#x2F;preset-env&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;useBuiltIns&quot;: &quot;usage&quot;, &#x2F;&#x2F; 默认false时只进行语法转译，不对api等处理</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;corejs&quot;: &quot;3&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;plugins&quot;: [&quot;@babel&#x2F;plugin-transform-runtime&quot;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>.browserslistrc</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">last 1 version</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt; 1%</span></pre></td></tr><tr><td class="code"><pre><span class="line">maintained node versions</span></pre></td></tr><tr><td class="code"><pre><span class="line">not dead</span></pre></td></tr></table></figure>
<hr>
</li>
<li><p>方式二</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i @babel&#x2F;core @babel&#x2F;preset-env @babel&#x2F;plugin-transform-runtime @babel&#x2F;runtime-corejs3 babel-loader</span></pre></td></tr></table></figure>
<p>babel.config.json配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;presets&quot;: [&quot;@babel&#x2F;preset-env&quot;],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;plugins&quot;: [[&quot;@babel&#x2F;plugin-transform-runtime&quot;, &#123; &quot;corejs&quot;: &quot;3&quot; &#125;]]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>.browserslistrc</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">last 1 version</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt; 1%</span></pre></td></tr><tr><td class="code"><pre><span class="line">maintained node versions</span></pre></td></tr><tr><td class="code"><pre><span class="line">not dead</span></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>npm包发布</title>
    <url>/2022/07/04/webpack/webpack03/</url>
    <content><![CDATA[<h3 id="package"><a href="#package" class="headerlink" title="package"></a>package</h3><img src="/images/2022/webpack_library_01.png">

<p>发包时关键配置属性</p>
<ul>
<li>name包名称，发包之后对应包目录文件名称。import时通过该名称找到对应包。</li>
<li>version版本号 </li>
<li>dependencies生产环境依赖。安装包时dependencies中的依赖也会同时被下载安装。</li>
<li>peerDependencies兼容依赖。使用包时，对使用环境要求对应包的兼容。</li>
<li>main指定加载入口文件，在browser和node环境都能使用。</li>
<li>files指定需要发布的文件。</li>
<li>bin指定脚本的加载文件。</li>
</ul>
<h3 id="npm包发布"><a href="#npm包发布" class="headerlink" title="npm包发布"></a>npm包发布</h3><ol>
<li><p>注册账号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm adduser</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm adduser --registry&#x3D;http:&#x2F;&#x2F;example.com</span></pre></td></tr></table></figure>
</li>
<li><p>登录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm login</span></pre></td></tr></table></figure>
</li>
<li><p>登出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm logout</span></pre></td></tr></table></figure>
</li>
<li><p>查看当前登录人</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm who am i</span></pre></td></tr></table></figure>
</li>
<li><p>发布</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm publish</span></pre></td></tr></table></figure>
</li>
<li><p>撤回发布</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm unpublish [pkg]@[version]</span></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>splitChunks</title>
    <url>/2022/08/16/webpack/webpack06/</url>
    <content><![CDATA[<blockquote>
<p>Webpack提供代码提取或分离的插件，基础配置请参照<a href="https://webpack.docschina.org/plugins/split-chunks-plugin/#optimizationsplitchunks" target="_blank" rel="noopener">splitChunks 官方文档</a>。<br>这里主要深入了解关键配置核心属性。</p>
</blockquote>
<h3 id="chunks"><a href="#chunks" class="headerlink" title="chunks"></a>chunks</h3><blockquote>
<p>chunks代码被提取的方式，async initial all。</p>
</blockquote>
<ul>
<li><p>chunks可选项<br>async：只提取异步加载的模块出来打包到一个文件中。<br>initial：提取同步加载和异步加载模块，多入口相同文件分别同步异步加载时会分别打包到不同的文件中。<br>all：不管异步加载还是同步加载的模块都提取出来，打包到一个文件中。</p>
</li>
<li><p>概念静态加载、动态加载、同步加载、异步加载<br>动态加载和静态加载指的是什么时候加载。动态加载是运行时加载，静态加载是编译(预编译)时加载。<br>动态加载：require() 、import()<br>静态加载：import</p>
<p>同步加载和异步加载指的是加载的方式。同步加载会阻塞接下来的流程，异步加载不会。<br>同步加载：import、require()<br>异步加载：import()、 require([‘xxx’],() =&gt;{})</p>
</li>
</ul>
<h5 id="单入口构建"><a href="#单入口构建" class="headerlink" title="单入口构建"></a>单入口构建</h5><ul>
<li><p>构建文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">'moment'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> date = moment().format(<span class="string">'YYYY-MM-DD'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'date'</span>, date)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">'lodash'</span>).then(<span class="function">(<span class="params">lodash</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> res = lodash.default.add(<span class="number">3</span>, <span class="number">4</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(res)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure></li>
<li><p>async<br>输出</p>
<img style="margin-left:0;height:200px" src="/images/2022/split-chunks-01.png">
(index+moment).js <br>
(lodash).js
</li>
<li><p>initial<br>输出</p>
<img style="margin-left:0;height:200px" src="/images/2022/split-chunks-02.png">
(moment).js <br>
(lodash).js <br>
(index).js
</li>
<li><p>all<br>输出</p>
<img style="margin-left:0;height:200px" src="/images/2022/split-chunks-03.png">
(moment).js <br>
(lodash).js <br>
(index).js

</li>
</ul>
<p>单入口情况下 initial 与 all 几乎没有区别。</p>
<hr>

<h5 id="多入口构建"><a href="#多入口构建" class="headerlink" title="多入口构建"></a>多入口构建</h5><ul>
<li><p>构建文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">'moment'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> date = moment().format(<span class="string">'YYYY-MM-DD'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'date'</span>, date)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">'lodash'</span>).then(<span class="function">(<span class="params">lodash</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> res = lodash.default.add(<span class="number">3</span>, <span class="number">4</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(res)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// other.js</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">'moment'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lodash <span class="keyword">from</span> <span class="string">'lodash'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> date = moment().format(<span class="string">'YYYY-MM-DD'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'date'</span>, date)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> res = lodash.add(<span class="number">3</span>, <span class="number">4</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(res)</span></pre></td></tr></table></figure></li>
<li><p>async<br>输出</p>
<img style="margin-left:0;height:200px" src="/images/2022/split-chunks-04.png">
(other+moment+lodash).js <br>
(index+moment).js <br>
(lodash).js
</li>
<li><p>initial<br>输出</p>
<img style="margin-left:0;height:200px" src="/images/2022/split-chunks-05.png">
(moment).js <br>
(lodash).js <br>
(lodash).js <br>
(index).js <br>
(other).js
</li>
<li><p>all<br>输出</p>
<img style="margin-left:0;height:200px" src="/images/2022/split-chunks-06.png">
(moment).js <br>
(lodash).js <br>
(index).js <br>
(other).js

</li>
</ul>
<h3 id="分包规则属性"><a href="#分包规则属性" class="headerlink" title="分包规则属性"></a>分包规则属性</h3><ul>
<li>minSize<br>生成 chunk 的最小体积（以 bytes 为单位）。默认20000，超过才会被提取。</li>
<li>maxSize<br>生成 chunk 的体积大小不能超过maxSize值，如果超过了，要对其进行分割并打包生成新的文件。单位为字节，默认为0，表示不限制大小。</li>
<li>minChunks<br>提取的模块最小被引用次数，引用次数超过或等于minChunks值，才能被提取。</li>
<li>maxInitialRequests<br>打包后的入口文件加载时，还能同时加载js文件的数量（包括入口文件）。</li>
<li>maxAsyncRequests<br>按需加载时的最大并行请求数。</li>
<li>enforceSizeThreshold<br>强制执行拆分的体积阈值和其他限制（minRemainingSize，maxAsyncRequests，maxInitialRequests）将被忽略。</li>
<li>提示<br>优先级 maxInitialRequest/maxAsyncRequests &lt; maxSize &lt; minSize</li>
</ul>
<h3 id="cacheGroups"><a href="#cacheGroups" class="headerlink" title="cacheGroups"></a>cacheGroups</h3><ul>
<li>继承<br>cacheGroups可以继承和/或覆盖来自 splitChunks.* 的任何选项。但是 test、priority 和 reuseExistingChunk 只能在缓存组级别上进行配置。</li>
<li>test<br>用来匹配要提取的模块的资源路径或名称。值是正则或函数。</li>
<li>priority<br>优先级，值越大表示提取模块时优先采用此方案。默认值为0。</li>
<li>reuseExistingChunk<br>为true时，如果当前要提取的模块，在已经在打包生成的js文件中存在，则将复用该模块，而不是把当前要提取的模块打包生成新的js文件。</li>
<li>enforce<br>为true时，忽略minSize，minChunks，maxAsyncRequests和maxInitialRequests外面配置选项。</li>
</ul>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Eslint</title>
    <url>/2022/08/04/webpack/webpack05/</url>
    <content><![CDATA[<blockquote>
<p>Eslint为代码检查的工具<br>官方文档：<a href="https://eslint.bootcss.com/docs/user-guide/getting-started" target="_blank" rel="noopener">https://eslint.bootcss.com/docs/user-guide/getting-started</a></p>
</blockquote>
<h3 id="webpack中使用"><a href="#webpack中使用" class="headerlink" title="webpack中使用"></a>webpack中使用</h3><p><strong>1. 创建项目结构</strong></p>
<ul>
<li>新建<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir eslint-test </span></pre></td></tr><tr><td class="code"><pre><span class="line">cd eslint-test</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm init -y</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm install webpack webpack-cli --save-dev</span></pre></td></tr></table></figure></li>
<li>新建src/index.js<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(&#39;Eslint!&#39;)</span></pre></td></tr></table></figure></li>
<li>新建webpack.config.js<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const path &#x3D; require(&#39;path&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  entry: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    index: &#39;.&#x2F;src&#x2F;index.js&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  output: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    path: path.resolve(__dirname, &#39;dist&#39;),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    clean: true</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  plugins: [],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  mode: &#39;production&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>package.json 配置命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;build&quot;: &quot;webpack --config webpack.config.js&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>npm run build<br>输出<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(&quot;Eslint!&quot;);</span></pre></td></tr></table></figure></li>
</ul>
<p><strong>2. 添加eslint插件</strong></p>
<ul>
<li>安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install eslint-webpack-plugin --save-dev</span></pre></td></tr></table></figure></li>
<li>编辑webpack.config.js<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const ESlintWebpackPlugin &#x3D; require(&#39;eslint-webpack-plugin&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="code"><pre><span class="line">plugins: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">  new ESlintWebpackPlugin(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    context: &#39;src&#39;, &#x2F;&#x2F; 指定eslint检查目录，默认根目录</span></pre></td></tr><tr><td class="code"><pre><span class="line">    exclude: [&#39;node_modules&#39;], &#x2F;&#x2F; 排除context指定目录下哪些文件夹不eslint检查</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">]</span></pre></td></tr></table></figure></li>
<li>创建.eslintrc.js文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  rules: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 1 2 0 &#x3D;&#x3D;&gt; warn error off &#x3D;&#x3D;&gt; 警告 错误 关闭</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;no-console&#39;: &#39;error&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>创建.eslintignore文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;dist</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;node_modules</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;package.json</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;package-lock.json</span></pre></td></tr><tr><td class="code"><pre><span class="line">webpack.config.js</span></pre></td></tr></table></figure>
tips：当vscode项目列表过多，层级较深时，会出现失效情况。<a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" target="_blank" rel="noopener">解决方式参照文档 ➱</a></li>
<li>校验<br>vscode如果装了eslint插件此时，已经可以看到报错信息了。<img src="/images/2022/eslint-01.png">
npm run build
构建失败
<img src="/images/2022/eslint-02.png">

</li>
</ul>
<h3 id="eslintrc-js核心配置项"><a href="#eslintrc-js核心配置项" class="headerlink" title=".eslintrc.js核心配置项"></a>.eslintrc.js核心配置项</h3><blockquote>
<p><strong>rules</strong>具体规则</p>
</blockquote>
<ul>
<li>rules<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rules: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 1 2 0 &#x3D;&#x3D;&gt; warn error off &#x3D;&#x3D;&gt; 警告 错误 关闭</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;no-console&#39;: &#39;error&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
key为规则名，value为具体的配置内容，一般可设置为 1 2 0 或者 warn error off 分别对应 警告 错误 关闭。<br>具体参考：<a href="https://cn.eslint.org/docs/rules/" target="_blank" rel="noopener">https://cn.eslint.org/docs/rules/</a></li>
</ul>
<blockquote>
<p><strong>extends</strong>继承配置<br>继承另一份ESLint配置，有三种继承方式</p>
</blockquote>
<ul>
<li>从eslint本身继承<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  extends: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;eslint:recommended&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>从eslint-config-xxx的npm包继承 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  extends: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; eslint-config-standard 配置的时候可以省略 &#96;eslint-config&#96;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;standard&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>从eslint插件继承<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  extends: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 可以省略包名中的 &#96;eslint-plugin&#96;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 格式一般为: &#96;plugin:$&#123;pluginName&#125;&#x2F;$&#123;configName&#125;&#96;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;plugin:vue&#x2F;essential&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;plugin:@typescript-eslint&#x2F;recommended&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; eslint-plugin-vue 包</span></pre></td></tr><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">  configs: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;base&#39;: require(&#39;.&#x2F;configs&#x2F;base&#39;),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;essential&#39;: require(&#39;.&#x2F;configs&#x2F;essential&#39;),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;no-layout-rules&#39;: require(&#39;.&#x2F;configs&#x2F;no-layout-rules&#39;),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;recommended&#39;: require(&#39;.&#x2F;configs&#x2F;recommended&#39;),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;strongly-recommended&#39;: require(&#39;.&#x2F;configs&#x2F;strongly-recommended&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p><strong>parser</strong>解析器<br>parser是将我们写的代码进行ESTree（本质AST）解析，然后进行校验。默认的 parser，只转换 js，默认支持 ES5 的语法。</p>
</blockquote>
<ul>
<li>parserOptions <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;parserOptions&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;ecmaVersion&quot;: 6, &#x2F;&#x2F; 配置的 ES 语法</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;sourceType&quot;: &quot;module&quot;, &#x2F;&#x2F; 默认为script，如果使用 ES Module 则应设置为module</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;ecmaFeatures&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;jsx&quot;: true</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>@babel/eslint-parser<br>当使用 babel 时，babel 的解析器会把你的 code 转换为 AST，该解析器会将其转换为 ESLint 能懂的 ESTree。</li>
<li>@typescript-eslint<br>@typescript-eslint/parser将 typescript 的 sourcecode 转换为 TypeScript AST，然后将 TypeScript AST 转换为 ESTree。</li>
<li>eslint-plugin-vue<br>vue官方提供vue-eslint-parser</li>
</ul>
<blockquote>
<p><strong>plugins</strong>插件</p>
</blockquote>
<ul>
<li>plugins<br>eslint通过plugins支持自定义规则，比如eslint-plugin-import、eslint-plugin-promise、eslint-plugin-react。</li>
</ul>
<blockquote>
<p><strong>env</strong>是可以配置根据环境不同来判断是否开启</p>
</blockquote>
<ul>
<li>env<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">env: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  browser: &#39;true&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  node: &#39;true&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序自定义组件</title>
    <url>/2022/03/01/applets/applets03/</url>
    <content><![CDATA[<h3 id="组件介绍"><a href="#组件介绍" class="headerlink" title="组件介绍"></a>组件介绍</h3><ul>
<li><p>组件的创建<br>在小程序的编辑器中可以通过文件右击选择<code>新建Component</code>来构建小程序的自定义组件。</p>
</li>
<li><p>组件的结构<br>与页面类似，小程序的自定义也是由四部分组成：.json 配置文件、.wxml 模板文件、.wxss 样式文件、.js 脚本逻辑文件。</p>
</li>
<li><p>组件使用<br>在页面或者组件的.json 配置文件通过 usingComponents 使用</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"usingComponents": &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  "l-rate":"/miniprogram_npm/lin-ui/rate"</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">l-rate</span> <span class="attr">score</span>=<span class="string">"3"</span> <span class="attr">disabled</span>=<span class="string">"&#123;&#123;false&#125;&#125;"</span> <span class="attr">size</span>=<span class="string">"22"</span> /&gt;</span></span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="组件模板"><a href="#组件模板" class="headerlink" title="组件模板"></a>组件模板</h3><ul>
<li><p>插槽slot</p>
<blockquote>
<p>默认情况下，一个组件的 wxml 中只能有一个 slot</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>这是text-list组件<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">test-list</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>这是test page 中的text<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">test-list</span>&gt;</span></span></pre></td></tr></table></figure>
<blockquote>
<p>使用多 slot 时，需要在组件 js 中声明启用</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Component(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  options: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    multipleSlots: <span class="literal">true</span> <span class="comment">// 在组件定义时的选项中启用多slot支持</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>这是text-list组件<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"a"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"b"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">test-list</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">slot</span>=<span class="string">"a"</span>&gt;</span>这是test page 中的text a<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">slot</span>=<span class="string">"b"</span>&gt;</span>这是test page 中的text b<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">test-list</span>&gt;</span></span></pre></td></tr></table></figure></li>
<li><p>组件样式</p>
<blockquote>
<p>页面样式与组件样式关系</p>
</blockquote>
<p>组件对应 wxss 文件的样式，只对组件wxml内的节点生效。<br>组件所在页面的样式以及app.wxss 对<code>自定义组件无效</code>。（在不更改组件样式隔离选项的情况下）<br>组件所在页面的样式以及app.wxss 标签名选择器 会影响组件中标签的样式。例如</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">text</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">font-size</span>: <span class="number">50</span>rpx;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<blockquote>
<p>组件样式隔离</p>
</blockquote>
<p>通过在js中配置styleIsolation可指定特殊的样式隔离选项</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Component(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  options: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    styleIsolation: <span class="string">'isolated'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
<p><code>isolated</code> &nbsp; 默认值，在自定义组件内外，使用 class 指定的样式将<strong>不会相互影响</strong>。<br><code>apply-shared</code> &nbsp; 表示页面 wxss 样式将影响到自定义组件，但自定义组件 wxss 中指定的样式不会影响页面。<br><code>shared</code> &nbsp; 在自定义组件内外，使用 class 指定的样式将<strong>会相互影响</strong>。<br>此外，还有一种写法是 addGlobalClass: true 这种写法和设置styleIsolation：‘apply-shared’ 一样。</p>
<blockquote>
<p>外部样式类</p>
</blockquote>
<p>通过在js中externalClasses 配置样式类，然后在组件内元素的class上添加该样式类，外部组件就可以通过该样式类影响该元素的样式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Component(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  externalClasses: [<span class="string">'my-class'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span>这是text-list组件 的 a<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"b my-class"</span>&gt;</span>这是text-list组件 的 a<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">test-list</span> <span class="attr">my-class</span>=<span class="string">"bg-red"</span>&gt;</span><span class="tag">&lt;/<span class="name">test-list</span>&gt;</span></span></pre></td></tr></table></figure>
<p>.bg-red 的样式就可以影响到 class=”b my-class” 的这个text元素了。<br><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/wxml-wxss.html" target="_blank" rel="noopener">组件模板和样式</a></p>
</li>
</ul>
<h3 id="Component构造器"><a href="#Component构造器" class="headerlink" title="Component构造器"></a>Component构造器</h3><blockquote>
<p>Component 构造器可用于定义组件，调用 Component 构造器时可以指定组件的属性、数据、方法等。</p>
</blockquote>
<ul>
<li>模板结构<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Component(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  options:&#123;&#125;, <span class="comment">// 一些选项的配置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  behaviors: [], <span class="comment">// 类似mixins的代码混合机制</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  properties: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    myProperty: &#123; <span class="comment">// 属性名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      type: <span class="built_in">String</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      value: <span class="string">''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    myProperty2: <span class="built_in">String</span> <span class="comment">// 简化的定义方式</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  data: &#123;&#125;, <span class="comment">// 私有数据，可用于模板渲染</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  lifetimes: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 生命周期函数，可以为函数，或一个在methods段中定义的方法名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    attached: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    moved: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    detached: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 生命周期函数，可以为函数，或一个在methods段中定义的方法名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  attached: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;, <span class="comment">// 此处attached的声明会被lifetimes字段中的声明覆盖</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  ready: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  pageLifetimes: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 组件所在页面的生命周期函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    show: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    hide: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    resize: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  methods: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    onMyButtonTap: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">this</span>.setData(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 更新属性和数据的方法与更新页面数据的方法类似</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 内部方法建议以下划线开头</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    _myPrivateMethod: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// 这里将 data.A[0].B 设为 'myPrivateData'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">this</span>.setData(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">'A[0].B'</span>: <span class="string">'myPrivateData'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    _propertyChange: <span class="function"><span class="keyword">function</span>(<span class="params">newVal, oldVal</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
<code>options</code> &nbsp; 一些选项的配置<br><code>behaviors</code> &nbsp; 类似mixins的代码混合机制<br><code>properties</code> &nbsp; 组件外部传递进入的数据，可用于模板渲染<br><code>data</code> &nbsp; 组件内部私有数据，可用于模板渲染<br><code>methods</code> &nbsp; 组件的方法，包括事件响应函数和任意的自定义方法<br>…<br><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Component.html" target="_blank" rel="noopener">Component文档</a></li>
</ul>
<h3 id="组件通讯"><a href="#组件通讯" class="headerlink" title="组件通讯"></a>组件通讯</h3><ul>
<li>自定义属性向组件内部传入数据<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- test.wxml --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">test-list</span> <span class="attr">test-text</span>=<span class="string">"这是一段测试文本"</span>&gt;</span><span class="tag">&lt;/<span class="name">test-list</span>&gt;</span></span></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test-list 组件的Component构造器中</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">properties: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  testText: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    type: <span class="built_in">String</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    value: <span class="string">''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- test-list component wxml --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;testText&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></pre></td></tr></table></figure></li>
<li>组件内部通过自定义事件<code>triggerEvent</code>方式，向外部暴露事件，进而传递出数据。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- test-list component wxml --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bind:tap</span>=<span class="string">"handleTop"</span>&gt;</span>自定义事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></pre></td></tr></table></figure>
this.triggerEvent(‘自定义事件名称’, 传递出的数据, 触发事件的选项)<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test-list 组件的Component构造器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Component(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  properties: &#123;&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  methods: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    handleTap()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">var</span> myEventDetail = &#123;&#125; <span class="comment">// 传递出的数据 detail对象，可在事件对象event.detail中获取</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">this</span>.triggerEvent(<span class="string">'myevent'</span>, myEventDetail) <span class="comment">// 自定义事件名称 传递出的数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- test page wxml --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">test-list</span> <span class="attr">test-text</span>=<span class="string">"这是一段测试文本"</span> <span class="attr">bind:myevent</span>=<span class="string">"onMyEvent"</span>&gt;</span><span class="tag">&lt;/<span class="name">test-list</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pages/test/test.js</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Page(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onMyEvent(event) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(event.detail)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure></li>
<li>父组件可通过<code>this.selectComponent</code>，获取子组件的实例，进而传递数据。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加选择器 class="test-list" --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">test-list</span> <span class="attr">class</span>=<span class="string">"test-list"</span> <span class="attr">bind:myevent</span>=<span class="string">"onMyEvent"</span>&gt;</span><span class="tag">&lt;/<span class="name">test-list</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pages/test/test.js</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Page(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onMyEvent(event) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 获取test-list组件实例</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> child = <span class="keyword">this</span>.selectComponent(<span class="string">'.test-list'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'child'</span>, child)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/events.html" target="_blank" rel="noopener">组件间通讯与事件</a></li>
</ul>
<h3 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h3><ul>
<li>组件上生命周期lifetimes<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Component(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  lifetimes: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// 组件实例刚刚被创建好时</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    attached: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// 在组件实例进入页面节点树时执行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    detached: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// 在组件实例被从页面节点树移除时执行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// ...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
<code>created</code> &nbsp; 组件实例刚刚被创建好时， created 生命周期被触发。此时，组件数据 this.data 就是在 Component 构造器中定义的数据 data 。 此时还不能调用 setData 。 通常情况下，这个生命周期只应该用于给组件 this 添加一些自定义属性字段。<br><code>attached</code> &nbsp; 在组件完全初始化完毕、进入页面节点树后， attached 生命周期被触发。此时， this.data 已被初始化为组件的当前值。这个生命周期很有用，绝大多数初始化工作可以在这个时机进行。<br><code>detached</code> &nbsp; 在组件离开页面节点树后， detached 生命周期被触发。退出一个页面时，如果组件还在页面节点树中，则 detached 会被触发。<br/>
<br/></li>
<li>组件所在页面的生命周期<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Component(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  pageLifetimes: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    show: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// 页面被展示</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    hide: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// 页面被隐藏</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    resize: <span class="function"><span class="keyword">function</span>(<span class="params">size</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// 页面尺寸变化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/lifetimes.html" target="_blank" rel="noopener">组件生命周期</a></li>
</ul>
<h3 id="数据监听"><a href="#数据监听" class="headerlink" title="数据监听"></a>数据监听</h3><blockquote>
<p>数据监听器可以用于监听和响应任何属性和数据字段的变化。</p>
</blockquote>
<ul>
<li>监听字段<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Component(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  observers: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"value"</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newValue</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">console</span>.log(<span class="string">'newValue'</span>, newValue)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">console</span>.log(newValue === <span class="keyword">this</span>.data.value) <span class="comment">// true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
value在 setData 设置时 触发<br>多个字段触发时用，拼接。例如 ‘numberA, numberB’: function(numberA, numberB) {}<br/>
<br/></li>
<li>通配符 **<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Component(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  observers: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">'obj.**'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">console</span>.log(<span class="string">'obj'</span>, obj)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>
obj对象中的某个字段或者obj被 etData 设置时 触发<br><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/observer.html" target="_blank" rel="noopener">数据监听observers</a></li>
</ul>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Vite Vue3 TS Pinia 项目搭建</title>
    <url>/2022/10/30/configuration/configuration09/</url>
    <content><![CDATA[<h3 id="基本工程创建"><a href="#基本工程创建" class="headerlink" title="基本工程创建"></a>基本工程创建</h3><ol>
<li>使用vite-cli生成一个模板工程<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 手动配置生成模板</span></pre></td></tr><tr><td class="code"><pre><span class="line">pnpm create vite</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 快速生成模板</span></pre></td></tr><tr><td class="code"><pre><span class="line">pnpm create vite project-name --template vue-ts</span></pre></td></tr></table></figure></li>
<li>生成模板工程<img src="/images/2023/vite-project-001.png" style="margin-left:0;width:200px" />


</li>
</ol>
<h3 id="项目环境配置"><a href="#项目环境配置" class="headerlink" title="项目环境配置"></a>项目环境配置</h3><ol>
<li><p>配置env文件<br>修改package.json运行配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &quot;scripts&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;dev&quot;: &quot;vite --mode dev&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;dev:test&quot;: &quot;vite --mode test&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;build&quot;: &quot;vue-tsc &amp;&amp; vite build --mode prod&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;,</span></pre></td></tr></table></figure>
<p>–mode指定对应配置文件<br>例如：–mode dev 对应 .env.dev 配置文件</p>
<p>获取环境配置<br>Vite中通过 import.meta.env 获取环境变量<br><a href="https://cn.vitejs.dev/guide/env-and-mode.html" target="_blank" rel="noopener">Vite 环境变量和模式</a></p>
<img src="/images/2023/vite-project-002.png" style="margin-left:0;width:200px" />

</li>
</ol>
<blockquote>
<p>如果业务环境配置比较复杂，可以通过js手段进行扩展</p>
</blockquote>
<ol start="2">
<li><p>配置环境扩展<br>src下创建 config文件</p>
<img src="/images/2023/vite-project-003.png" style="margin-left:0;width:200px" />

<p>根据环境引入不同配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; IConfig &#125; from &#39;.&#x2F;types&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 根据环境引入不同配置</span></pre></td></tr><tr><td class="code"><pre><span class="line">import commonConfig from &#39;.&#x2F;env&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import devConfig from &#39;.&#x2F;env.dev&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import prodConfig from &#39;.&#x2F;env.prod&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import testConfig from &#39;.&#x2F;env.test&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">const ENV &#x3D; import.meta.env.VITE_APP_ENV</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">let config: IConfig &#x3D; &#123;&#125; as any</span></pre></td></tr><tr><td class="code"><pre><span class="line">switch(ENV) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  case &#39;dev&#39;:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    config &#x3D; Object.assign(commonConfig, devConfig)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  case &#39;prod&#39;:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    config &#x3D; Object.assign(commonConfig, prodConfig)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    break;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  case &#39;test&#39;:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    config &#x3D; Object.assign(commonConfig, testConfig)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    break;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  default:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default config</span></pre></td></tr></table></figure>


</li>
</ol>
<h3 id="基本构建配置"><a href="#基本构建配置" class="headerlink" title="基本构建配置"></a>基本构建配置</h3><ol>
<li>构建配置文档<br><a href="https://cn.vitejs.dev/config/shared-options.html" target="_blank" rel="noopener">https://cn.vitejs.dev/config/shared-options.html</a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import path from &#39;path&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; defineConfig, loadEnv &#125; from &#39;vite&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; createVitePlugins &#125; from &#39;.&#x2F;build&#x2F;vitePlugins&#x2F;index&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">export default defineConfig((&#123; command, mode &#125;) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const dotEnv &#x3D; loadEnv(mode, process.cwd())</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  return &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    base: &#39;&#x2F;&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    resolve: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      alias: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#39;@&#39;: path.resolve(__dirname, &#39;src&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    server: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      https: false,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      port: 5173,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      host: &#39;0.0.0.0&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      proxy: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#39;&#x2F;api&#39;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          target: dotEnv.VITE_PROXY_API_URL,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          changeOrigin: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          rewrite: (path) &#x3D;&gt; path.replace(&#x2F;^\&#x2F;api&#x2F;, &#39;&#39;),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    build: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      rollupOptions: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        output: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          chunkFileNames: &#39;assets&#x2F;js&#x2F;[name]-[hash].js&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          entryFileNames: &#39;assets&#x2F;js&#x2F;[name]-[hash].js&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          assetFileNames: &#39;assets&#x2F;[ext]&#x2F;[name]-[hash].[ext]&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    plugins: createVitePlugins(command),</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="集成插件"><a href="#集成插件" class="headerlink" title="集成插件"></a>集成插件</h3><h4 id="Unocss"><a href="#Unocss" class="headerlink" title="Unocss"></a>Unocss</h4><blockquote>
<p><a href="https://uno.antfu.me/" target="_blank" rel="noopener">https://uno.antfu.me/</a> 通过css属性值查看其属性<br><a href="https://github.com/unocss/unocss#configurations" target="_blank" rel="noopener">https://github.com/unocss/unocss#configurations</a></p>
</blockquote>
<ol>
<li>安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pnpm i unocss -D</span></pre></td></tr></table></figure></li>
<li>根目录下创建unocss.config.ts<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; https:&#x2F;&#x2F;github.com&#x2F;unocss&#x2F;unocss#readme</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; defineConfig, presetUno, presetAttributify, transformerVariantGroup &#125; from &#39;unocss&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default defineConfig(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  presets: [presetUno(), presetAttributify()],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  transformers: [transformerVariantGroup()],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  exclude: [&#96;$&#123;__dirname&#125;&#x2F;node_modules&#x2F;**&#x2F;*&#96;],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  shortcuts: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;wh-full&#39;: &#39;w-full h-full&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;cp-on&#39;: &#39;cursor-pointer outline-none&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;flex-c&#39;: &#39;flex justify-center items-center&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;flex-ac&#39;: &#39;flex justify-around items-center&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;flex-bc&#39;: &#39;flex justify-between items-center&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure></li>
<li>main.ts 中引入uno.css<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;uno.css&#39;</span></pre></td></tr></table></figure></li>
<li>vite.config.ts 中配置 plugins<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Unocss from &#39;unocss&#x2F;vite&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="code"><pre><span class="line">plugins: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Unocss()</span></pre></td></tr><tr><td class="code"><pre><span class="line">]</span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="I18n"><a href="#I18n" class="headerlink" title="I18n"></a>I18n</h4><ol>
<li>安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pnpm i vue-i18n -S</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 实现语言包懒加载</span></pre></td></tr><tr><td class="code"><pre><span class="line">pnpm i @intlify&#x2F;unplugin-vue-i18n -D</span></pre></td></tr></table></figure></li>
<li>vite.config.ts plugins 中配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; resolve &#125; from &#39;path&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import VueI18nPlugin from &#39;@intlify&#x2F;unplugin-vue-i18n&#x2F;vite&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">export const configI18n &#x3D; () &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return VueI18nPlugin(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    runtimeOnly: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    compositionOnly: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    include: [resolve(&#39;src&#x2F;i18n&#x2F;**&#39;)]</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>main.ts 中引入i18n<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import type &#123; App &#125; from &#39;vue&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; createI18n &#125; from &#39;vue-i18n&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import messages from &#39;@intlify&#x2F;unplugin-vue-i18n&#x2F;messages&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">type LangType &#x3D; &#39;zh&#39; | &#39;en&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">const locale: LangType &#x3D; (localStorage.getItem(&#39;lang&#39;) as LangType) ?? &#39;zh&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export const i18n &#x3D; createI18n(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  locale: locale,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  legacy: false,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  messages: messages</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;*</span></pre></td></tr><tr><td class="code"><pre><span class="line">* 文件在js或者ts中使用</span></pre></td></tr><tr><td class="code"><pre><span class="line">* 存在两个问题</span></pre></td></tr><tr><td class="code"><pre><span class="line">* 1. 语言包不会跟随 i18n.global.locale.value 的值变化，使页面中展示语言立即响应切换</span></pre></td></tr><tr><td class="code"><pre><span class="line">* 2. 当语言包文件名重复时，重复的文件获取不到</span></pre></td></tr><tr><td class="code"><pre><span class="line">*&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export const useI18nWithOut &#x3D; (fileName) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const local &#x3D; i18n.global.locale</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const localeMessage &#x3D; i18n.global.getLocaleMessage(fileName)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return (key) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return localeMessage?.[local.value]?.[key]?.source || key</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">export const setLocaleLang &#x3D; (lang: LangType) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  i18n.global.locale.value &#x3D; lang</span></pre></td></tr><tr><td class="code"><pre><span class="line">  localStorage.setItem(&#39;lang&#39;, lang)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  setHtmlLangAttr(lang)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">export const setHtmlLangAttr &#x3D; (lang: LangType) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  let value: string &#x3D; lang</span></pre></td></tr><tr><td class="code"><pre><span class="line">  if (lang &#x3D;&#x3D; &#39;zh&#39;) value &#x3D; &#39;zh-CN&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  document.documentElement.setAttribute(&#39;lang&#39;, value)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">export function setupI18n(app: App) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  app.use(i18n)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  setHtmlLangAttr(locale)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; main.ts</span></pre></td></tr><tr><td class="code"><pre><span class="line">setupI18n(app)</span></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="vue、pinia、vue-router…依赖自动引入"><a href="#vue、pinia、vue-router…依赖自动引入" class="headerlink" title="vue、pinia、vue-router…依赖自动引入"></a>vue、pinia、vue-router…依赖自动引入</h4><ol>
<li><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pnpm i unplugin-auto-import -D</span></pre></td></tr></table></figure>
</li>
<li><p>vite.config.ts 中添加插件配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import AutoImport from &#39;unplugin-auto-import&#x2F;vite&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export const configAutoImportDeps &#x3D; () &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return AutoImport(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dts: &#39;types&#x2F;auto-imports.d.ts&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    imports: [&#39;vue&#39;, &#39;pinia&#39;, &#39;vue-router&#39;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
</li>
<li><p>tsconfig.json</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;include&quot;: [&quot;types&#x2F;*.d.ts&quot;],</span></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="antd组件按需引入"><a href="#antd组件按需引入" class="headerlink" title="antd组件按需引入"></a>antd组件按需引入</h4><ol>
<li><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pnpm i unplugin-vue-components -D</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pnpm i ant-design-vue -S</span></pre></td></tr></table></figure>
</li>
<li><p>vite.config.ts 中添加插件配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Components from &#39;unplugin-vue-components&#x2F;vite&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; AntDesignVueResolver &#125; from &#39;unplugin-vue-components&#x2F;resolvers&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">export const configAutoRegistryComponents &#x3D; () &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return Components(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dirs: [],</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dts: &#39;types&#x2F;components.d.ts&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    resolvers: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">      AntDesignVueResolver(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        importStyle: &#39;less&#39; &#x2F;&#x2F; 如果要修改ant-design主题，一定要开启这个配置项</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
</li>
<li><p>vite.config.ts 中修改css配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">css: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  preprocessorOptions: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    less: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; 注意，这一句是在less对象中，写在外边不起作用</span></pre></td></tr><tr><td class="code"><pre><span class="line">      javascriptEnabled: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; 在这里进行ant-design主题的修改，参考官方配置属性</span></pre></td></tr><tr><td class="code"><pre><span class="line">      modifyVars: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#39;primary-color&#39;: &#39;#1890FF&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
</li>
<li><p>main.ts </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 无需注册，只引入实例类型触发的组件对应样式即可</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#39;ant-design-vue&#x2F;es&#x2F;message&#x2F;style&#x2F;index&#39;</span></pre></td></tr></table></figure>
</li>
<li><p>pnpm补充<br>当使用pnpm安装时会发现组件使用的地方的类型是any。<br>这是因为在自动生成的 components.d.ts 文件中的 declare module ‘@vue/runtime-core’ 声明，在 pnpm 中只能访问项目的顶级依赖，而 @vue/runtime-core 是 vue 模块下的依赖，不是顶级依赖，导致声明语句失效。（yarn 和 npm 的 node_modules 平铺目录结构允许访问所有依赖）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; generated by unplugin-vue-components</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; We suggest you to commit this file into source control</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Read more: https:&#x2F;&#x2F;github.com&#x2F;vuejs&#x2F;core&#x2F;pull&#x2F;3399</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#39;@vue&#x2F;runtime-core&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">export &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">declare module &#39;@vue&#x2F;runtime-core&#39; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  export interface GlobalComponents &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    AButton: typeof import(&#39;ant-design-vue&#x2F;es&#39;)[&#39;Button&#39;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    AConfigProvider: typeof import(&#39;ant-design-vue&#x2F;es&#39;)[&#39;ConfigProvider&#39;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    AModal: typeof import(&#39;ant-design-vue&#x2F;es&#39;)[&#39;Modal&#39;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    RouterLink: typeof import(&#39;vue-router&#39;)[&#39;RouterLink&#39;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    RouterView: typeof import(&#39;vue-router&#39;)[&#39;RouterView&#39;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>在这时可以通过目录的根目录中创建或编辑.npmrc文件，并在其中添加以下行：public-hoist-pattern[]=@vue/runtime-core，然后执行pnpm i 对@vue/runtime-core依赖提升，最后重启vscode配置生效。</p>
</li>
</ol>
<h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><ol>
<li><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pnpm i vue-router -S</span></pre></td></tr></table></figure>
</li>
<li><p>main.ts注册<br>创建router实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; createRouter, createWebHistory &#125; from &#39;vue-router&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const router &#x3D; createRouter(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  history: createWebHistory(),</span></pre></td></tr><tr><td class="code"><pre><span class="line">  routes,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  scrollBehavior: () &#x3D;&gt; (&#123; left: 0, top: 0 &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default router</span></pre></td></tr></table></figure>
<p>main.ts主注册</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import router from &#39;.&#x2F;router&#x2F;index&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="code"><pre><span class="line">app.use(router)</span></pre></td></tr></table></figure>
</li>
<li><p>动态引入<br>当项目非常庞大的时候routes会这个文件会非常庞大，多人协作时，也会引起冲突。为了解决这个问题，可以使用vite中import.meta.glob这个api，将路由文件模块化。同时又满足多个layout的功能。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; RouteRecordRaw &#125; from &#39;vue-router&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">const baseRouter: RouteRecordRaw[] &#x3D; [</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    path: &#39;&#x2F;&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    component: () &#x3D;&gt; import(&#39;..&#x2F;layout&#x2F;HomeLayout.vue&#39;),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    redirect: &#39;&#x2F;home&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    meta: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      layout: &#39;HomeLayout&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    children: []</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    path: &#39;&#x2F;&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    component: () &#x3D;&gt; import(&#39;..&#x2F;layout&#x2F;TestLayout.vue&#39;),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    meta: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      layout: &#39;TestLayout&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    children: []</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    path: &#39;&#x2F;login&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    name: &#39;login&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    component: () &#x3D;&gt; import(&#39;&#x2F;@&#x2F;views&#x2F;login&#x2F;index.vue&#39;),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    meta: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      title: &#39;登录&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    path: &#39;&#x2F;:w+&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    name: &#39;404&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    component: () &#x3D;&gt; import(&#39;&#x2F;@&#x2F;views&#x2F;error&#x2F;404.vue&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">]</span></pre></td></tr><tr><td class="code"><pre><span class="line">export const LayoutTypes &#x3D; baseRouter.map((route) &#x3D;&gt; route?.meta?.layout).filter((item) &#x3D;&gt; item)</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default baseRouter</span></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import baseRouter, &#123; LayoutTypes &#125; from &#39;.&#x2F;base&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">const modules &#x3D; import.meta.glob(&#39;.&#x2F;views&#x2F;**&#x2F;*.ts&#39;, &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  eager: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  import: &#39;default&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">const getRoutes &#x3D; (modules, baseRouter) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const modulesRoutes: ModulesRoutesType &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    otherRouter: []</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 加入到路由集合中</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Object.keys(modules).forEach((key) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    const mod &#x3D; modules[key] || &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    const modList &#x3D; Array.isArray(mod) ? [...mod] : [mod]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    for (let i &#x3D; 0; i &lt; modList.length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      const route &#x3D; modList[i]</span></pre></td></tr><tr><td class="code"><pre><span class="line">      const layout &#x3D; route?.meta?.layout</span></pre></td></tr><tr><td class="code"><pre><span class="line">      if (LayoutTypes.includes(layout)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (!modulesRoutes[layout]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          modulesRoutes[layout] &#x3D; []</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        modulesRoutes[layout].push(route)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125; else if (!layout) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        modulesRoutes[&#39;otherRouter&#39;].push(route)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 对应layout添加路由</span></pre></td></tr><tr><td class="code"><pre><span class="line">  for (let i &#x3D; 0; i &lt; baseRouter.length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    const baseRoute &#x3D; baseRouter[i]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    const layout &#x3D; baseRoute?.meta?.layout as string</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (layout &amp;&amp; modulesRoutes[layout] &amp;&amp; LayoutTypes.includes(layout)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      baseRoute.children.push(...modulesRoutes[layout])</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  return [...modulesRoutes[&#39;otherRouter&#39;], ...baseRouter]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">const routes &#x3D; getRoutes(modules, baseRouter)</span></pre></td></tr></table></figure>


</li>
</ol>
<ol start="4">
<li>路由鉴权<br>对路由权限进行管理，一般我们进入页面时要对用户是否登录、是否存在路由权限等 进行校验。由于这些操作存在先后时机问题，比如登录完成之后才能获取到用户信息，用户信息拿到后才能权限校验，如果将这些逻辑都写入beforeEach中代码将会不好管理。这里引入中间件概念进行管理。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import callMiddleware from &#39;.&#x2F;auths&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="code"><pre><span class="line">const beforeEach: MiddlewareFn &#x3D; (to, from, next) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  callMiddleware(to, from, (...args: any[]) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next(...args)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">router.beforeEach(beforeEach)</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; auths.ts</span></pre></td></tr><tr><td class="code"><pre><span class="line">import routeAuthMiddleware from &#39;.&#x2F;routeAuthMiddleware&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; MiddlewareFn &#125; from &#39;..&#x2F;types&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">const middlewares &#x3D; [routeAuthMiddleware]</span></pre></td></tr><tr><td class="code"><pre><span class="line">const callMiddleware: MiddlewareFn &#x3D; (to, from, next) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const stack &#x3D; [...middlewares]</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const _next &#x3D; (...args: any[]) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (args.length &gt; 0 || stack.length &#x3D;&#x3D;&#x3D; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      return next(...args)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    const middleware &#x3D; stack.shift() as MiddlewareFn</span></pre></td></tr><tr><td class="code"><pre><span class="line">    middleware(to, from, _next)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  _next()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">export default callMiddleware</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; RouteLocationNormalized &#125; from &#39;vue-router&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default async (to: RouteLocationNormalized, _from, next: any) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  if (to.path &#x3D;&#x3D;&#x3D; &#39;&#x2F;home&#39;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return next(&#123; path: &#39;&#x2F;404&#39; &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  next()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<img src="/images/2023/vite-project-004.png" style="margin-left:0;" />


</li>
</ol>
<h3 id="Pinia"><a href="#Pinia" class="headerlink" title="Pinia"></a>Pinia</h3><ol>
<li><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pnpm i pinia -S</span></pre></td></tr></table></figure>
</li>
<li><p>main.ts 文件中注册</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import type &#123; App &#125; from &#39;vue&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; createPinia &#125; from &#39;pinia&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const store &#x3D; createPinia()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">export function setupStore(app: App&lt;Element&gt;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  app.use(store)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">export &#123; store &#125;</span></pre></td></tr></table></figure>
<p>main.ts</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setupStore(app)</span></pre></td></tr></table></figure>
</li>
<li><p>创建store</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; defineStore &#125; from &#39;pinia&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; store &#125; from &#39;&#x2F;@&#x2F;store&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">export const useUserStore &#x3D; defineStore(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  id: &#39;app-user&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  state: () &#x3D;&gt; (&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    userInfo: &#123;&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    menus: []</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;),</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  getters: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    getUserInfo() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      return this.userInfo</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    getToken(): string &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      return this.userInfo?.token</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  actions: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    setUserInfo(data) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      this.userInfo &#x3D; data</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    async getUserInfoAction() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      setTimeout(() &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.setUserInfo(&#123; token: &#39;hello world&#39; &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;, 2000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">export const useUserStoreWithOut &#x3D; () &#x3D;&gt; useUserStore(store)</span></pre></td></tr></table></figure>
<p>setup 中使用useUserStore，ts 中使用useUserStoreWithOut</p>
</li>
</ol>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>eslint+prettier+stylelint项目风格配置</title>
    <url>/2023/03/23/configuration/configuration10/</url>
    <content><![CDATA[<h3 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h3><ol>
<li><p>eslint是什么<br>ESLint 是一个可配置的 JavaScript 检查器。它可以帮助你发现并修复 JavaScript 代码中的问题。问题可以指潜在的运行时漏洞、未使用最佳实践、风格问题等。<br>通过定义一组规则来工作，这些规则描述了代码中的期望行为和约定。开发人员可以根据自己的需求配置这些规则，以便在编码过程中得到及时的反馈和建议。ESLint支持大量的规则，并且可以根据项目的特定需求进行定制。<br><a href="https://zh-hans.eslint.org/" target="_blank" rel="noopener">文档地址</a></p>
</li>
<li><p>eslint工作机制</p>
<img src="/images/2023/project-standard-001.png" />
代码解析：ESLint首先会将JavaScript代码解析成抽象语法树（Abstract Syntax Tree，AST）。AST是一种将代码转换为树状结构的表示形式，可以更方便地进行代码分析和操作。<br/>
规则匹配：一旦代码被解析成AST，ESLint会根据配置的规则集进行规则匹配。每个规则都描述了代码中的某种问题或期望行为。<br/>
规则执行：当规则与代码匹配时，ESLint会执行规则所定义的逻辑。这可能包括发出警告、错误或建议，或者对代码进行自动修复。<br/>
</li>
<li><p>eslint使用及相关工具介绍</p>
</li>
</ol>
<ul>
<li><p>初始化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pnpm i eslint -D</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npx eslint --init</span></pre></td></tr></table></figure>
<img src="/images/2023/project-standard-002.png" />
通过可以看到eslint帮我们安装了一些包

<p><code>eslint-plugin-vue</code>：eslint-plugin-vue 是 eslint 的插件，用于提供针对 Vue.js 代码的特定规则和检查。它能够检查和规范 Vue 单文件组件中的 HTML 模板、JavaScript 和样式部分的代码。</p>
<p><code>@typescript-eslint/parser</code>：@typescript-eslint/parser 是一个用于解析 TypeScript 代码的 ESLint 解析器。它可以将 TypeScript 代码转换为抽象语法树（AST），以便进行后续的静态代码分析和检查。</p>
<p><code>@typescript-eslint/eslint-plugin</code>：@typescript-eslint/eslint-plugin 是一个为 TypeScript 代码提供规则和检查的 ESLint 插件。它扩展了 ESLint 的功能，使其能够处理 TypeScript 特有的语法和类型系统，并提供相关的规则来确保代码的正确性和一致性。</p>
</li>
<li><p>配置格式化规则</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; .eslintrc.js</span></pre></td></tr><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;env&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;browser&quot;: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;es2021&quot;: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;node&quot;: true</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;extends&quot;: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;eslint:recommended&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;plugin:@typescript-eslint&#x2F;recommended&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;plugin:vue&#x2F;vue3-essential&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;parserOptions&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;ecmaVersion&quot;: &quot;latest&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;parser&quot;: &quot;@typescript-eslint&#x2F;parser&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;sourceType&quot;: &quot;module&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;ecmaFeatures&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            jsx: true, &#x2F;&#x2F; 启用 JSX 语法支持</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;plugins&quot;: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;@typescript-eslint&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;vue&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;rules&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; &quot;quotes&quot;: [&quot;error&quot;, &quot;single&quot;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p><code>env</code> 指定当前代码语法的环境。<br><code>extends</code> 集成其他eslint的配置。<br><code>parserOptions</code> 解析器的配置项。<br><code>global</code> 配置全局变量。<br><code>plugins</code> 扩展插件。<br><code>rules</code> 校验规则配置。</p>
<p>插件包名简写：<br>配置extends时可以省略包名的 eslint-config-前缀。如 airbnb 会被解析为 eslint-config-airbnb。<br>配置plugins时可以省略包名中的 eslint-plugin- 前缀。extends 属性值由以下内容组成：<br>plugin:<br>包名（可以省略其前缀，如 react 是 eslint-plugin-react 的缩写）<br>/<br>配置名称（如 recommended）<br>…<br>示例：<code>plugin:@typescript-eslint/recommended</code></p>
<p>rules配置：<br>“off” 或 0：表示禁用规则。<br>“warn” 或 1：表示将规则视为警告。<br>“error” 或 2：表示将规则视为错误。<br>另外，规则的值还可以是一个数组，其中第一个元素是错误级别，后面的元素是配置规则的选项。<br>比如：semi: [‘error’, ‘always’]</p>
</li>
<li><p>.eslintignore</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node_modules&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">dist&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">index.html</span></pre></td></tr></table></figure></li>
<li><p>配置eslint脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;lint:eslint&quot;: &quot;eslint --fix --ext .js,.ts,.tsx,.vue .&#x2F;src&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p><a href="https://zh-hans.eslint.org/docs/latest/use/command-line-interface" target="_blank" rel="noopener">命令行配置</a></p>
</li>
</ul>
<h3 id="prettier"><a href="#prettier" class="headerlink" title="prettier"></a>prettier</h3><ol>
<li><p>prettier是什么<br>Prettier 是一个代码格式化工具，用于自动格式化代码，使代码保持一致的风格和布局。它支持多种编程语言，并且具有可配置的规则和选项，可以自动调整代码的缩进、空格、换行等。<br><a href="https://www.prettier.cn/" target="_blank" rel="noopener">文档地址</a></p>
</li>
<li><p>prettier使用及相关工具介绍</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pnpm i prettier -D</span></pre></td></tr><tr><td class="code"><pre><span class="line">pnpm i eslint-config-prettier -D</span></pre></td></tr><tr><td class="code"><pre><span class="line">pnpm i eslint-plugin-prettier -D</span></pre></td></tr></table></figure>
<p><code>eslint-config-prettier</code>：eslint-config-prettier 是一个 ESLint 配置规则，用于解决 ESLint 和 Prettier 之间的规则冲突。由于 ESLint 和 Prettier 可能存在一些相互冲突的规则，使用 eslint-config-prettier 可以禁用 ESLint 中与 Prettier 冲突的规则，以确保代码格式化的一致性。</p>
<p><code>eslint-plugin-prettier</code>：eslint-plugin-prettier 是一个 ESLint 插件，用于将 Prettier 的格式化功能集成到 ESLint 中。它会在 ESLint 的规则检查过程中，对不符合 Prettier 格式化规则的代码进行标记和报告，并可以通过 –fix 选项自动修复一些格式化问题。eslint-plugin-prettier 可以与 eslint-config-prettier 一起使用，以确保代码格式化的一致性和准确性。<br>&nbsp;<br>.eslintrc.js扩展</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extends: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ...,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;prettier&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;plugin:prettier&#x2F;recommended&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> ]</span></pre></td></tr></table></figure>
</li>
<li><p>prettier与eslint如何工作</p>
<img src="/images/2023/project-standard-003.png" />
</li>
<li><p>配置文件格式化规则</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; .prettierrc.js</span></pre></td></tr><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 一行最多 100 字符</span></pre></td></tr><tr><td class="code"><pre><span class="line">  printWidth: 100,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 使用 2 个空格缩进</span></pre></td></tr><tr><td class="code"><pre><span class="line">  tabWidth: 2,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 不使用 tab 缩进，而使用空格</span></pre></td></tr><tr><td class="code"><pre><span class="line">  useTabs: false,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 行尾需要有分号</span></pre></td></tr><tr><td class="code"><pre><span class="line">  semi: false,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 使用单引号代替双引号</span></pre></td></tr><tr><td class="code"><pre><span class="line">  singleQuote: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 对象的 key 仅在必要时用引号</span></pre></td></tr><tr><td class="code"><pre><span class="line">  quoteProps: &#39;as-needed&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; jsx 不使用单引号，而使用双引号</span></pre></td></tr><tr><td class="code"><pre><span class="line">  jsxSingleQuote: false,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 末尾不使用逗号</span></pre></td></tr><tr><td class="code"><pre><span class="line">  trailingComma: &#39;none&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 大括号内的首尾需要空格 &#123; foo: bar &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  bracketSpacing: true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; jsx 标签的反尖括号需要换行</span></pre></td></tr><tr><td class="code"><pre><span class="line">  jsxBracketSameLine: false,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 箭头函数，只有一个参数的时候，也需要括号</span></pre></td></tr><tr><td class="code"><pre><span class="line">  arrowParens: &#39;always&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 每个文件格式化的范围是文件的全部内容</span></pre></td></tr><tr><td class="code"><pre><span class="line">  rangeStart: 0,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  rangeEnd: Infinity,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 不需要写文件开头的 @prettier</span></pre></td></tr><tr><td class="code"><pre><span class="line">  requirePragma: false,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 不需要自动在文件开头插入 @prettier</span></pre></td></tr><tr><td class="code"><pre><span class="line">  insertPragma: false,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 使用默认的折行标准</span></pre></td></tr><tr><td class="code"><pre><span class="line">  proseWrap: &#39;preserve&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 根据显示样式决定 html 要不要折行</span></pre></td></tr><tr><td class="code"><pre><span class="line">  htmlWhitespaceSensitivity: &#39;css&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 换行符使用 lf</span></pre></td></tr><tr><td class="code"><pre><span class="line">  endOfLine: &#39;auto&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p><a href="https://www.prettier.cn/playground/" target="_blank" rel="noopener">在线规则配置</a></p>
</li>
<li><p>.prettierignore</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;dist&#x2F;*</span></pre></td></tr><tr><td class="code"><pre><span class="line">.local</span></pre></td></tr><tr><td class="code"><pre><span class="line">.output.js</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;node_modules&#x2F;**</span></pre></td></tr></table></figure></li>
<li><p>配置prettier脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;lint:prettier&quot;: &quot;prettier --write  \&quot;src&#x2F;**&#x2F;*.&#123;js,json,ts,tsx,css,less,vue,html,md&#125;\&quot;&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p><a href="https://www.prettier.cn/docs/cli.html" target="_blank" rel="noopener">命令行文档</a></p>
</li>
</ol>
<h3 id="stylelint"><a href="#stylelint" class="headerlink" title="stylelint"></a>stylelint</h3><ol>
<li><p>stylelint是什么<br>Stylelint 是一个用于检查和规范 CSS（默认） 和预处理器（如 LESS 和 SCSS）代码的工具。它可以帮助开发者遵循一致的编码规范，并发现潜在的问题和错误。<br><a href="https://stylelint.bootcss.com/" target="_blank" rel="noopener">文档地址</a></p>
</li>
<li><p>stylelint使用及相关工具介绍</p>
</li>
</ol>
<ul>
<li><p>stylelint配置<br>基础（对css文件中的样式进行校验）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pnpm i stylelint -D</span></pre></td></tr><tr><td class="code"><pre><span class="line">pnpm i stylelint-config-standard -D</span></pre></td></tr><tr><td class="code"><pre><span class="line">pnpm i stylelint-config-prettier -D</span></pre></td></tr></table></figure>
<p><code>stylelint-config-standard</code>：stylelint-config-standard 是一个 Stylelint 的标准配置规则集，适用于标准的 CSS 代码。它包含了一组常见的规范和推荐规则，帮助开发者维护一致的 CSS 代码风格和质量。</p>
<p><code>stylelint-config-prettier</code>：stylelint-config-prettier 是一个 Stylelint 配置规则，用于禁用 Stylelint 中与 Prettier 冲突的规则。它可以确保 Stylelint 和 Prettier 之间的规则一致性，避免冲突和重复的检查。<br>&nbsp;<br>扩展less，对less文件校验</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pnpm i stylelint-less -D</span></pre></td></tr><tr><td class="code"><pre><span class="line">pnpm i postcss-less -D</span></pre></td></tr><tr><td class="code"><pre><span class="line">pnpm i stylelint-config-recommended-less -D</span></pre></td></tr></table></figure>
<p><code>stylelint-less</code>：stylelint-less 是一个 Stylelint 的插件，用于提供针对 LESS 代码的特定规则和检查。它可以检查和规范 LESS 文件中的样式代码，帮助开发者维护一致的 LESS 代码风格和质量。</p>
<p><code>postcss-less</code>：postcss-less用途是将PostCSS转换直接应用于LESS源。</p>
<p><code>stylelint-config-recommended-less</code>：stylelint-config-recommended-less 是一个 Stylelint 的推荐配置规则集，适用于 LESS 预处理器。它包含了一组针对 LESS 代码的推荐规则，帮助开发者规范化 LESS 代码的书写风格。<br>&nbsp;<br>扩展html|vue文件校验</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pnpm i postcss-html -D</span></pre></td></tr><tr><td class="code"><pre><span class="line">pnpm i stylelint-config-standard-vue -D</span></pre></td></tr></table></figure>
<p><code>postcss-html</code>：postcss-html 是一个 PostCSS 插件，用于解析 HTML 中的样式块（内联样式）。它可以解析 HTML 文件中 &lt;style&gt; 标签内的样式，并将其转换为 CSS 代码，以便进行后续的样式处理和分析。</p>
<p><code>stylelint-config-standard-vue</code>：stylelint-config-standard-vue 是一个 Stylelint 的标准配置规则集，专门针对 Vue 单文件组件中的样式部分。它在 stylelint-config-standard 的基础上增加了一些针对 Vue 组件样式的规则，以确保 Vue 组件的样式一致性和质量。<br>&nbsp;<br>顺序插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pnpm i stylelint-order -D</span></pre></td></tr></table></figure>
<p><code>stylelint-order</code>：stylelint-order 是一个 Stylelint 的插件，用于定义和检查 CSS 属性的顺序。它可以帮助开发者规范 CSS 属性的排列顺序，以提高代码的可读性和维护性</p>
</li>
</ul>
<ol start="2">
<li><p>.stylelintrc.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 可以扩展现有配置（无论是自己的配置还是第三方配置</span></pre></td></tr><tr><td class="code"><pre><span class="line">  extends: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;stylelint-config-standard&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;stylelint-config-prettier&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;stylelint-config-recommended-less&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;stylelint-config-standard-vue&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 插件是社区构建的规则或规则集，支持方法，工具集，非标准 CSS功能或非常特定的用例</span></pre></td></tr><tr><td class="code"><pre><span class="line">  plugins: [&#39;stylelint-order&#39;],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  overrides: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      files: [&#39;**&#x2F;*.less&#39;],</span></pre></td></tr><tr><td class="code"><pre><span class="line">      customSyntax: &#39;postcss-less&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      files: [&#39;**&#x2F;*.(html|vue)&#39;],</span></pre></td></tr><tr><td class="code"><pre><span class="line">      customSyntax: &#39;postcss-html&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 忽略特定文件，node_modules 是默认情况下忽略的目录</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ignoreFiles: [&#39;**&#x2F;*.js&#39;, &#39;**&#x2F;*.jsx&#39;, &#39;**&#x2F;*.tsx&#39;, &#39;**&#x2F;*.ts&#39;, &#39;**&#x2F;*.json&#39;, &#39;**&#x2F;*.md&#39;, &#39;**&#x2F;*.yaml&#39;],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 默认情况下未打开任何规则，也没有默认值。必须明确配置每个规则才能将其打开</span></pre></td></tr><tr><td class="code"><pre><span class="line">  rules: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    indentation: 2,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;number-leading-zero&#39;: &#39;always&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;no-descending-specificity&#39;: null,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;function-url-quotes&#39;: &#39;always&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;string-quotes&#39;: &#39;single&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;unit-case&#39;: null,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;color-hex-case&#39;: &#39;lower&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;color-hex-length&#39;: &#39;long&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;rule-empty-line-before&#39;: &#39;never&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;font-family-no-missing-generic-family-keyword&#39;: null,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;selector-type-no-unknown&#39;: null,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;block-opening-brace-space-before&#39;: &#39;always&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;at-rule-no-unknown&#39;: null,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;no-duplicate-selectors&#39;: null,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;property-no-unknown&#39;: null,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;no-empty-source&#39;: null,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;selector-class-pattern&#39;: null,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;keyframes-name-pattern&#39;: null,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;selector-pseudo-class-no-unknown&#39;: [true, &#123; ignorePseudoClasses: [&#39;global&#39;, &#39;deep&#39;] &#125;],</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;no-descending-specificity&#39;: null,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;selector-pseudo-element-no-unknown&#39;: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">      true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ignorePseudoElements: [&#39;v-deep&#39;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;selector-pseudo-class-no-unknown&#39;: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">      true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ignorePseudoClasses: [&#39;deep&#39;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 指定声明块内属性的字母顺序</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;order&#x2F;properties-order&#39;: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#39;position&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#39;top&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#39;left&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#39;right&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#39;bottom&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p><code>extends</code> 扩展stylelint的规则配置。<br><code>plugins</code> 指定要在 Stylelint 中使用的插件,支持方法，工具集，非标准 CSS功能或非常特定的用例。<br><code>overrides</code> 规则覆盖主要用户配置 Stylelint 在不同文件或文件类型上应用不同的规则集或配置。<br><code>ignoreFiles</code> 忽略特定文件，node_modules 是默认情况下忽略的目录。<br><code>rules</code> 配置stylelint的规则。</p>
<p>rules配置：<br>规则配置可以是一个简单的布尔值，表示启用或禁用规则，也可以是一个数组，其中包含额外的配置选项。<br>规则配置也可以是对象的规则项，具体配置参照官网。<a href="https://stylelint.bootcss.com/user-guide/rules.html" target="_blank" rel="noopener">https://stylelint.bootcss.com/user-guide/rules.html</a></p>
</li>
<li><p>配置stylelint脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;lint:style&quot;: &quot;stylelint \&quot;.&#x2F;**&#x2F;*.&#123;css,less,vue,html&#125;\&quot; --fix --aei&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p><a href="https://stylelint.bootcss.com/user-guide/usage/cli.html" target="_blank" rel="noopener">命令行文档</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>单页应用接入业务方案</title>
    <url>/2023/10/24/configuration/configuration12/</url>
    <content><![CDATA[<p>前端单页应用的框架基本搭建完成，要对接业务时，需要对<code>登录鉴权</code>、<code>数据请求</code>这个两个模块进行配置，已确保业务系统的正常接入。</p>
<h3 id="登录鉴权"><a href="#登录鉴权" class="headerlink" title="登录鉴权"></a>登录鉴权</h3><p>登录鉴权一般按照以下流程对 用户是否登录、用户的基本信息是否存在、用户是否拥有当前页面权限 当都满足条件时，才允许访问当前页面。<br><img src="/images/2023/plan-design-001.png" style="width:380px;" /><br><strong>以vue3项目举例:</strong><br>应为必须满足某些条件（页面拥有用户信息、当前用户有该页面的权限），用户才能进入页面，所以处理的<code>登录鉴权</code>的场景在全局路由守卫的<code>beforeEach</code>中处理最为合适。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">'vue-router'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> beforeAuth <span class="keyword">from</span> <span class="string">'./auths'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">'./routes'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  history: createWebHistory(<span class="keyword">import</span>.meta.env.BASE_URL),</span></pre></td></tr><tr><td class="code"><pre><span class="line">  routes: routes</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">router.beforeEach(beforeAuth)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span></pre></td></tr></table></figure>
<p>&nbsp;<br>为了处理这一系列任务，一般会用中间件的方式对每个场景单独处理，以降低代码的耦合度。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; RouteLocationNormalized &#125; <span class="keyword">from</span> <span class="string">'vue-router'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> loginAuthMiddleware <span class="keyword">from</span> <span class="string">'./loginAuthMiddleware'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> initDataMiddleware <span class="keyword">from</span> <span class="string">'./initDataMiddleware'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> routeAuthMiddleware <span class="keyword">from</span> <span class="string">'./routeAuthMiddleware'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> MiddlewareFn = <span class="function">(<span class="params">to: RouteLocationNormalized, <span class="keyword">from</span>: RouteLocationNormalized, next: (<span class="params">...args: <span class="built_in">any</span>[]</span>) =&gt; <span class="built_in">void</span></span>) =&gt;</span> <span class="built_in">void</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> middlewares = [loginAuthMiddleware, initDataMiddleware, routeAuthMiddleware]</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> callMiddleware: MiddlewareFn = <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> stack = [...middlewares]</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> _next = <span class="function">(<span class="params">...args: <span class="built_in">any</span>[]</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (args.length &gt; <span class="number">0</span> || stack.length === <span class="number">0</span>) <span class="keyword">return</span> next(...args)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> middleware = stack.shift() <span class="keyword">as</span> MiddlewareFn</span></pre></td></tr><tr><td class="code"><pre><span class="line">    middleware(to, <span class="keyword">from</span>, _next)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  _next()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> beforeAuth: MiddlewareFn = <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  callMiddleware(to, <span class="keyword">from</span>, <span class="function">(<span class="params">...args: <span class="built_in">any</span>[]</span>) =&gt;</span> &#123; next(...args) &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> beforeAuth</span></pre></td></tr></table></figure>
<p>&nbsp;<br>登录鉴权中间件</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; RouteLocationNormalized &#125; <span class="keyword">from</span> <span class="string">'vue-router'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useUserStoreWithOut &#125; <span class="keyword">from</span> <span class="string">'/@/store/modules/user'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">'/@/utils/token'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> (to: RouteLocationNormalized, _from: <span class="built_in">any</span>, next: <span class="built_in">any</span>) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> &#123; ticket &#125; = to.query</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> userStore = useUserStoreWithOut()</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> token = getToken()</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (ticket &amp;&amp; !token) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">await</span> userStore.getUserByTicket(ticket.toString())</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (!token &amp;&amp; !ticket) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    userStore.login()</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  next()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>&nbsp;<br>数据鉴权中间件</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; RouteLocationNormalized &#125; <span class="keyword">from</span> <span class="string">'vue-router'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useUserStoreWithOut &#125; <span class="keyword">from</span> <span class="string">'/@/store/modules/user'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> (to: RouteLocationNormalized, _from: <span class="built_in">any</span>, next: <span class="built_in">any</span>) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> userStore = useUserStoreWithOut()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> reqList = []</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 校验store里的userInfo 是否存在</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> userInfoToken = userStore.token</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (!userInfoToken) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    reqList.push(userStore.getUserByToken)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 校验store里的meuns 是否存在</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> menus = userStore.menus</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (!menus) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    reqList.push(userStore.getMenus)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (reqList?.length) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">await</span> <span class="built_in">Promise</span>.all(reqList.map(<span class="function"><span class="params">fn</span> =&gt;</span> fn()))</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  next()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>&nbsp;<br>路由鉴权中间件</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; RouteLocationNormalized &#125; <span class="keyword">from</span> <span class="string">'vue-router'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useUserStoreWithOut &#125; <span class="keyword">from</span> <span class="string">'/@/store/modules/user'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (to: RouteLocationNormalized, _from: <span class="built_in">any</span>, next: <span class="built_in">any</span>) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> permissions = (to.meta?.permissions <span class="keyword">as</span> <span class="built_in">string</span>[]) || []</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 配置权限校验</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (permissions.length) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> userStore = useUserStoreWithOut()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> codes = userStore.pagePermissionCodes || []</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> hasPermission = codes.some(<span class="function"><span class="params">role</span> =&gt;</span> permissions.includes(role))</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (hasPermission) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      next()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      next(&#123; path: <span class="string">'/404'</span> &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 无配置，直接放行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    next()</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p><strong>经过中间件处理，如果用户能正常进入页面，那么进入页面时，cookie中必定存在token，paina中必定存在用户的基本信息。</strong></p>
<h3 id="数据请求"><a href="#数据请求" class="headerlink" title="数据请求"></a>数据请求</h3><p>数据请求即对axios封装，对axios赋能，其中不仅仅包含请求异常处理，还包含是否重复请求，配置获取数据等等。<br><img src="/images/2023/plan-design-002.png" style="width:670px;" /><br>请求封装</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Axios, &#123; AxiosInstance, AxiosRequestConfig &#125; <span class="keyword">from</span> <span class="string">'axios'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; HttpError, HttpResponse, HttpRequestConfig &#125; <span class="keyword">from</span> <span class="string">'./types.d'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; AxiosCanceler &#125; <span class="keyword">from</span> <span class="string">'./axiosCancel'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; checkStatus &#125; <span class="keyword">from</span> <span class="string">'./checkStatus'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; httpErrorStatusHandle &#125; <span class="keyword">from</span> <span class="string">'./httpError'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">'../token'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> env = <span class="keyword">import</span>.meta.env</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> axiosCanceler = <span class="keyword">new</span> AxiosCanceler()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultConfig: AxiosRequestConfig = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  baseURL: env.VITE_GLOB_API_URL,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  timeout: <span class="number">100000</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  headers: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Accept: <span class="string">'application/json, text/plain, */*'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 数组格式参数序列化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  paramsSerializer: <span class="function"><span class="params">params</span> =&gt;</span> qs.stringify(params, &#123; indices: <span class="literal">false</span> &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Http &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.httpInterceptorsRequest()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.httpInterceptorsResponse()</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 初始化配置对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> initConfig: HttpRequestConfig = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ignoreCancelToken: <span class="literal">true</span>, <span class="comment">// 是否取消重复请求</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    reductDataFormat: <span class="literal">true</span>, <span class="comment">// 是否获取简洁响应数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    errorMessageShow: <span class="literal">true</span> <span class="comment">// 是否开启全局默认的异常提示</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 保存当前Axios实例对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> axiosInstance: AxiosInstance = Axios.create(defaultConfig)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 请求拦截</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">private</span> httpInterceptorsRequest(): <span class="built_in">void</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Http.axiosInstance.interceptors.request.use(</span></pre></td></tr><tr><td class="code"><pre><span class="line">      (config: HttpRequestConfig) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> $config = config</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 添加token</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> token = getToken()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        token &amp;&amp; ($config.headers.token = token)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 处理重复请求</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        !$config.ignoreCancelToken &amp;&amp; axiosCanceler.addPending(config)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> $config</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      error =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    )</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 响应拦截</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">private</span> httpInterceptorsResponse(): <span class="built_in">void</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> instance = Http.axiosInstance</span></pre></td></tr><tr><td class="code"><pre><span class="line">    instance.interceptors.response.use(</span></pre></td></tr><tr><td class="code"><pre><span class="line">      (response: HttpResponse) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> $config = response.config</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 处理重复请求</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        !$config.ignoreCancelToken &amp;&amp; axiosCanceler.removePending($config)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 接口请求提示</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        httpErrorStatusHandle($config.errorMessageShow, &#123; response &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 校验登录过期</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        checkStatus(response.data.code)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 处理是否取简洁数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> $config.reductDataFormat ? response.data : response</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      (error: HttpError) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> $config = error.config</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 接口请求提示</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        $config &amp;&amp; httpErrorStatusHandle($config.errorMessageShow, error)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    )</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 通用请求工具函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> request&lt;T = HttpResponse&gt;(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    config: AxiosRequestConfig,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    options?: HttpRequestConfig</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ): <span class="built_in">Promise</span>&lt;T&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> conf = &#123; ...config, ...Http.initConfig, ...options &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 单独处理自定义请求/响应回掉</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> Http.axiosInstance.request(conf)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> http = <span class="keyword">new</span> Http()</span></pre></td></tr></table></figure>
<p>&nbsp;<br>处理重复请求</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; AxiosRequestConfig, Canceler &#125; <span class="keyword">from</span> <span class="string">'axios'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; isFunction &#125; <span class="keyword">from</span> <span class="string">'/@/utils/is'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> pendingMap = <span class="keyword">new</span> Map&lt;<span class="built_in">string</span>, Canceler&gt;()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getPendingUrl = <span class="function">(<span class="params">config: AxiosRequestConfig</span>) =&gt;</span> [config.method, config.url].join(<span class="string">'&amp;'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AxiosCanceler &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  addPending(config: AxiosRequestConfig) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.removePending(config)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> url = getPendingUrl(config)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    config.cancelToken =</span></pre></td></tr><tr><td class="code"><pre><span class="line">      config.cancelToken ||</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">new</span> axios.CancelToken(<span class="function"><span class="params">cancel</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (!pendingMap.has(url)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          pendingMap.set(url, cancel)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  removeAllPending() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    pendingMap.forEach(<span class="function"><span class="params">cancel</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      cancel &amp;&amp; isFunction(cancel) &amp;&amp; cancel()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    pendingMap.clear()</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  removePending(config: AxiosRequestConfig) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> url = getPendingUrl(config)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (pendingMap.has(url)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">const</span> cancel = pendingMap.get(url)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      cancel &amp;&amp; cancel(url)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      pendingMap.delete(url)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  reset(): <span class="built_in">void</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    pendingMap = <span class="keyword">new</span> Map&lt;<span class="built_in">string</span>, Canceler&gt;()</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>&nbsp;<br>处理异常提示</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; messageInstance &#125; <span class="keyword">from</span> <span class="string">'@fs/smart-design'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 处理异常</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * @param &#123;*&#125; result</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">httpErrorStatusHandle</span>(<span class="params">isConfigShow, result</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (!isConfigShow) <span class="keyword">return</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 服务端200</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (result.response?.data?.code === <span class="number">200</span>) <span class="keyword">return</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 处理被取消的请求</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (axios.isCancel(result))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'请求的重复请求：'</span> + result.message)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">let</span> message = <span class="string">''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (result &amp;&amp; result.response) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">switch</span> (result.response.status) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">case</span> <span class="number">200</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        message = result.response.data?.msg</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">break</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">case</span> <span class="number">302</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        message = <span class="string">'接口重定向了！'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">break</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">case</span> <span class="number">400</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        message = <span class="string">'参数不正确！'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">break</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">case</span> <span class="number">401</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 您未登录，或者登录已经超时，请先登录！</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        message = <span class="string">''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">break</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">case</span> <span class="number">403</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        message = <span class="string">'您没有权限操作！'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">break</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">case</span> <span class="number">404</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        message = <span class="string">`请求地址出错: <span class="subst">$&#123;result.response.config.url&#125;</span>`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">break</span> <span class="comment">// 在正确域名下</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">case</span> <span class="number">408</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        message = <span class="string">'请求超时！'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">break</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">case</span> <span class="number">409</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        message = <span class="string">'系统已存在相同数据！'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">break</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">case</span> <span class="number">500</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        message = <span class="string">'服务器内部错误！'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">break</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">case</span> <span class="number">501</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        message = <span class="string">'服务未实现！'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">break</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">case</span> <span class="number">502</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        message = <span class="string">'网关错误！'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">break</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">case</span> <span class="number">503</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        message = <span class="string">'服务不可用！'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">break</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">case</span> <span class="number">504</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        message = <span class="string">'服务暂时无法访问，请稍后再试！'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">break</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">case</span> <span class="number">505</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        message = <span class="string">'HTTP版本不受支持！'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">break</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">default</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        message = <span class="string">'异常问题，请联系管理员！'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">break</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (result.message?.includes(<span class="string">'timeout'</span>)) message = <span class="string">'网络请求超时！'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (result.message?.includes(<span class="string">'Network'</span>)) message = <span class="built_in">window</span>.navigator.onLine ? <span class="string">'服务端异常！'</span> : <span class="string">'您断网了！'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (message) messageInstance.error(message)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>&nbsp;<br>处理异常登录</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useUserStoreWithOut &#125; <span class="keyword">from</span> <span class="string">'/@/store/modules/user'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">checkStatus</span>(<span class="params">code: <span class="built_in">number</span></span>): <span class="title">void</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> userStore = useUserStoreWithOut()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">switch</span> (code) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">case</span> <span class="number">401</span>: <span class="comment">// 未授权</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">case</span> <span class="number">403</span>: <span class="comment">// 权限不足</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      userStore.login()</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">break</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">default</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Micro App微前端方案</title>
    <url>/2023/10/26/configuration/configuration13/</url>
    <content><![CDATA[<h3 id="前言介绍"><a href="#前言介绍" class="headerlink" title="前言介绍"></a>前言介绍</h3><p>从我的使用角度而言，微前端本质上做的事情，其实是对大型单体的前端应用将其拆分为多个小的、相对独立的子应用。<br>借用一下Micro App官网图<br><img src="/images/2023/plan-design-003.png" /><br>既然拆分成多个相对独立的应用，且这些应用都要集中运行在一起，那么自然而然就会出现一下的一些问题。<br>样式如何隔离？<br>元素如何隔离？<br>js如何沙箱？<br>应用直接如何通讯？<br>…<br>当然作为应用层的开发者来说，如何实现这些问题确不是我们的重点工作，框架一般会帮我们解决。<br>我们的核心工作是在确保这些功能都正常运行的情况下，规划出整体的对接方案。</p>
<h3 id="方案设计"><a href="#方案设计" class="headerlink" title="方案设计"></a>方案设计</h3><p><strong>单页应用的接入方案</strong><br>单页应用是一个独立的闭环应用，从用户打开页面到进入页面有这以下几个关键逻辑。<br><img src="/images/2023/plan-design-001.png" style="width:380px;" /><br>具体<a href="/2023/10/24/configuration/configuration12">单页应用接入</a>的实现方案可以参考这篇文章。<br>从上述图中，可以看出一个独立应用的闭环系统，在进入页面时，基本都满足了，用户已登录、用户信息已获取到，以及用户拥有该页面的权限这些条件之后，页面才能展示出来。<br>&nbsp;</p>
<p><strong>微前端的接入方案</strong><br>所以微前端也需要实现该闭环逻辑，以达到业务逻辑的完整。<br>&nbsp;<br>基于京东Micro App接入方式<br>可以将该闭环逻辑分别拆分到主应用、子应用中。<br><img src="/images/2023/plan-design-004.png" style="width:340px;" /><br>主应用承担用户登录、以及用户信息获取的功能，此外主应用还必须确保这些信息都获取到之后才能开始加载子应用。<br><img src="/images/2023/plan-design-005.png" style="width:380px;" /><br>子应用承担对应子应用下的页面权限的管控。<br><img src="/images/2023/plan-design-006.png" style="width:380px;" /><br>当然还要包括应用之间数据通信，对应micro app而言提供了应用之间通讯，全局通讯.<br>当然不仅仅是主应用主动向子应用通讯，子应用也可以主动向主应用<a href="https://micro-zoe.github.io/micro-app/docs.html#/zh-cn/data" target="_blank" rel="noopener">数据通信</a>。实际使用一般主应用会以方法的形式提供功能Api接口，供子应用使用。<br><img src="/images/2023/plan-design-007.png" /><br><img src="/images/2023/plan-design-008.png" /><br>基于此完成数据通讯<br><img src="/images/2023/plan-design-009.png" /></p>
<h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p><strong>登录鉴权与数据鉴权</strong><br>这块功能与单页应用中的<code>登录鉴权</code>与<code>数据鉴权</code>可以说是完全一样。<br>具体流程就是：<br>用户进入页面，先检查token是否存在，token不存在证明用户没有登录让用户去登录。token存在就检查用户基本信息是否存在，如果不存在就重新调取接口获取用户信息，存值pinia中，如果用户信息已存在就可以开始挂载子应用了。<br>可参照<a href="/2023/10/24/configuration/configuration12">单页应用接入</a>方案。</p>
<p>需要注意的是，需要选好触发该操作的场景。<br>这里是以vue作为主应用，vue路由匹配成功到就会加载对应的组件（页面），每个组件（页面）里面挂载不同的子应用。<br>所以在主应用的全局路由守卫来触发改场景太合适了。</p>
<p>文件结构如下：<br>router<br>  ├── auths<br>  │   ├── index.ts<br>  │   ├── initDataMiddleware.ts<br>  │   └── loginAuthMiddleware.ts<br>  └── index.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// router/index.ts</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">'vue-router'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> beforeAuth <span class="keyword">from</span> <span class="string">'./auths'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    path: <span class="string">'/'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    redirect: <span class="string">'/vite4/'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    path: <span class="string">'/vite4/:page*'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/vite4.vue'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    path: <span class="string">'/react/:page*'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/react.vue'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">] <span class="keyword">as</span> <span class="built_in">any</span>[]</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  history: createWebHistory(<span class="keyword">import</span>.meta.env.BASE_URL),</span></pre></td></tr><tr><td class="code"><pre><span class="line">  routes: routes</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">router.beforeEach(beforeAuth)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span></pre></td></tr></table></figure>
<p><code>beforeAuth</code>与单页应用的逻辑基本一致，只是中间件数量上的区别，可参照<a href="/2023/10/24/configuration/configuration12">单页应用接入</a>方案。<br>&nbsp;<br><strong>路由鉴权</strong><br>也是与单页应用的逻辑一致，唯一区别就是需要处理一下主应用那边下发的数据。<br>文件结构如下：<br>router<br>├── auths<br>│ ├── index.ts<br>│ ├── initDataMiddleware.ts<br>│ └── routeAuthMiddleware.ts<br>└── index.ts</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; RouteLocationNormalized &#125; from &quot;vue-router&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; useUserStoreWithOut &#125; from &quot;&#x2F;@&#x2F;store&#x2F;modules&#x2F;user&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">export default async (to: RouteLocationNormalized, _from: any, next: any) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const userStore &#x3D; useUserStoreWithOut();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 校验store里的userInfo 是否存在</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const userInfoToken &#x3D; userStore.token;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  if (!userInfoToken) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    const microStore &#x3D; window.microApp.getGlobalData()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    const data &#x3D; microStore.getUserInfo(); &#x2F;&#x2F; 返回主应用下发的data数据</span></pre></td></tr><tr><td class="code"><pre><span class="line">    userStore.setUserInfo(data);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>
<p>&nbsp;<br><strong>Micro App主应用接入</strong><br>整体来说micro的接入非常的简单，下载安装<code>@micro-zoe/micro-app</code>之后，在main.ts中start一下，然后组件中就可以使用webComponent<code>micro-app</code>注册子应用了。<br>文件结构如下：<br>micro<br>├── micro.config.ts<br>├── micro.store.ts<br>└── index.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> microApp <span class="keyword">from</span> <span class="string">'@micro-zoe/micro-app'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> microConfig <span class="keyword">from</span> <span class="string">'./micro.config'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> microStore <span class="keyword">from</span> <span class="string">'./micro.store'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">microApp.start(microConfig)</span></pre></td></tr><tr><td class="code"><pre><span class="line">microApp.setGlobalData(microStore)</span></pre></td></tr></table></figure>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> microConfig = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="string">'disable-memory-router'</span>: <span class="literal">true</span>, <span class="comment">// 关闭虚拟路由</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  lifeCycles: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    created() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// console.log('created 全局监听')</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    beforemount() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// console.log('beforemount 全局监听')</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    mounted() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// console.log('mounted 全局监听')</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    unmount() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// console.log('unmount 全局监听')</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// console.log('error 全局监听')</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  plugins: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    modules: &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> microConfig</span></pre></td></tr></table></figure>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useUserStoreWithOut &#125; <span class="keyword">from</span> <span class="string">'../store/modules/user'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userStore = useUserStoreWithOut()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/** 获取用户基本信息 */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getUserInfo = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> userStore.userInfo</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/** 登录 */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> login = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> userStore.login()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> microStore = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  getUserInfo,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  login</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> microStore</span></pre></td></tr></table></figure>
<p><a href="https://micro-zoe.github.io/micro-app/docs.html#/" target="_blank" rel="noopener">官方文档地址</a><br><a href="https://github.com/wangxiaoqi0123/micro-app-test" target="_blank" rel="noopener">示例代码地址</a></p>
<h3 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h3><p>micro app 目前还存在些许问题，记录一下方便后面问题处理。</p>
<p>1.&nbsp;路由回退路径会缺失<br>使用router.push()切换到不同子应用时，路由回退路径会缺失。<br>目前想到的解决办法是:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">history.pushState(&#123;&#125;, &#39;&#39;, path)</span></pre></td></tr><tr><td class="code"><pre><span class="line">router.replace(&#123; path &#125;)</span></pre></td></tr></table></figure>
<p>去替代router.push()<br>&nbsp;<br>2.&nbsp;vite中使用new URL()生成的动态路径错误<br>vite中使用动态路径，一般按照一下方式；<br>这样处理之后项目构建之后vite会自动帮我们替换成带有hash的文件地址。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;button v-for&#x3D;&quot;item in list&quot; :key&#x3D;&quot;item&quot; @click&#x3D;&quot;fileType &#x3D; item&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;&#123; item &#125;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;button&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;img :src&#x3D;&quot;fileImage&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script setup lang&#x3D;&quot;ts&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const list &#x3D; [&quot;pdf&quot;, &quot;png&quot;, &quot;ppt&quot;];</span></pre></td></tr><tr><td class="code"><pre><span class="line">const fileType &#x3D; ref(&quot;pdf&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">const fileImage &#x3D; computed(() &#x3D;&gt; new URL(&#96;&#x2F;src&#x2F;assets&#x2F;$&#123;fileType.value&#125;.png&#96;, import.meta.url).href)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;</span></pre></td></tr></table></figure>
<p>单在微前端环境中，这种方式得到的url地址的origin是微前端服务地址，而不是子应用的服务地址。这就导致图片加载失败。<br>基于这个问题可以用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const combineURLs &#x3D; (baseURL, relativeURL) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return relativeURL</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ? &#96;$&#123;baseURL.replace(&#x2F;\&#x2F;+$&#x2F;, &#39;&#39;)&#125;&#x2F;$&#123;relativeURL.replace(&#x2F;^\&#x2F;+&#x2F;, &#39;&#39;)&#125;&#96;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    : baseURL</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">const getMicroAssetsPath &#x3D; (url: URL) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  if (window.__MICRO_APP_ENVIRONMENT__) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return combineURLs(window.__MICRO_APP_URL__, url.pathname)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return url.href</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const fileImage &#x3D; computed(() &#x3D;&gt; getMicroAssetsPath(new URL(&#96;&#x2F;src&#x2F;assets&#x2F;$&#123;fileType.value&#125;.png&#96;, import.meta.url)))</span></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>React Router</title>
    <url>/2021/03/21/react/react03/</url>
    <content><![CDATA[<h3 id="路由安装引入"><a href="#路由安装引入" class="headerlink" title="路由安装引入"></a>路由安装引入</h3><ul>
<li>安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i react-router-dom -S</span></pre></td></tr></table></figure></li>
<li>引入<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  HashRouter,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  BrowserRouter,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Switch,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Route,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Link,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  NavLink,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Redirect</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; from &quot;react-router-dom&quot;;</span></pre></td></tr></table></figure>
<strong>HashRouter</strong>、<strong>HistoryRouter</strong> 为别为两种不同的的路由容器组件。</li>
</ul>
<h3 id="react-router-dom"><a href="#react-router-dom" class="headerlink" title="react-router-dom"></a>react-router-dom</h3><ul>
<li>router组件列表<table border="1">
<tr>
  <th width='180px'>组件名称</th>
  <th>说明</th>
</tr>
<tr>
  <td>HashRouter</td>
  <td>
    1. 容器组件，所有路由必须被此组件包裹。<br>
    2. 使用锚点（#）与 onhashchange事件实现sap
  </td>
</tr>
<tr>
  <td>BrowserRouter</td>
  <td>
    1. 容器组件，所有路由必须被此组件包裹。<br>
    2. 使用H5的history API，实现sap不兼容IE9及以下版本。
  </td>
</tr>
<tr>
  <td>Switch</td>
  <td>
    1. 用于渲染与路径匹配的第一个子 &lt;Route/    &gt; 或 &lt;Redirect/&gt;
  </td>
</tr>
<tr>
  <td>Route</td>
  <td>
    1. 根据路径匹配呈现对应的UI。
  </td>
</tr>
<tr>
  <td>Redirect</td>
  <td>
    1. 导航到一个新的的位置，新的位置将覆盖历史栈中的当前条目。<br/>
    2. 只能在 &lt;Switch&gt;中使用
  </td>
</tr>
<tr>
  <td>Link</td>
  <td>
    1. 声明式、可访问的导航链接。
  </td>
</tr>
<tr>
  <td>NavLink</td>
  <td>
    1. 特殊的 Link 提供额外的样式
  </td>
</tr>
</table>

</li>
</ul>
<h3 id="React-Router"><a href="#React-Router" class="headerlink" title="React Router"></a>React Router</h3><blockquote>
<p><strong>HashRouter</strong></p>
</blockquote>
<ul>
<li>基本原理<br>1.hash 路由变化，onhashchange 事件触发<br>2.解析路由的地址，匹配要渲染的组件</li>
<li>基本使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;HashRouter&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Link to&#x3D;&quot;&#x2F;home&quot;&gt;首页&lt;&#x2F;Link&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Link to&#x3D;&quot;&#x2F;about&quot;&gt;关于&lt;&#x2F;Link&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Link to&#x3D;&quot;&#x2F;study&quot;&gt;学习&lt;&#x2F;Link&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Route path&#x3D;&quot;&#x2F;home&quot; component&#x3D;&#123;Home&#125; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Route path&#x3D;&quot;&#x2F;about&quot; component&#x3D;&#123;About&#125; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Route path&#x3D;&quot;&#x2F;study&quot; component&#x3D;&#123;Study&#125; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;HashRouter&gt;</span></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p><strong>HistoryRouter</strong></p>
</blockquote>
<ul>
<li>基本原理<br>1.主动触发 h5 history.pushState(state, title, url) API，改变地址栏路由。<br>2.解析url，匹配要渲染的组件<br>3.由于state值存在history.state中。所以区别于HashRouter路由传参数，页面刷新参数不会消失。</li>
<li>基本使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;BrowserRouter&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Link to&#x3D;&quot;&#x2F;home&quot;&gt;首页&lt;&#x2F;Link&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Link to&#x3D;&quot;&#x2F;about&quot;&gt;关于&lt;&#x2F;Link&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Link to&#x3D;&quot;&#x2F;study&quot;&gt;学习&lt;&#x2F;Link&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Route path&#x3D;&quot;&#x2F;home&quot; component&#x3D;&#123;Home&#125; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Route path&#x3D;&quot;&#x2F;about&quot; component&#x3D;&#123;About&#125; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Route path&#x3D;&quot;&#x2F;study&quot; component&#x3D;&#123;Study&#125; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;BrowserRouter&gt;</span></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p><strong>Switch</strong></p>
</blockquote>
<ul>
<li>解释说明<br>1.用于渲染与路径匹配的第一个子 &lt;Route/    &gt; 或 &lt;Redirect/&gt;<br>2.如果仅仅使用 <Route/> 那么路径匹配的都会被渲染，如果放到 <Switch> 里面则只会渲染一个路由。</li>
<li>使用案例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;BrowserRouter&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Link to&#x3D;&quot;&#x2F;&quot;&gt;index&lt;&#x2F;Link&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Link to&#x3D;&quot;&#x2F;home&quot;&gt;首页&lt;&#x2F;Link&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;&#x2F;* 当页面路由为 &#x2F;home 时Index组件与Home组件都渲染 *&#x2F;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Route path&#x3D;&quot;&#x2F;&quot; component&#x3D;&#123;Index&#125; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Route path&#x3D;&quot;&#x2F;home&quot; component&#x3D;&#123;Home&#125; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Switch&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;&#x2F;* 当页面路由为 &#x2F;home 只渲染匹配的第一个Index组件 *&#x2F;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;Route path&#x3D;&quot;&#x2F;&quot; component&#x3D;&#123;Index&#125; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;Route path&#x3D;&quot;&#x2F;home&quot; component&#x3D;&#123;Home&#125; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;Switch&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;BrowserRouter&gt;</span></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p><strong>Route</strong></p>
</blockquote>
<ul>
<li>解释说明<br>1.根据路径匹配呈现对应的UI。</li>
<li>属性说明<br><code>path</code>: { string | string [] } 路由路径<br><code>exact</code>: { boolean } 是否精确匹配 URL<br><code>component</code>: { Component } 需要渲染的组件<br><code>render</code>: { function } 行内渲染组件<br><code>children</code>: { function } 无论是否能匹配到路由都将显示的内容<br><code>strict</code>: { boolean } 带有尾部 “/” 的 path 只能匹配带有尾部 “/” 的 URL<br><code>sensitive</code>: { boolean } URL 是否区分大小写</li>
<li>基本使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;BrowserRouter&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;&#x2F;* 普通 path *&#x2F;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Route path&#x3D;&quot;&#x2F;about&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;About &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;Route&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;&#x2F;* 数组 path 数组内路径都可以匹配 *&#x2F;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Route path&#x3D;&#123;[&quot;&#x2F;about1&quot;, &quot;&#x2F;about2&quot;]&#125;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;About &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;Route&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;&#x2F;* 使用 exact 时，切换路由为 &#x2F;home 只会精准匹配Home组件 *&#x2F;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Route path&#x3D;&quot;&#x2F;&quot; exact component&#x3D;&#123;Index&#125; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Route path&#x3D;&quot;&#x2F;home&quot; exact component&#x3D;&#123;Home&#125; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;&#x2F;* render 允许内联组件 *&#x2F;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Route path&#x3D;&quot;&#x2F;render&quot; render&#x3D;&#123;() &#x3D;&gt; &lt;div&gt;Render&lt;&#x2F;div&gt;&#125; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;&#x2F;* 无论是否匹配路由都将显示 *&#x2F;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Route children&#x3D;&#123;Study&#125; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;&#x2F;* 带尾部 “&#x2F;” 才能匹配上 *&#x2F;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Route strict path&#x3D;&quot;&#x2F;strict&#x2F;&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;Strict &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;Route&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;&#x2F;* 区分大小写 *&#x2F;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Route sensitive path&#x3D;&quot;&#x2F;Sensitive&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;Sensitive &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;Route&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;BrowserRouter&gt;</span></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p><strong>Redirect</strong></p>
</blockquote>
<ul>
<li>解释说明<br>1.导航到一个新的的位置，新的位置将覆盖历史栈中的当前条目。<br>2.只能在 &lt;Switch&gt;中使用。</li>
<li>属性说明<br><code>from</code>: { string } 跳转的路径<br><code>to</code>: { string|object } 重定向到的路径<br><code>push</code>: { boolean } 如果为 true，重定向会将新的位置推入历史记录，而不是替换当前条目<br><code>exact</code>: { boolean } 是否精确匹配 URL<br><code>strict</code>: { boolean } 带有尾部 “/” 的 path 只能匹配带有尾部 “/” 的 URL<br><code>sensitive</code>: { boolean } URL 是否区分大小写</li>
<li>基本使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;HashRouter&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Link to&#x3D;&quot;&#x2F;&quot;&gt;index&lt;&#x2F;Link&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Link to&#x3D;&quot;&#x2F;home&quot;&gt;首页&lt;&#x2F;Link&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Link to&#x3D;&quot;&#x2F;ab&quot;&gt;关于&lt;&#x2F;Link&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Link to&#x3D;&quot;&#x2F;study&quot;&gt;学习&lt;&#x2F;Link&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Switch&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;&#x2F;* 精准匹配 当路径为 &#x2F; 重定向到 &#x2F;home *&#x2F;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;Redirect from&#x3D;&quot;&#x2F;&quot; exact to&#x3D;&quot;&#x2F;home&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;&#x2F;* 匹配 &#x2F;ab 时 重定向到 &#x2F;home 同时向history添加两条历史记录 *&#x2F;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;Redirect from&#x3D;&quot;&#x2F;ab&quot; push to&#x3D;&quot;&#x2F;about&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;Route path&#x3D;&quot;&#x2F;home&quot; component&#x3D;&#123;Home&#125; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;Route path&#x3D;&quot;&#x2F;about&quot; component&#x3D;&#123;About&#125; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;Route path&#x3D;&quot;&#x2F;study&#x2F;&quot; component&#x3D;&#123;Study&#125; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;Switch&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;HashRouter&gt;</span></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p><strong>Link</strong></p>
</blockquote>
<ul>
<li>解释说明<br>1.声明式、可访问的导航链接。</li>
<li>属性说明<br><code>to</code>: { string|object|function } 跳转的链接地址<br><code>replace</code>: { boolean } 默认为 false，如果为 true 点击链接后将替换历史栈中当前条目，而是不添加新条目</li>
<li>基本使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;BrowserRouter&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Link to&#x3D;&quot;&#x2F;home&quot;&gt;首页&lt;&#x2F;Link&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Link to&#x3D;&quot;&#x2F;about&quot; replace&gt;关于&lt;&#x2F;Link&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Route path&#x3D;&quot;&#x2F;home&quot; component&#x3D;&#123;Home&#125; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Route path&#x3D;&quot;&#x2F;about&quot; component&#x3D;&#123;About&#125; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;BrowserRouter&gt;</span></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p><strong>NavLink</strong></p>
</blockquote>
<ul>
<li>解释说明<br>1.特殊的&lt;Link/&gt;，当它与当前 URL 匹配的时候可以加上样式来渲染一些元素。</li>
<li>属性说明<br><code>activeClassName</code>: { string } 激活之后的 class 名<br><code>activeStyle</code>: { object } 激活之后的内联样式<br><code>exact</code>: { boolean } 是否精确匹配 URL 之后样式才会生效<br><code>strict</code>: { boolean } 带有尾部 “/” 的 path 只能匹配带有尾部 “/” 的 URL 样式才会生效<br><code>isActive</code>: { function } 添加额外的激活此链接的函数</li>
<li>基本使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const isActiveFun &#x3D; (match, location) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(&quot;match&quot;, match);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(&quot;location&quot;, location);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return !!match;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">return (</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;BrowserRouter&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;NavLink</span></pre></td></tr><tr><td class="code"><pre><span class="line">      to&#x3D;&quot;&#x2F;home&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      activeClassName&#x3D;&quot;link_active_class&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      activeStyle&#x3D;&#123;&#123; fontSize: &quot;30px&quot; &#125;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      isActive&#x3D;&#123;isActiveFun&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      首页</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;NavLink&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;NavLink to&#x3D;&quot;&#x2F;about&quot;&gt;关于&lt;&#x2F;NavLink&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;Route path&#x3D;&quot;&#x2F;home&quot; component&#x3D;&#123;Home&#125; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;Route path&#x3D;&quot;&#x2F;about&quot; component&#x3D;&#123;About&#125; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;BrowserRouter&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Router-三大属性"><a href="#Router-三大属性" class="headerlink" title="Router 三大属性"></a>Router 三大属性</h3><ul>
<li><p><strong>history</strong></p>
<img src="/images/2021/react_router_property_01.png">
  location 是指当前的位置（location）<br/>
  push(path, state) 向 hisotry 堆栈顶加入一个新的条目<br/>
  replace(path, state)替换在 history 堆栈中的当前条目<br/><br/>
</li>
<li><p><strong>location</strong></p>
<img src="/images/2021/react_router_property_02.png">
search 跳转路由传递在地址栏上的参数信息<br/>
state 跳转时传递的参数信息<br/><br/>
</li>
<li><p><strong>match</strong></p>
<img src="/images/2021/react_router_property_03.png">
  params 路径参数

</li>
</ul>
<h3 id="路由跳转传递参数"><a href="#路由跳转传递参数" class="headerlink" title="路由跳转传递参数"></a>路由跳转传递参数</h3><blockquote>
<p><strong>match params 传递参数</strong></p>
</blockquote>
<ol>
<li>路由中设置 key<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Route path&#x3D;&quot;&#x2F;about&#x2F;:id?&quot; component&#x3D;&#123;About&#125; &#x2F;&gt;</span></pre></td></tr></table></figure></li>
<li>useHistory push 路由跳转<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; useHistory &#125; from &quot;react-router-dom&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; ... </span></pre></td></tr><tr><td class="code"><pre><span class="line">const history &#x3D; useHistory();</span></pre></td></tr><tr><td class="code"><pre><span class="line">const onJump &#x3D; () &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const id &#x3D; &quot;xxx123&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  history.push(&#96;&#x2F;about&#x2F;$&#123;id&#125;&#96;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure></li>
<li>useParams 获取当前路由 match对象中的params<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; useParams &#125; from &quot;react-router-dom&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">const params &#x3D; useParams();</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(&quot;params about&quot;, params); &#x2F;&#x2F; params about &#123;id: &quot;xxx123&quot;&#125;</span></pre></td></tr></table></figure>
<br/>

</li>
</ol>
<blockquote>
<p><strong>BrowserRouter location state 传递参数</strong> (HashRouter 模式下 无效)</p>
</blockquote>
<ol>
<li>useHistory push 路由跳转<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; useHistory &#125; from &quot;react-router-dom&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; ... </span></pre></td></tr><tr><td class="code"><pre><span class="line">const history &#x3D; useHistory();</span></pre></td></tr><tr><td class="code"><pre><span class="line">const onJump &#x3D; () &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  history.push(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    pathname: &quot;&#x2F;about&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    state: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      id: &quot;xxx234&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      type: &quot;view&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure></li>
<li>useLocation 获取当前路由 location对象中的state<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; useLocation &#125; from &quot;react-router-dom&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">const location &#x3D; useLocation();</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(&quot;state about&quot;, location.state); &#x2F;&#x2F;state about &#123;id: &quot;xxx234&quot;, type: &quot;view&quot;&#125;</span></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p><strong>location search 传递参数</strong></p>
</blockquote>
<ol>
<li>useHistory push 路由跳转<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; useHistory &#125; from &quot;react-router-dom&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; ... </span></pre></td></tr><tr><td class="code"><pre><span class="line">const history &#x3D; useHistory();</span></pre></td></tr><tr><td class="code"><pre><span class="line">const onJump &#x3D; () &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  history.push(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    pathname: &quot;&#x2F;home&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    search: &#96;?id&#x3D;$&#123;123&#125;&amp;type&#x3D;view&#96;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure></li>
<li>useLocation 获取当前路由 location对象中的search<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; useLocation &#125; from &quot;react-router-dom&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">const location &#x3D; useLocation();</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(&quot;search about&quot;, location.search); &#x2F;&#x2F;search about ?id&#x3D;xxx234&amp;type&#x3D;view</span></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React常用hooks</title>
    <url>/2021/03/14/react/react04/</url>
    <content><![CDATA[<h3 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h3><blockquote>
<p><code>语法说明</code>const [state, setState] = useState(initState)<br><code>state</code>:当前 state 值<br><code>setState</code>:用于异步更新 state 中的状态<br><code>initState</code>:state 的初始值<br><strong>调用更新函数 setState() 时，函数组件将 重新渲染，并赋予 state 最新的值</strong></p>
</blockquote>
<ul>
<li>基础用法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const [count, setCount] &#x3D; useState(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">return (</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;p&gt;&#123;count&#125;&lt;&#x2F;p&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;button onClick&#x3D;&#123;() &#x3D;&gt; setCount(count + 1)&#125;&gt;add 1&lt;&#x2F;button&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr></table></figure></li>
<li>更新数据<br>直接更新 setCount(count + 1) 当前count为从useState解构出的count<br>函数式更新 setCount(currentCount =&gt; currentCount+1) 可以直接在回调函数中拿到当前count的值<br>useState 不是自动<code>合并更新</code>对象，而是直接替换它。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setState(currentObject &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 也可以使用 Object.assign</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return &#123;...currentObject, ...updatedObject&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h3><blockquote>
<p><code>语法说明</code></p>
<pre><code>useEffect(() =&gt; {

  // 在此可以执行任何带副作用操作
    return () =&gt; { // 在组件卸载前执行

      // 在此做一些收尾工作, 比如清除定时器/取消订阅等
    }

  }, [stateValue]) // 如果指定的是[], 回调函数只会在第一次render()后执行</code></pre><p><code>参数1</code>：执行操作逻辑函数<br><code>参数2</code>：更新 effect 依赖项参数数组</p>
</blockquote>
<ul>
<li>基础用法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useEffect(() &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(&quot;第一次渲染之后及之后每次都会执行&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">useEffect(() &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; componentDidMount</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(&quot;只执行第一次渲染之后&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;, []);</span></pre></td></tr><tr><td class="code"><pre><span class="line">useEffect(() &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  if (count !&#x3D;&#x3D; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; componentDidUpdate</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(&quot;count变化了&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;, [count]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">useEffect(() &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return () &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; componentWillUnmount</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(&quot;函数组件被卸载&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;, []);</span></pre></td></tr></table></figure>
  可以把 useEffect Hook 看做类函数组件componentDidMount() componentDidUpdate() componentWillUnmount()三个生命周期钩子的组合</li>
</ul>
<h3 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h3><blockquote>
<p><code>使用方式</code><br>1.创建上下文组件<br><strong>const MyContext = React.createContext()</strong><br>2.使用MyContext.Provider作为所有组件的容器组件，通过value属性给后代组件传递数据<br><strong>&lt;MyContext.Provider value={数据}&gt; 子组件 &lt;/MyContext.Provider&gt;</strong><br>3.后代组件通过useContext读取到value中传递的数据<br><strong>const {数据} = useContext(MyContext)</strong></p>
</blockquote>
<ul>
<li>基本使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const MyContent &#x3D; React.createContext();</span></pre></td></tr><tr><td class="code"><pre><span class="line">function App() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return (</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;MyContent.Provider value&#x3D;&#123;&#123; appComponentName: &quot;app123&quot; &#125;&#125;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;h1&gt;App Component&lt;&#x2F;h1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;Parent &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;MyContent.Provider&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  );</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">function Parent() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return (</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;h2&gt;Parent Component&lt;&#x2F;h2&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;Child &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  );</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">function Child() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const &#123; appComponentName &#125; &#x3D; useContext(MyContent);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return (</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;h3&gt;Child Component&lt;&#x2F;h3&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;p&gt;&#123;appComponentName&#125;&lt;&#x2F;p&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  );</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
  useContext处理多层级传递数据的方式</li>
</ul>
<h3 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h3><blockquote>
<p><code>语法说明</code>const [state, dispatch] = useReducer(reducer, initialState);<br><code>state</code>:当前 state 值<br><code>dispatch</code>:通过 type 派发 reducer中的事件<br><code>reducer</code>: (state,action) = {} 需要派发的事件 state为当前state中的值，action为dispatch传递过来的参数。<br><code>initialState</code>:state 的初始值</p>
</blockquote>
<ul>
<li>基本使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const initialState &#x3D; &#123; count: 0 &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const reducer &#x3D; (state, action) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const &#123; type, num &#x3D; 1 &#125; &#x3D; action;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  switch (type) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    case &quot;increment&quot;:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      return &#123; ...state, count: state.count + num &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    case &quot;decrement&quot;:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      return &#123; ...state, count: state.count - num &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    default:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      throw new Error(&quot;unknown type&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">function App() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const [state, dispatch] &#x3D; useReducer(reducer, initialState);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return (</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;h1&gt;&#123;state.count&#125;&lt;&#x2F;h1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; &#123;dispatch(&#123; type: &quot;increment&quot; &#125;)&#125;&#125;&gt;加&lt;&#x2F;button&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; &#123;dispatch(&#123; type: &quot;decrement&quot;, num: 2 &#125;)&#125;&#125;&gt;减&lt;&#x2F;button&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  );</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
通过dispatch改变state中的值也会触发函数重新执行渲染</li>
</ul>
<h3 id="uesRef"><a href="#uesRef" class="headerlink" title="uesRef"></a>uesRef</h3><ul>
<li>获取dom节点<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const inputRef &#x3D; useRef();</span></pre></td></tr><tr><td class="code"><pre><span class="line">useEffect(() &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(&quot;inputRef&quot;, inputRef); &#x2F;&#x2F; inputRef &#123;current: input&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;, []);</span></pre></td></tr><tr><td class="code"><pre><span class="line">return (</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;input ref&#x3D;&#123;inputRef&#125; type&#x3D;&quot;text&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr></table></figure></li>
<li>存放变量<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const myDataRef &#x3D; useRef(&#123; count: 0 &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">const handleAdd &#x3D; () &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  myDataRef.current.count++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const currentCount &#x3D; myDataRef.current.count;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  if (currentCount &gt; 5) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    alert(currentCount);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">return (</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;button onClick&#x3D;&#123;handleAdd&#125;&gt;加&lt;&#x2F;button&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr></table></figure>
<strong>useRef可以存放变量，与state不同它的值修改了不会造成组件的重新渲染。</strong><br/>
<br/></li>
<li>配合<strong>forwardRef</strong>与<strong>useImperativeHandle</strong>获取组件上暴露的数据<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function App() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const myComponentRef &#x3D; useRef();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  useEffect(() &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(myComponentRef); &#x2F;&#x2F; current: &#123;text: &quot;MyComponent&quot;, testFn: ƒ&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;, []);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return (</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;MyComponent ref&#x3D;&#123;myComponentRef&#125; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  );</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const MyComponent &#x3D; forwardRef((props, ref) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const testFn &#x3D; () &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    alert(123);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  useImperativeHandle(ref, () &#x3D;&gt; (&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    testFn: testFn,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    text: &quot;MyComponent&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return (</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;h1&gt;MyComponent&lt;&#x2F;h1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  );</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="memo"><a href="#memo" class="headerlink" title="memo"></a>memo</h3><blockquote>
<p><code>语法说明</code></p>
<pre><code>const MyComp = memo(MyComponent);</code></pre><p><code>MyComponent</code>：组件<br><code>MyComp</code>：被<code>memo</code>记忆的组件MyComponent组件，<strong>父组件渲染时</strong>，<strong>传入的props值未发生变化</strong>，组件不重新渲染。</p>
</blockquote>
<ul>
<li>基础用法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function App() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const [count, setCount] &#x3D; useState(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return (</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;h1</span></pre></td></tr><tr><td class="code"><pre><span class="line">        onClick&#x3D;&#123;() &#x3D;&gt; &#123; setCount(count + 1); &#125;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;count&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;&#x2F;h1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;MyComp &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  );</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const MyComponent &#x3D; () &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(&quot;MyComponent runder...&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return (</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;h1&gt;MyComponent&lt;&#x2F;h1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  );</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const MyComp &#x3D; memo(MyComponent);</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h3><blockquote>
<p><code>语法说明</code></p>
<pre><code>const memoizedValue = useMemo(() =&gt; computeExpensiveValue(a, b), [a, b]);</code></pre><p><code>computeExpensiveValue(a,b)</code>：执行操作逻辑函数<br><code>[a, b]</code>：更新 effect 依赖项参数数组。当依赖发生变化时useMemo会重新计算并返回新的memoizedValue值</p>
</blockquote>
<ul>
<li>基础用法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const [a, setA] &#x3D; useState(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">const [b, setB] &#x3D; useState(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">const memoizedValue &#x3D; useMemo(() &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return a + b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;, [a, b]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">const handleClick &#x3D; () &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  setA(a + 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  setB(b + 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">return (</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;h1&gt;&#123;memoizedValue&#125;&lt;&#x2F;h1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;button onClick&#x3D;&#123;handleClick&#125;&gt;Change a b&lt;&#x2F;button&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h3><blockquote>
<p><code>语法说明</code></p>
<pre><code>const memoizedCallback = useCallback(() =&gt; {
  callback()
}, [a, b]);</code></pre><p><code>memoizedCallback</code>：被记忆的函数。当父组件重新渲染时，如果当前函数已经存在，则此函数不会被重新定义，而是使用之前的函数。<br><code>[a, b]</code>：更新 memoizedCallback 依赖项参数数组。当依赖发生变化时memoizedCallback函数会被从新定义。</p>
</blockquote>
<ul>
<li>基本使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function App() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const [count, setCount] &#x3D; useState(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  const changeChild &#x3D; useCallback(() &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(&quot;changeChild...&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;, []);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return (</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;h1</span></pre></td></tr><tr><td class="code"><pre><span class="line">        onClick&#x3D;&#123;() &#x3D;&gt; &#123; setCount(count + 1); &#125;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;count&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;&#x2F;h1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;MyComponent changeChild&#x3D;&#123;changeChild&#125; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  );</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const MyComponent &#x3D; memo((props) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(&quot;MyComponent runder...&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return (</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;h1&gt;MyComponent&lt;&#x2F;h1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  );</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>
当父函数重新渲染时changeChild函数被重新定义，进而使子组件的props发生改变，导致子组件重新渲染。<br>使用useCallback处理回调函数，使该回调函数被<code>记忆</code>，父组件在渲染时当前函数如果已经被定义，就不会再从新定义，而是使用原来的函数，不会导致props更新。</li>
</ul>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React初体验</title>
    <url>/2021/03/08/react/react05/</url>
    <content><![CDATA[<h3 id="virtul-DOM"><a href="#virtul-DOM" class="headerlink" title="virtul DOM"></a>virtul DOM</h3><blockquote>
<p>virtul DOM 也就是虚拟节点。通过JS的Object对象模拟DOM中的真实节点对象，再通过特定的render方法将其渲染成真实的DOM节点。</p>
</blockquote>
<ul>
<li>jsx生成虚拟dom<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const VDOM &#x3D; (</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;h1 id&#x3D;&quot;title&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;span&gt;Hello，React&lt;&#x2F;span&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;h1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">)</span></pre></td></tr><tr><td class="code"><pre><span class="line">ReactDOM.render(VDOM,document.getElementById(&#39;test&#39;))</span></pre></td></tr></table></figure></li>
<li>React.createdElement生成虚拟dom<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">  * @description: React生成虚拟DOM</span></pre></td></tr><tr><td class="code"><pre><span class="line">  * @param &#123;string&#125; 标签名称</span></pre></td></tr><tr><td class="code"><pre><span class="line">  * @param &#123;Object&#125; 标签上的属性 </span></pre></td></tr><tr><td class="code"><pre><span class="line">  * @param &#123;*&#125; 标签内的内容 </span></pre></td></tr><tr><td class="code"><pre><span class="line">  *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const VDOM &#x3D; React.createElement(</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#39;h1&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;id: &quot;title&quot;&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  React.createElement(&#39;span&#39;, &#123;&#125;, &#39;Hello，React&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">)</span></pre></td></tr><tr><td class="code"><pre><span class="line">ReactDOM.render(VDOM, document.getElementById(&#39;test&#39;))</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><blockquote>
<p>jsx类似于html文档结构，其本质是一个<strong>Object类型的对象</strong>，终会被React转化为真实DOM，呈现在页面上。</p>
</blockquote>
<ul>
<li>可直接在js中书写html结构，不需要写引号<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const VDOM &#x3D; &lt;h1&gt;Hello, React&lt;&#x2F;h1&gt;</span></pre></td></tr></table></figure></li>
<li>标签中混入<code>JS表达式</code>时要用{}<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> const myId &#x3D; &quot;tEstId&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">const VDOM &#x3D; &lt;h1 id&#x3D;&#123;myId.toLowerCase()&#125;&gt;Hello, React&lt;&#x2F;h1&gt;</span></pre></td></tr></table></figure></li>
<li>样式的类名指定不要使用class，使用className<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const VDOM &#x3D; &lt;h1 className&#x3D;&quot;bg-color&quot;&gt;Hello, React&lt;&#x2F;h1&gt;</span></pre></td></tr></table></figure></li>
<li>内联样式，使用style={object}的形式，object为样式属性对象{key:value}，短横线的样式要替换驼峰<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const VDOM &#x3D; &lt;h1 style&#x3D;&#123;&#123;fontSize:&#39;50px&#39;&#125;&#125;&gt;Hello, React&lt;&#x2F;h1&gt;</span></pre></td></tr></table></figure></li>
<li>根标签只能有一个<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const VDOM &#x3D; (</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;h1&gt;Hello, React&lt;&#x2F;h1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;h1&gt;Hello, World&lt;&#x2F;h1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">)</span></pre></td></tr></table></figure></li>
<li>绑定事件使用驼峰方式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class MyComponent extends React.Component &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  handleClick()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(&#39;this&#39;,this) &#x2F;&#x2F; this undefined</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  render()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return &lt;h1 onClick&#x3D;&#123;this.handleClick&#125;&gt;Hello，React Class Component&lt;&#x2F;h1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>标签首字母小写，对应html中元素标签<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const VDOM &#x3D; (</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;h1&gt;Hello, React&lt;&#x2F;h1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;test&gt;123&lt;&#x2F;test&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;&#x2F;* Warning: The tag &lt;test&gt; is unrecognized in this browser. </span></pre></td></tr><tr><td class="code"><pre><span class="line">        If you meant to render a React component, start its name with an uppercase letter.</span></pre></td></tr><tr><td class="code"><pre><span class="line">        in test</span></pre></td></tr><tr><td class="code"><pre><span class="line">        in div *&#x2F;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">)</span></pre></td></tr></table></figure></li>
<li>标签首字母大写，对应react组件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const VDOM &#x3D; (</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;h1&gt;Hello, React&lt;&#x2F;h1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;Test&gt;&lt;&#x2F;Test&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;&#x2F;* Test is not defined *&#x2F;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">)</span></pre></td></tr></table></figure></li>
<li>{}中只能放入<code>js表达式</code>，而不能<code>js语句</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const list &#x3D; [&#39;Angular&#39;,&#39;React&#39;,&#39;Vue&#39;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">const VDOM &#x3D; (</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;h1&gt;Hello React&lt;&#x2F;h1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;ul&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      list.map((item,index) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return &lt;li key&#x3D;&#123;index&#125;&gt;&#123;item&#125;&lt;&#x2F;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;ul&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">)</span></pre></td></tr><tr><td class="code"><pre><span class="line">ReactDOM.render(VDOM,document.getElementById(&#39;test&#39;))</span></pre></td></tr></table></figure>
1.表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方。例如<pre><code>a
a+b
demo(1)
arr.map() 
function test () {}</code></pre>2.语句(代码)<pre><code>if(){}
for(){}
switch(){case:xxxx}</code></pre></li>
</ul>
<h3 id="react中定义组件"><a href="#react中定义组件" class="headerlink" title="react中定义组件"></a>react中定义组件</h3><ul>
<li>函数组件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;1.创建函数式组件</span></pre></td></tr><tr><td class="code"><pre><span class="line">function MyComponent()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  console.log(this); &#x2F;&#x2F;此处的this是undefined，因为babel编译后开启了严格模式</span></pre></td></tr><tr><td class="code"><pre><span class="line">  return &lt;h1&gt;Hello，React Function Component&lt;&#x2F;h1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;2.渲染组件到页面</span></pre></td></tr><tr><td class="code"><pre><span class="line">ReactDOM.render(&lt;MyComponent&#x2F;&gt;,document.getElementById(&#39;test&#39;))</span></pre></td></tr></table></figure>
执行了ReactDOM.render(<MyComponent/>…….之后，发生了什么？<br>  1.React解析组件标签，找到了MyComponent组件。<br>  2.发现组件是使用函数定义的，随后调用该函数，将返回的虚拟DOM转为真实DOM，随后呈现在页面中。  <br/>
  <br/></li>
<li>类式组件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;1.创建类式组件</span></pre></td></tr><tr><td class="code"><pre><span class="line">class MyComponent extends React.Component &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  render()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F;render是放在哪里的？—— MyComponent的原型对象上，供实例使用。</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F;render中的this是谁？—— MyComponent的实例对象 &lt;&#x3D;&gt; MyComponent组件实例对象。</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(&#39;render中的this:&#39;,this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return &lt;h1&gt;Hello，React Class Component&lt;&#x2F;h1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;2.渲染组件到页面</span></pre></td></tr><tr><td class="code"><pre><span class="line">ReactDOM.render(&lt;MyComponent&#x2F;&gt;,document.getElementById(&#39;test&#39;))</span></pre></td></tr></table></figure>
执行了ReactDOM.render(<MyComponent/>…….之后，发生了什么？<br>  1.React解析组件标签，找到了MyComponent组件。<br>  2.发现组件是使用类定义的，随后new出来该类的实例，并通过该实例调用到原型上的render方法。<br>  3.将render返回的虚拟DOM转为真实DOM，随后呈现在页面中。</li>
</ul>
<h3 id="组件实例核心属性"><a href="#组件实例核心属性" class="headerlink" title="组件实例核心属性"></a>组件实例核心属性</h3><ul>
<li>state<blockquote>
<p>state是React为实例组件提供存储状态数据的对象，通过setState修改状态值，进而触发render函数，重新渲染页面。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Weather extends React.Component&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  constructor(props)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    super(props)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F;初始化状态</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.state&#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      isHot:true</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  changeWeather()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F;通过setState进行更新state中isHot数据，然后再次触发render方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.setState(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      isHot:!this.state.isHot</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  render()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    let &#123;isHot&#125; &#x3D; this.state</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return &lt;h1 onClick&#x3D;&#123;this.changeWeather.bind(this)&#125;&gt;今天天气很&#123;isHot?&#39;炎热&#39;:&#39;凉爽&#39;&#125;&lt;&#x2F;h1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
jsx中绑定事件this指向？<br>由于changeWeather是作为onClick的回调，不是通过实例调用的，而是直接调用，所以this不指向当前实例。<br>类中的方法默认开启了局部的严格模式，所以changeWeather中的this为undefined。<br/>
<br/></li>
<li>props<blockquote>
<p>props组件之间数据传递，且不可修改只读。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;创建组件</span></pre></td></tr><tr><td class="code"><pre><span class="line">class Person extends React.Component&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  render()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    const &#123;name,age,sex&#125; &#x3D; this.props</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return (</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;ul&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;li&gt;姓名：&#123;name&#125;&lt;&#x2F;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;li&gt;性别：&#123;sex&#125;&lt;&#x2F;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;li&gt;年龄：&#123;age+1&#125;&lt;&#x2F;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;&#x2F;ul&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    )</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;渲染组件到页面</span></pre></td></tr><tr><td class="code"><pre><span class="line">const p &#x3D; &#123;name:&#39;张三&#39;,age:18&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;组件标签上&lt;Person &#123;...p&#125; &#x2F;&gt; 是将对象全部字段解构传入（注意：...运算符本身不可以解构对象，这里是React组件标签上的特定写法）</span></pre></td></tr><tr><td class="code"><pre><span class="line">ReactDOM.render(&lt;Person &#123;...p&#125; sex&#x3D;&#39;男&#39;&#x2F;&gt;,document.getElementById(&#39;test&#39;))</span></pre></td></tr></table></figure>
react会将标签上的自定义属性，处理成对象，并放置在组件实例的props属性中。如果是函数组件，则可以在函数形参中接受。<br><br/> <br/><blockquote>
<p>对props中字段属性值进行限制</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;对标签属性进行类型、必要性的限制</span></pre></td></tr><tr><td class="code"><pre><span class="line">Person.propTypes &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name:PropTypes.string.isRequired, &#x2F;&#x2F;限制name必传，且为字符串</span></pre></td></tr><tr><td class="code"><pre><span class="line">  sex:PropTypes.string,&#x2F;&#x2F;限制sex为字符串</span></pre></td></tr><tr><td class="code"><pre><span class="line">  age:PropTypes.number&#x2F;&#x2F;限制age为数值</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;指定默认标签属性值</span></pre></td></tr><tr><td class="code"><pre><span class="line">Person.defaultProps &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  sex:&#39;男&#39;,&#x2F;&#x2F;sex默认值为男</span></pre></td></tr><tr><td class="code"><pre><span class="line">  age:18 &#x2F;&#x2F;age默认值为18</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<a href="https://reactjs.bootcss.com/docs/typechecking-with-proptypes.html" target="_blank" rel="noopener">PropTypes 类型检查文档</a></li>
</ul>
<h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><blockquote>
<p>ref标记在元素上对应其dom，ref标记在组件上对应其组件的实例</p>
</blockquote>
<ul>
<li>字符串形式的ref<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Demo extends React.Component&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  showData&#x3D;()&#x3D;&gt;&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    const &#123;input&#125; &#x3D; this.refs</span></pre></td></tr><tr><td class="code"><pre><span class="line">    alert(input.value)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  render()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return(</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;input ref&#x3D;&quot;input&quot; type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;点击按钮提示数据&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;button onClick&#x3D;&#123;this.showData&#125;&gt;点我提示左侧的数据&lt;&#x2F;button&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    )</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
在组件内，标记在元素或组件且以<code>字符串形式的ref</code>，react会将其收集到实例的<code>refs属性</code>上<br>字符串形式的ref，存在效率问题一般不推荐使用<br><br/><br/></li>
<li>回调函数形式的ref<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Demo extends React.Component&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  showData&#x3D;()&#x3D;&gt;&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    const &#123;input&#125; &#x3D; this</span></pre></td></tr><tr><td class="code"><pre><span class="line">    alert(input.value)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  render()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return(</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;&#x2F;* 内联回调 每次render渲染时会先赋值为null 再赋值当前dom或者实例 *&#x2F;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;input ref&#x3D;&#123;c &#x3D;&gt; this.input &#x3D; c &#125; type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;点击按钮提示数据&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;button onClick&#x3D;&#123;this.showData&#125;&gt;点我提示左侧的数据&lt;&#x2F;button&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    )</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
在组件内，标记在元素或组件且以<code>回调函数形式的ref</code>，可以在回调函数内部通过this，直接绑定到实例对象上<br><br/><br/></li>
<li>createRef的使用形式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Demo extends React.Component&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  input &#x3D; React.createRef()</span></pre></td></tr><tr><td class="code"><pre><span class="line">  showData&#x3D;()&#x3D;&gt;&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    const input &#x3D; this.input.current</span></pre></td></tr><tr><td class="code"><pre><span class="line">    alert(input.value)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  render()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return(</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;input ref&#x3D;&#123;this.input&#125; type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;点击按钮提示数据&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;button onClick&#x3D;&#123;this.showData&#125;&gt;点我提示左侧的数据&lt;&#x2F;button&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    )</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
React.createRef调用后可以返回一个容器，该容器可以存储被ref所标识的节点，且该容器与ref一一对应。<br><a href="https://react.docschina.org/docs/refs-and-the-dom.html" target="_blank" rel="noopener">Refs and the DOM</a></li>
</ul>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>TS装饰器</title>
    <url>/2021/01/12/typescript/typescript05/</url>
    <content><![CDATA[<h3 id="装饰器介绍"><a href="#装饰器介绍" class="headerlink" title="装饰器介绍"></a>装饰器介绍</h3><blockquote>
<p>装饰器是一种特殊类型的声明，它能够被附加到类声明，方法，属性或参数上，可以修改类的行为。<br>通俗的讲装饰器就是一个方法，可以注入到类、方法、属性参数上来扩展类、属性、方法、参数的功能。<br>常见的装饰器有：类装饰器、属性装饰器、方法装饰器、参数装饰器<br>装饰器的写法：普通装饰器（无法传参数）、 装饰器工厂（可传参数）</p>
</blockquote>
<h3 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h3><ul>
<li><p>类装饰器在类声明之前被声明（紧靠着类声明）。类装饰器应用于类构造函数，可以用来监视，修改或者替换类定义。<br><strong>普通装饰器</strong></p>
<blockquote>
<p><strong>target</strong>: 当前装饰的类 </p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logClass</span>(<span class="params">target: <span class="built_in">any</span></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'target :&gt;&gt; '</span>, target);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@logClass</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> HttpClient &#123;&#125;</span></pre></td></tr></table></figure>

<p><strong>装饰器工厂</strong></p>
<blockquote>
<p><strong>params</strong>: 传入的参数<br><strong>target</strong>: 当前装饰的类 </p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logClass</span>(<span class="params">params?: <span class="built_in">any</span></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'params :&gt;&gt; '</span>, params);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'target :&gt;&gt; '</span>, target);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@logClass</span>(<span class="string">'url'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> HttpClient &#123;&#125;</span></pre></td></tr></table></figure></li>
<li><p>类的原型上扩展属性方法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logClass</span>(<span class="params">params?: <span class="built_in">any</span></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    target.prototype.url = params</span></pre></td></tr><tr><td class="code"><pre><span class="line">    target.prototype.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">console</span>.log(<span class="string">'run :&gt;&gt; '</span>, <span class="keyword">this</span>.url);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@logClass</span>(<span class="string">'url'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> HttpClient &#123; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj: <span class="built_in">any</span> = <span class="keyword">new</span> HttpClient()</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'url'</span>, obj.url);</span></pre></td></tr><tr><td class="code"><pre><span class="line">obj.run()</span></pre></td></tr></table></figure></li>
<li><p>重载类的构造函数</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">classDecorator</span>&lt;<span class="title">T</span> <span class="title">extends</span> </span>&#123; <span class="keyword">new</span>(...args: <span class="built_in">any</span>[]): &#123;&#125; &#125;&gt;(<span class="keyword">constructor</span>: T) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="keyword">extends</span> <span class="keyword">constructor</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    url: <span class="built_in">string</span> = <span class="string">'啦啦啦啦啦啦'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@classDecorator</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> HttpClient &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> url: <span class="built_in">string</span> | <span class="literal">undefined</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">constructor</span>(<span class="params">url: <span class="built_in">string</span></span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.url = url</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  getData(): <span class="built_in">void</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'HttpClient :&gt;&gt; getData'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj: <span class="built_in">any</span> = <span class="keyword">new</span> HttpClient(<span class="string">'https://www.baidu.com/'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'obj :&gt;&gt; '</span>, obj.url); <span class="comment">// 啦啦啦啦啦啦</span></span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h3><ul>
<li>属性装饰器声明在一个属性声明之前（紧靠着属性声明）<blockquote>
<p><strong>target</strong>：对于静态成员来书是类的构造函数，对于实例成员是类的原型对象<br><strong>propertyKey</strong>: 当前装饰属性的名称</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">propertyDecorator</span>(<span class="params">params: <span class="built_in">string</span></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'target :&gt;&gt; '</span>, target); </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'params :&gt;&gt; '</span>, params);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> HttpClient &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@propertyDecorator</span>(<span class="string">'啦啦啦啦啦'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> url: <span class="built_in">string</span> | <span class="literal">undefined</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">constructor</span>(<span class="params">url: <span class="built_in">string</span></span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.url = url</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  getData() &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h3><ul>
<li><p>方法装饰器声明在一个方法声明之前（紧靠着方法声明）。它会被应用到方法的 属性描述符上，可以用来监视，修改或者替换方法定义。</p>
<blockquote>
<p><strong>target</strong>：对于静态成员来说是类的构造函数，对于实例成员是类的原型对象<br><strong>propertyKey</strong>：被装饰方法的名称<br><strong>descriptor</strong>：被装饰方法的属性描述符</p>
<ol>
<li><p><code>descriptor.configurable</code>：表示能不能通过delete删除属性，能否修改属性的其他描述符特性，或者能否将数据属性修改为访问器属性。当我们通过let obj = {name: ‘’}声明一个对象的时候，这个对象里面所有的属性的configurable描述符的值都是true</p>
</li>
<li><p><code>descriptor.enumerable</code>：表示能不能通过for in或者Object.keys等方式获取到属性，我们一般声明的对象里面这个描述符的值是true,但是对于class类里面的属性来说，这个值是false</p>
</li>
<li><p><code>descriptor.writable</code>：表示能否修改属性的数据值，通过将这个修改为false,可以实现属性只读的效果。</p>
</li>
<li><p><code>descriptor.value</code>：表示当前属性的数据值，读取属性值的时候，从这里读取；写入属性值的时候，会写到这个位置。</p>
</li>
</ol>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">methodDecorator</span>(<span class="params">params: <span class="built_in">string</span></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span>, descriptor: PropertyDescriptor</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'params :&gt;&gt; '</span>, params);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'target :&gt;&gt; '</span>, target);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'propertyKey :&gt;&gt; '</span>, propertyKey);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'descriptor :&gt;&gt; '</span>, descriptor);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> HttpClient &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> url: <span class="built_in">string</span> | <span class="literal">undefined</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">constructor</span>(<span class="params">url: <span class="built_in">string</span></span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.url = url</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@methodDecorator</span>(<span class="string">'啦啦啦啦啦'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  getData() &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
</li>
<li><p>对方法进行扩展</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">methodDecorator</span>(<span class="params">params: <span class="built_in">string</span></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span>, descriptor: PropertyDescriptor</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> fn = descriptor.value</span></pre></td></tr><tr><td class="code"><pre><span class="line">    descriptor.value = <span class="function"><span class="keyword">function</span> (<span class="params">...args: <span class="built_in">any</span>[]</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">console</span>.log(params);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">console</span>.log(args);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      fn.apply(<span class="keyword">this</span>, args)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> HttpClient &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> url: <span class="built_in">string</span> | <span class="literal">undefined</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">constructor</span>(<span class="params">url: <span class="built_in">string</span></span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.url = url</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@methodDecorator</span>(<span class="string">'啦啦啦啦啦'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  getData(id: <span class="built_in">number</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'哈哈哈哈'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'id :&gt;&gt; '</span>, id);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj: <span class="built_in">any</span> = <span class="keyword">new</span> HttpClient(<span class="string">'xxx'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">obj.getData(<span class="number">123456</span>)</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="参数装饰器"><a href="#参数装饰器" class="headerlink" title="参数装饰器"></a>参数装饰器</h3><ul>
<li>参数装饰器声明在一个参数声明之前（紧靠着参数声明）。 参数装饰器应用于类构造函数或方法声明。<blockquote>
<p><strong>target</strong>：对于静态成员来说是类的构造函数，对于实例成员是类的原型对象<br><strong>propertyKey</strong>：被装饰参数对应函数的名称<br><strong>protertyIndex</strong>：被装饰参数在形参中对应的索引（函数中arguments中对应的索引）</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paramsDecorator</span>(<span class="params">params: <span class="built_in">string</span></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span>, propertyIndex: <span class="built_in">number</span></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'params :&gt;&gt; '</span>, params);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'target :&gt;&gt; '</span>, target);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'propertyKey :&gt;&gt; '</span>, propertyKey);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'propertyIndex :&gt;&gt; '</span>, propertyIndex); <span class="comment">// 1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> HttpClient &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> url: <span class="built_in">string</span> | <span class="literal">undefined</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  getData(num: <span class="built_in">number</span>, <span class="meta">@paramsDecorator</span>(<span class="string">'xxx'</span>) id: <span class="built_in">number</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="装饰器运行时执行顺序"><a href="#装饰器运行时执行顺序" class="headerlink" title="装饰器运行时执行顺序"></a>装饰器运行时执行顺序</h3><ul>
<li><p>对于装饰同一个 类、属性、方法、方法参数来说，装饰器的执行顺序都是由内向外执行</p>
<blockquote>
<p>先执行@classDecorator1，再执行@classDecorator2(‘xxx’)</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">classDecorator1</span>(<span class="params">target: <span class="built_in">any</span></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'classDecorator1'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">classDecorator2</span>(<span class="params">params: <span class="built_in">string</span></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'classDecorator2'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@classDecorator2</span>(<span class="string">'xxx'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@classDecorator1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> HttpClient &#123; &#125;</span></pre></td></tr></table></figure>
</li>
<li><p>对于不同的装饰器 属性装饰器 &gt; 方法装饰器 &gt; 方法参数装饰器 &gt; 类装饰器</p>
<blockquote>
<p>@propertyDecorator &gt; @methodDecorator &gt; @paramsDecorator &gt; @classDecorator</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">classDecorator</span>(<span class="params">target: <span class="built_in">any</span></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'classDecorator'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">propertyDecorator</span>(<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'propertyDecorator'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">methodDecorator</span>(<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span>, descriptor: PropertyDescriptor</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'methodDecorator'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paramsDecorator</span>(<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span>, propertyIndex: <span class="built_in">number</span></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'paramsDecorator'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@classDecorator</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> HttpClient &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@propertyDecorator</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> url: <span class="built_in">string</span> | <span class="literal">undefined</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@methodDecorator</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  getData(id: <span class="built_in">number</span>) &#123; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  setData(<span class="meta">@paramsDecorator</span> id: <span class="built_in">number</span>) &#123; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
</li>
<li><p>当一个方法即存在方法装饰器又存在参数装饰器，会先执行参数装饰器 再执行方法装饰器</p>
<blockquote>
<p>@paramsDecorator &gt; @methodDecorator</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">methodDecorator</span>(<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span>, descriptor: PropertyDescriptor</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'methodDecorator'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paramsDecorator</span>(<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span>, propertyIndex: <span class="built_in">number</span></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'paramsDecorator'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> HttpClient &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@methodDecorator</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  getData(<span class="meta">@paramsDecorator</span> id: <span class="built_in">number</span>) &#123; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>TS</title>
    <url>/2024/07/25/typescript/typescript10/</url>
    <content><![CDATA[<h2 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h2><p>基础部分也就是官方提供的一些方法用法技巧，详情的部分大家可以参考官方文档，这里简单一下。</p>
<h3 id="类型变量定义"><a href="#类型变量定义" class="headerlink" title="类型变量定义"></a>类型变量定义</h3><ul>
<li>interface</li>
<li>type</li>
<li>类型取值<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  age: <span class="built_in">number</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Name = Person[<span class="string">'name'</span>]; <span class="comment">// string</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// enum 枚举</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Red,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Green,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Blue</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Red = Color.Red; <span class="comment">// 0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 数组（数组是没法获取 length 属性的，因为有多少项是不固定的）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Names = <span class="built_in">string</span>[];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> FirstName = Names[<span class="number">0</span>]; <span class="comment">// string</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Len = Names[<span class="string">'length'</span>]; <span class="comment">// number</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 元组（元组是可以获取 length 属性的，因为其长度是固定的）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Language = [<span class="string">'js'</span>, <span class="string">'java'</span>, <span class="string">'python'</span>, <span class="string">'rust'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Rust = Language[<span class="number">3</span>]; <span class="comment">// rust</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> LenTup = Language[<span class="string">'length'</span>]; <span class="comment">// 4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Str = <span class="string">'hello'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> S = Str[<span class="number">0</span>]; <span class="comment">// string</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> StrLen = Str[<span class="string">'length'</span>] <span class="comment">// number 而非具体的数字</span></span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="类型数据和值"><a href="#类型数据和值" class="headerlink" title="类型数据和值"></a>类型数据和值</h3><ul>
<li>类型<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="built_in">boolean</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">number</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">string</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">number</span>[] / <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">[<span class="built_in">number</span>, <span class="built_in">string</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color&#123; RED, GREEN, BLUE &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">any</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">void</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="literal">null</span>、<span class="literal">undefined</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">object</span></pre></td></tr></table></figure>
never类型是一个特殊的类型，它表示的是那些永不存在的值的类型。在后续的类型推导中用来排除某些类型。<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">never</span></pre></td></tr></table></figure>
除此之外还有一种常量类型 经常被大家忽略<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span>; <span class="comment">// 联合类型</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a: A = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> B = &#123; name: <span class="string">'xxx'</span>, age: <span class="number">18</span> &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> b: B = &#123; name: <span class="string">'xxx'</span>, age: <span class="number">18</span> &#125;; </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> C = [<span class="number">1</span>, <span class="built_in">number</span>, <span class="number">2</span>, <span class="built_in">string</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> c: C = [<span class="number">1</span>, <span class="number">111</span>, <span class="number">2</span>, <span class="string">"hello"</span>];</span></pre></td></tr></table></figure>
包括比较冷门字符串<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> D = <span class="string">`test-<span class="subst">$&#123;<span class="string">"A"</span> | <span class="string">"B"</span> | <span class="string">"C"</span>&#125;</span>`</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> d: D = <span class="string">"test-A"</span>; <span class="comment">// 限制只能 "test-A"、"test-B"、"test-C"</span></span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><ul>
<li><p>extends<br>接口继承</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name: <span class="built_in">string</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> B <span class="keyword">extends</span> A &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  age: <span class="built_in">number</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>相当于</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> B &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name: <span class="built_in">string</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  age: <span class="built_in">number</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>类型约束</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> A&lt;T <span class="keyword">extends</span> <span class="built_in">string</span> | <span class="built_in">number</span>&gt; = T</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a:A&lt;<span class="built_in">boolean</span>&gt; = <span class="literal">true</span></span></pre></td></tr></table></figure>
<img src="/images/2024/ts-01.png" style="width:480px;margin-left:0" />

<p>条件判断<br>参考<strong>推导语句</strong></p>
</li>
<li><p>typeof<br>对静态的js变量推到为ts类型</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> test = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name: <span class="string">'xiou'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  hobby: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    run: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  info: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    age: <span class="number">18</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    male: <span class="literal">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> TestType = <span class="keyword">typeof</span> tes</span></pre></td></tr></table></figure>
<img src="/images/2024/ts-02.png" style="width:480px;margin-left:0" />
</li>
<li><p>keyof<br>提取对象接口的键</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> test = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name: <span class="string">'xiou'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  hobby: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    run: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> TestType = <span class="keyword">typeof</span> test</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> TestTypeKey = keyof TestType</span></pre></td></tr></table></figure>
<img src="/images/2024/ts-03.png" style="width:480px;margin-left:0" />
此外还可以 提取数组接口的键、提取枚举类型的键 不过是提取的对象上的属性
</li>
<li><p>in<br>对联合声明类型进行迭代<br>参考<strong>推导语句</strong></p>
</li>
<li><p>infer<br>对类型进行推导</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> ArrType = [<span class="built_in">number</span>, <span class="built_in">string</span>, <span class="built_in">boolean</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> First&lt;T&gt; = T <span class="keyword">extends</span> [infer F, ...infer _Rest] ? F : never</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> A = First&lt;ArrType&gt; <span class="comment">// number</span></span></pre></td></tr></table></figure>
</li>
<li><p>as<br>可以进行类型断言<br>推导语句中可以重新映射键</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Type1 = <span class="string">"A"</span> | <span class="string">"B"</span> | <span class="string">"C"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Type2 = <span class="string">"C"</span> | <span class="string">"D"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Tobj = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  [K <span class="keyword">in</span> Type1 <span class="keyword">as</span> K <span class="keyword">extends</span> Type2 ? K : never]: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="推导语句"><a href="#推导语句" class="headerlink" title="推导语句"></a>推导语句</h3><ul>
<li><p>条件语句<br>类似三元运算</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> A&lt;T&gt; = T <span class="keyword">extends</span> <span class="built_in">string</span> ? <span class="literal">true</span> : <span class="literal">false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a: A&lt;<span class="built_in">string</span>&gt; = <span class="literal">true</span></span></pre></td></tr></table></figure>
</li>
<li><p>循环语句<br>对联合类型进行迭代</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name: <span class="built_in">string</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  age: <span class="built_in">number</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> AType = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  [Key <span class="keyword">in</span> keyof A]: <span class="built_in">boolean</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<img src="/images/2024/ts-04.png" style="width:480px;margin-left:0" />


</li>
</ul>
<h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><p>掌握了上述的基础部分基本上就可以解决日常开发场景下百分之99.99%问题了，但可以解决不代表就能真正解决。<br>没有一些核心概念支撑，这些基础部分的技巧也无法发挥作用，这些概念就如同武林绝学的内功一般存在。<br>所以掌握TS中的一些核心概念非常非常重要！</p>
<h3 id="类型推论"><a href="#类型推论" class="headerlink" title="类型推论"></a>类型推论</h3><p>类型推论比较简单但非常重要，因为TS是静态类型的编程语言，所以它既没有断点debugger，也没有输出。整个类型推导完全靠开发者自己逻辑推导。<br>Ts类型推导简单来说就是已知某种类型，求出另一种类型。但往往一开始想要知道的类型都是不确定的动态，也就是传什么类型就是什么类型，而用户往往是传参数不传类型，Ts会根据参数推算出数据类型，间接得到类型。</p>
<ul>
<li><p>基础类型推论</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>; <span class="comment">// TypeScript 推算出 a 的类型为 number</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="string">"hello"</span>; <span class="comment">// TypeScript 推算出 b 的类型为 string</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> c = <span class="literal">false</span>; <span class="comment">// TypeScript 推算出 c 的类型为 boolean</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">// TypeScript 推算出 d 的类型为 number[]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> e = [<span class="string">"hello"</span>, <span class="string">"world"</span>]; <span class="comment">// TypeScript 推算出 e 的类型为 string[]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> f = [<span class="string">"hello"</span>, <span class="number">1</span>]; <span class="comment">// TypeScript 推算出 f 的类型为 (string | number)[]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Pink,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Blue,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> h = Color.Pink; <span class="comment">// TypeScript 推算出 h 的类型为 Color</span></span></pre></td></tr></table></figure>
<img src="/images/2024/ts-05.png" style="width:480px;margin-left:0" />
</li>
<li><p>const关键字</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span> <span class="keyword">as</span> <span class="keyword">const</span>; <span class="comment">// TypeScript 推算出 a 的类型为 1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="string">"hello"</span> <span class="keyword">as</span> <span class="keyword">const</span>; <span class="comment">// TypeScript 推算出 b 的类型为 hello</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> c = <span class="literal">false</span> <span class="keyword">as</span> <span class="keyword">const</span>; <span class="comment">// TypeScript 推算出 c 的类型为 false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="keyword">as</span> <span class="keyword">const</span>; <span class="comment">// TypeScript 推算出 d 的类型为 readonly [1, 2, 3]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> e = [<span class="string">"hello"</span>, <span class="string">"world"</span>] <span class="keyword">as</span> <span class="keyword">const</span>; <span class="comment">// TypeScript 推算出 e 的类型为 readonly ["hello", "world"]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> f = [<span class="string">"hello"</span>, <span class="number">1</span>] <span class="keyword">as</span> <span class="keyword">const</span>; <span class="comment">// TypeScript 推算出 f 的类型为 readonly ["hello", 1]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> h = Color.Pink <span class="keyword">as</span> <span class="keyword">const</span>; <span class="comment">// TypeScript 推算出 h 的类型为 Color.Pink</span></span></pre></td></tr></table></figure>
<img src="/images/2024/ts-06.png" style="width:480px;margin-left:0" />
</li>
<li><p>函数传参推论</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnData</span>&lt;<span class="title">T</span>&gt;(<span class="params">data: T</span>): <span class="title">T</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> data;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<img src="/images/2024/ts-07.png" style="width:480px;margin-left:0" />
<img src="/images/2024/ts-08.png" style="width:480px;margin-left:0" />
<img src="/images/2024/ts-09.png" style="width:480px;margin-left:0" />
<img src="/images/2024/ts-10.png" style="width:480px;margin-left:0" />
<img src="/images/2024/ts-11.png" style="width:480px;margin-left:0" />
<img src="/images/2024/ts-12.png" style="width:480px;margin-left:0" />
可以得出结论当函数参数是准确值时 传入 string、number、boolean、enum类型推论结果就是其值的常量类型(as const 效果)，当值为 数组、对象类型推论结果就是其字面量的类型推论。

<p>  &nbsp;<br>  当函数参数是个变量呢？<br>  变量是准确值就参照以上逻辑，否则变量是啥类型就推导出啥类型。</p>
</li>
</ul>
<h3 id="类型兼容性"><a href="#类型兼容性" class="headerlink" title="类型兼容性"></a>类型兼容性</h3><p>刚刚说了Ts类型推导简单来说就是已知某种类型，求出另一种类型。类型推导是明白了已知类型是什么，那么类型兼容性与条件语句结合，决定了运算的逻辑。</p>
<ul>
<li><p>对象类型（协变）</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  a: <span class="built_in">number</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  b: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  c: <span class="built_in">boolean</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> B &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  a: <span class="built_in">number</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> TFlag1 = A <span class="keyword">extends</span> B ? <span class="literal">true</span> : <span class="literal">false</span>; <span class="comment">// true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> TFlag2 = B <span class="keyword">extends</span> A ? <span class="literal">true</span> : <span class="literal">false</span>; <span class="comment">// false</span></span></pre></td></tr></table></figure>
</li>
<li><p>函数参数（逆变）</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="function">(<span class="params">value: &#123; a: <span class="built_in">number</span>; b: <span class="built_in">string</span>; c: <span class="built_in">boolean</span> &#125;</span>) =&gt;</span> &#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> B = <span class="function">(<span class="params">value: &#123; a: <span class="built_in">number</span> &#125;</span>) =&gt;</span> &#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> TFlag1 = A <span class="keyword">extends</span> B ? <span class="literal">true</span> : <span class="literal">false</span>; <span class="comment">// false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> TFlag2 = B <span class="keyword">extends</span> A ? <span class="literal">true</span> : <span class="literal">false</span>; <span class="comment">// true</span></span></pre></td></tr></table></figure>
</li>
<li><p>联合类型extends<br>联合类型extends不是一次性判断，而是将每一项单独判读并返回，然后再将这些返回进行联合</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Type1&lt;T&gt; = T <span class="keyword">extends</span> <span class="string">"A"</span> | <span class="string">"B"</span> ? <span class="string">`<span class="subst">$&#123;T&#125;</span>1`</span> : T;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Type2 = Type1&lt;<span class="string">"A"</span> |<span class="string">"B"</span> | <span class="string">"C"</span>&gt;; <span class="comment">// "A1" | "B1" | "C"</span></span></pre></td></tr></table></figure>
<p>先判断 “A”，走到 true 分支，返回 “A1”<br>然后判断 “B” ，走到 true 分支，返回 “B1”<br>最后判断 “C” ，走到 false 分支，返回 “C”<br>再将 “A1”、”B1” “C” 联合成 “A1” | “B1” | “C” 并返回。</p>
</li>
</ul>
<h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><p>前面提到了已知道了类型，也知道了运算规则，就可以推导出想要的类型。那么为什么还要提到函数重载呢？原因是开发过程中有的函数往往会根据不同的参数得到不同的返回。这时候就需要用到函数重载对每种情况单独处理。</p>
<ul>
<li>举个例子<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数重载声明</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="title">number</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">string</span></span>): <span class="title">string</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 通过类型守卫或typeof检查来区分参数类型</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">"number"</span> &amp;&amp; <span class="keyword">typeof</span> b === <span class="string">"number"</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> a + b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">"string"</span> &amp;&amp; <span class="keyword">typeof</span> b === <span class="string">"string"</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> a + b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 使用函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">add(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 输出: 3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">add(<span class="string">"Hello"</span>, <span class="string">" World"</span>); <span class="comment">// 输出: Hello World;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">add(<span class="number">11</span>, <span class="string">'11'</span>); <span class="comment">// 报错</span></span></pre></td></tr></table></figure>
函数重载中的匹配顺序是按照从上往下的原则，也就是第一个函数如果匹配上后面的则不再匹配<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数重载声明</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a: <span class="built_in">any</span>, b: <span class="built_in">string</span></span>): <span class="title">any</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="title">number</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">string</span></span>): <span class="title">string</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 通过类型守卫或typeof检查来区分参数类型</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">"number"</span> &amp;&amp; <span class="keyword">typeof</span> b === <span class="string">"number"</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> a + b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">"string"</span> &amp;&amp; <span class="keyword">typeof</span> b === <span class="string">"string"</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> a + b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> a + b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 使用函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">add(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// function add(a: number, b: number): number</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">add(<span class="string">"Hello"</span>, <span class="string">" World"</span>); <span class="comment">// function add(a: any, b: string): any</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">add(<span class="number">11</span>, <span class="string">'11'</span>); <span class="comment">// function add(a: any, b: string): any</span></span></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
</search>
